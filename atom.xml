<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tiger-ghost</title>
  
  <subtitle>Technology blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-13T13:00:54.959Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tiger</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Five</title>
    <link href="http://yoursite.com/2019/07/26/Linux%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2019/07/26/Linux安全/</id>
    <published>2019-07-26T13:27:03.000Z</published>
    <updated>2019-09-13T13:00:54.959Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="FZShuTi">linux 安全</font></center><br><a id="more"></a></p><h1 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h1><p>对称加密：加密和解密使用同一个密钥<br>DES：Data Encryption Standard，56bits 3DES：<br>AES：Advanced (128, 192, 256bits)<br>Blowfish，Twofish<br>IDEA，RC6，CAST5<br>特性：<br>1、加密、解密使用同一个密钥，效率高<br>2、将原始数据分割成固定大小的块，逐个进行加密<br>缺陷：<br>1、密钥过多<br>2、密钥分发<br>3、数据来源无法确认</p><h1 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h1><p>公钥加密：密钥是成对出现<br>公钥：公开给所有人；public key<br>私钥：自己留存，必须保证其私密性；secret key<br>特点：用公钥加密数据，只能使用与之配对的私钥解密；反之亦然<br>功能：<br>数字签名：主要在于让接收方确认发送方身份<br>对称密钥交换：发送方用对方的公钥加密一个对称密钥后发送给对方<br>数据加密：适合加密较小数据<br>缺点：密钥长，加密解密效率低下<br>算法：<br>RSA（加密，数字签名）<br>DSA（数字签名）<br>ELGamal</p><h1 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h1><p>基于一对公钥/密钥对<br>用密钥对中的一个加密，另一个解密<br>实现加密：<br>接收者<br>生成公钥/密钥对：P和S<br>公开公钥P，保密密钥S<br>发送者<br>使用接收者的公钥来加密消息M将P(M)发送给接收者<br>接收者<br>使用密钥S来解密：M=S(P(M))</p><h1 id="非对称加密-1"><a href="#非对称加密-1" class="headerlink" title="非对称加密"></a>非对称加密</h1><p>实现数字签名：<br>发送者<br>生成公钥/密钥对：P和S<br>公开公钥P，保密密钥S<br>使用密钥S来加密消息M<br>发送给接收者S(M)<br>接收者<br>使用发送者的公钥来解密M=P(S(M))<br>结合签名和加密<br>分离签名</p><h1 id="单向散列"><a href="#单向散列" class="headerlink" title="单向散列"></a>单向散列</h1><p>固定长度输出<br>若修改数据，指纹也会改变（“不会产生冲突”）<br>无法从指纹中重新生成数据（“单向”）<br>功能：数据完整性<br>常见算法<br>md5: 128bits、sha1: 160bits、sha224 、sha256、sha384、sha512<br>常用工具<br>md5sum | sha1sum [ –check ] file<br>openssl、gpg<br>rpm -V</p><pre><code>        下载文件后与网络上的sha256值进行比对，是否属于同一文件[root@centos7 ssh]# sha256sum /dev/sr0506e4e06abf778c3435b4e5745df13e79ebfc86565d7ea1e128067ef6b5a6345  /dev/sr0</code></pre><pre><code>[root@centos7 dir]# md5sum a &gt; md5.log 使用MD5计算a的值保存在md5.log[root@centos7 dir]# md5sum -c md5.log  检查a: OK[root@centos7 dir]# md5sum -c md5.log         当我更改a之后，再次检查，就会报错a: FAILEDmd5sum: WARNING: 1 computed checksum did NOT match[root@centos7 ~]# md5sum a.txt f1.txt &gt; md5.log     文件批量检查[root@centos7 ~]# md5sum -c md5.log a.txt: OKf1.txt: OK</code></pre><h1 id="应用程序：RPM"><a href="#应用程序：RPM" class="headerlink" title="应用程序：RPM"></a>应用程序：RPM</h1><p>文件完整性的两种实施方式<br>被安装的文件<br>MD5单向散列<br>rpm –verify  package_name (or -V)<br>发行的软件包文件<br>GPG公钥签名<br>rpm –import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat*<br>rpm –checksig pakage_file_name (or -K)</p><pre><code>        导入公钥签名(磁盘里面也有)[root@centos7 data]# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7[root@centos7 data]# rpm -K tree-1.6.0-10.el7.x86_64.rpm  检查tree包  tree-1.6.0-10.el7.x86_64.rpm: rsa sha1 (md5) pgp md5 OK[root@centos7 data]# echo &gt;&gt; tree-1.6.0-10.el7.x86_64.rpm tree包增加一个回车[root@centos7 data]# rpm -K tree-1.6.0-10.el7.x86_64.rpm tree-1.6.0-10.el7.x86_64.rpm: rsa sha1 (MD5) PGP MD5 NOT OK  检查出错</code></pre><h1 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h1><p>密钥交换：IKE（ Internet Key Exchange ）<br>公钥加密：<br>DH (Deffie-Hellman)：生成会话密钥，由惠特菲尔德·迪菲（Bailey Whitfield Diffie）和马丁·赫尔曼（Martin Edward Hellman）在1976年发表<br>参看：<a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange</a><br>DH：<br>A: g,p 协商生成公开的整数g, 大素数p<br>B: g,p<br>A:生成隐私数据 :a (a &lt; p)，计算得出 g^a%p，发送给B<br>B:生成隐私数据 :b,计算得出 g^b%p，发送给A<br>A:计算得出 [(g^b%p)^a] %p = g^ab%p，生成为密钥<br>B:计算得出 [(g^a%p)^b] %p = g^ab%p，生成为密钥</p><h1 id="使用gpg实现对称加密"><a href="#使用gpg实现对称加密" class="headerlink" title="使用gpg实现对称加密"></a>使用gpg实现对称加密</h1><p>对称加密file文件 gpg -c file ls file.gpg<br>在另一台主机上解密file gpg -o file -d file.gpg</p><pre><code>[root@centos7 data]# gpg -c passwd        比如加密passwd然后输入密码[root@centos7 data]# ls            可以查看到有一个这样多出来的以.gpg的文件passwd.gpg   这个文件现在查看已经是乱码了[root@centos7 data]# scp passwd.gpg 192.168.152.131:  将文件传入另外一台机器        -d解密，然后按提示输入同样的口令，加密解密用的是一把钥匙，但是这样只会把文件打印到屏幕上，[root@centos6 ~]# gpg -d passwd.gpg          如果要形成新的文件需要  gpg -o passwd.log -d passwd.gpg </code></pre><h2 id="实验-两台主机加密文件并解密"><a href="#实验-两台主机加密文件并解密" class="headerlink" title="实验:两台主机加密文件并解密"></a>实验:两台主机加密文件并解密</h2><div class="note info"><p>centos6建立公钥和私钥，传给centos7公钥并加密文件后，再传回centos6解密</p></div><pre><code>[root@centos6 ~]# gpg --list-keys 查看公钥[root@centos6 ~]# gpg --gen-key        生成公钥gpg (GnuPG) 2.0.14; Copyright (C) 2009 Free Software Foundation, Inc.This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Please select what kind of key you want:    ##提示你用什么算法来实现   (1) RSA and RSA (default)   (2) DSA and Elgamal   (3) DSA (sign only)        ##这里是实现签名   (4) RSA (sign only)Your selection?             ##这里回车表示默认第一条RSA keys may be between 1024 and 4096 bits long.  What keysize do you want? (2048) 1024        ##指定加密位数Requested keysize is 1024 bitsPlease specify how long the key should be valid.                 ##这里表示你生成的秘钥是否要给他指定一个有效期         0 = key does not expire ##0表示一直有效      &lt;n&gt;  = key expires in n days      &lt;n&gt;w = key expires in n weeks      &lt;n&gt;m = key expires in n months      &lt;n&gt;y = key expires in n yearsKey is valid for? (0) Key does not expire at allIs this correct? (y/N) y  ##你确定刚才的操作吗GnuPG needs to construct a user ID to identify your key.##需要你构建一个key的用户，表示这个key是谁的Real name: xiaohuEmail address:  ##回车忽略Comment: You selected this USER-ID:    &quot;xiaohu&quot;##更改用户名      更改描述  更改邮箱  或者 确定 退出Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o can&#39;t connect to `/root/.gnupg/S.gpg-agent&#39;: No such file or directory##这句话表示没有这个目录(应该是默认不做加密操作就没有这个目录)，但是现在其实已经有了                         ┌─────────────────────────────────────────────────────┐                         │ Enter passphrase                                    │                         │                                                     │                         │                                                     │                         │ Passphrase ________________________________________ │                         │                                                     │                         │       &lt;OK&gt;                             &lt;Cancel&gt;     │                         └─────────────────────────────────────────────────────┘##这里提示你输入一个口令，他表示你需要对私钥加一个口令。(担心私钥泄露)也可以不加后面选择&quot;&lt;Take this one anyway&gt;&quot;##然后提示你一大堆文字，是要你在主机上随意点击鼠标位置，根据这个来生成大量随机数。最后生成的:gpg: checking the trustdbgpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust modelgpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1upub   2048R/DD213C96 2019-06-29      Key fingerprint = F035 585E 9E43 D3AA 69E2  FE43 77C4 B0A8 DD21 3C96uid                  xiaohusub   2048R/9817AA4F 2019-06-29[root@centos6 ~]# cd /root/.gnupg/[root@centos6 .gnupg]# lltotal 32-rw-------. 1 root root 7856 May 22 07:46 gpg.confdrwx------. 2 root root 4096 Jun 29 17:02 private-keys-v1.d-rw-------. 1 root root 1165 Jun 29 17:24 pubring.gpg ##公钥-rw-------. 1 root root 1165 Jun 29 17:24 pubring.gpg~-rw-------. 1 root root  600 Jun 29 17:24 random_seed-rw-------. 1 root root 2466 Jun 29 17:24 secring.gpg ##私钥-rw-------. 1 root root 1280 Jun 29 17:24 trustdb.gpg[root@centos6 .gnupg]# gpg -a --export -o /data/xiaohupubkey    ##倒出文件 -a，--armor：创建ascii输出--export：导出keys-o：输出文件至where name--gen-key：生成一对儿密钥-e，--encrypt：加密数据-r：使用哪个密钥对加密encrypt for USER-ID-d：解密文件##现在/data目录下已经有了这个文件，因为-a所以能看到内容不再是乱码    再把公钥拷贝的对应的机器上去scp xiaohupubkey 192.168.152.136:/data##在centos7新建一个公钥[root@centos7 .gnupg]# gpg --import /data/xiaohupubkey ##导入刚刚centos6传入的公钥##然后/root/.gnupg/pubring.gpg文件会变大[root@centos7 data]# gpg -e -r xiaohu passwd    ##使用centos6传入过来的秘钥进行加密，文件名passwd[root@centos7 data]# scp passwd.gpg 192.168.152.131:/data  ##将加密好的文件传入centos6[root@centos6 data]# gpg -o passwd.log -d passwd.gpg  ##-d解密文件passwd.gpg,-o输出到passwd.loggpg: encrypted with 2048-bit RSA key, ID 9817AA4F, created 2019-06-29      &quot;xiaohu&quot;实验结束删除密钥呢 (如果要删除公钥前要删除私钥)（1）删除私钥[root@centos6~]#gpg --delete-secret-keys centos6（2）删除公钥[root@centos6~]#gpg --delete-keys centos6</code></pre><h1 id="CA和证书"><a href="#CA和证书" class="headerlink" title="CA和证书"></a>CA和证书</h1><p><font color="#0d33ff"><i class="fa fa-lightbulb-o fa-2x"></i></font>PKI: Public Key Infrastructure<br>签证机构：CA（Certificate Authority）<br>注册机构：RA<br>证书吊销列表：CRL<br>证书存取库：</p><p><font color="#0d33ff"><i class="fa fa-lightbulb-o fa-2x"></i></font>X.509：定义了证书的结构以及认证协议标准<br>版本号        主体公钥<br>序列号        CRL分发点<br>签名算法        扩展信息<br>颁发者        发行者签名<br>有效期限<br>主体名称    </p><h1 id="openssl命令"><a href="#openssl命令" class="headerlink" title="openssl命令"></a>openssl命令</h1><p><font color="#0d33ff"><i class="fa fa-lightbulb-o fa-2x"></i></font>对称加密：<br>工具：openssl enc, gpg<br>算法：3des, aes, blowfish, twofish</p><p><font color="#0d33ff"><i class="fa fa-lightbulb-o fa-2x"></i></font>enc命令：<br>帮助：man enc</p><pre><code>enc:表示加密编码-e:进行加密操作，默认操作。-des3:加密算法-in:指定输入的密钥文件-out:指定提取生成公钥的文件(PEM公钥格式)-d:允许解密文件[root@centos7 data]# openssl enc -e -des3 -in passwd -out passwd.enc ##加密[root@centos7 data]# openssl enc -d -des3 -in passwd.enc -out passwd.jie ##解密</code></pre><h1 id="openssl命令-1"><a href="#openssl命令-1" class="headerlink" title="openssl命令"></a>openssl命令</h1><p><font color="#0d33ff"><i class="fa fa-file-archive-o fa-2x"></i></font>单向加密：<br>工具：md5sum, sha1sum, sha224sum,sha256sum…<br>openssl dgst<br>dgst命令：<br>帮助：man dgst<br>openssl dgst -md5 [-hex默认] /PATH/SOMEFILE<br>openssl dgst -md5 testfile<br>md5sum /PATH/TO/SOMEFILE</p><p><font color="#0d33ff"><i class="fa fa-file-archive-o fa-2x"></i></font>MAC: Message Authentication Code，单向加密的一种延伸应用，用于实现网络通信中保证所传输数据的完整性机制<br>CBC-MAC<br>HMAC：使用md5或sha1算法</p><pre><code>[root@centos6 data]# openssl dgst -sha512 passwdSHA512(passwd)= d9a43b2f911b81b10530a6bc25342d18a9df22a2cd2d69a3b93f10253302244f33dbaa7c336ba7cf5e4acf92c2ff44311ec1f4b2c7dd9081cf78909b7fb08a42[root@centos6 data]# openssl dgst -md5 passwdMD5(passwd)= 30dda824d8888aa640e1af6ba32c5c83[root@centos6 data]# md5sum passwd        虽然工具不一样，但是算法是一样的，所以结果也是一样的30dda824d8888aa640e1af6ba32c5c83  passwd</code></pre><h1 id="openssl命令-2"><a href="#openssl命令-2" class="headerlink" title="openssl命令"></a>openssl命令</h1><p><font color="#0d33ff"><i class="fa fa-file-text-o fa-2x"></i></font>生成用户密码：passwd命令:<br>帮助：man sslpasswd<br>openssl passwd -1 -salt SALT(最多8位) <font color="red"><br>-1表示使用md5加密</font><br>openssl passwd -1 –salt centos</p><p><font color="#0d33ff"><i class="fa fa-file-text-o fa-2x"></i></font>生成随机数：<br>帮助：man sslrand<br>openssl rand -base64|-hex NUM<br>NUM: 表示字节数，使用-hex，每个字符为十六进制，相当于4位二进制，出现的字符数为NUM*2</p><pre><code>##这里password:都是123456，但是来两次生成的密码都不一样，是因为他们本身使用了salt的功能；slat的作用就是虽然使用的密码一样的，但是最后生成的加密数是不一样的。但是我们可以指定salt，然后使用的密码是一样的，那么最后生成的密码文件也就是一样的了。[root@centos7 ~]# openssl passwd -1Password: Verifying - Password: $1$ZKfj9UF6$ObtWhvipf.ihRCt9bEXjl/[root@centos7 ~]# openssl passwd -1Password: Verifying - Password: $1$HS7Kkw4e$kyDAv.6jFtFIDesOAs4Ts/[root@centos7 ~]# openssl passwd -1 -salt &quot;ZKfj9UF6&quot;  ##指定saltPassword: $1$ZKfj9UF6$ObtWhvipf.ihRCt9bEXjl/[root@centos7 ~]# openssl rand -base64 3   ehix[root@centos7 ~]# openssl rand -base64 49eMocw==##rand 生成随机数，使用base64编码，3表示3个字节，一个字节8位，24能被6整除，所以不会有等号[root@centos7 ~]# openssl rand -hex 691b2b352a083##6个字节，8个二进制是一个字节，48个二进制。一个16进制是4个二进制，48/4=12个</code></pre><h1 id="openssl命令-3"><a href="#openssl命令-3" class="headerlink" title="openssl命令"></a>openssl命令</h1><p>生成密钥对儿：man genrsa</p><p><font color="#0d33ff"><i class="fa fa-file-text-o fa-2x"></i></font>生成私钥<br>openssl genrsa -out /PATH/TO/PRIVATEKEY.FILE NUM_BITS<br>(umask 077; openssl genrsa –out test.key –des 2048)<br>openssl rsa -in test.key –out test2.key 将加密key解密</p><p><font color="#0d33ff"><i class="fa fa-file-text-o fa-2x"></i></font>从私钥中提取出公钥<br><code>openssl rsa -in PRIVATEKEYFILE –pubout –out PUBLICKEYFILE</code><br><code>openssl rsa –in test.key –pubout –out test.key.pub</code></p><p><font color="#0d33ff"><i class="fa fa-file-text-o fa-2x"></i></font>随机数生成器：伪随机数字键盘和鼠标，块设备中断<br>/dev/random：仅从熵池返回随机数；随机数用尽，阻塞<br>/dev/urandom：从熵池返回随机数；随机数用尽，会利用软件生成伪随机数,非阻塞<br><code>tr -dc &#39;a-zA-Z0-9&#39; /dev/random</code><br>-d:删除指定字符<br>-c:取反</p><pre><code>[root@centos7 ssl]# (umask 066;openssl genrsa -out test.key 1024)  ##生成一个测试文件未加密Generating RSA private key, 1024 bit long modulus.......................++++++...................++++++e is 65537 (0x10001)[root@centos7 ssl]# lstest.key[root@centos7 ssl]# cat test.key -----BEGIN RSA PRIVATE KEY-----MIICXAIBAAKBgQDGOXck947r8qCj/QDJgSYTqiE1v4R35ZhomqnmUObG40ZblUIB5wNJ+CjvdQkLlgl2pzzV15juUB8B/pQ1x5GLWvX57risicZ6osb0VeMGYYRt5BN+2RWPDbweMTQOfrd+wyBiuV436C3q5N81uosrLuqaT+5MdU70fS5t7lauZQIDAQABAoGBAIzJddDgrzbvzZ6LbIqx2qxu0kWNb/WEMXpiFzfI0BAEjg0v9oDJZfGcet6QPktnVfNbFn8/MJRafZt6CCQmSTzyHhu713xWB3MgqMfM4NnCSqmCtQd4S9iinCEybflxO1hZvRHvHKVP4qYCqwNiDCbJVylYBXIP5CSHvaub5F5BAkEA+qEiKn/ZSMXeNusmmXXHppIHIlGEa1+jOEugWL3c+AWEfcBeRm+gltl5TH4D+2AdawzGnE462irvMdFM53im8QJBAMp420DvQ6D8g0aK+GZmiCFKaRpvDnfVhJ8lghU0y7wBkVm7qwr83cR2l7lGISMQXTOmjM7Zu+DmNh9WLkoPBrUCQHrEDx5OPbrd4Xl5OhEVllRLV19CGuEVmbfro4GUjvaWjU2juwo5h6ocoMQNPhoV/JMBURAjacSQH1aBtW/0s6ECQD7yef/jIxxuxQVueTGk2Ne4wZplQpNA/51W1O1w35JQznaeYNvmp6/Hyv3f7rdvA/rl4csBaGbQS61MZtHBgC0CQDavpFNYXIIJYvA2eZrgX93OlaBUp09+rTpfotTNy1MvaWTd8RNaKXCNRW2rCYf1rqIss0nN6CHN+iN7p7K8jxM=-----END RSA PRIVATE KEY-----[root@centos7 ssl]# ll test.key -rw------- 1 root root 887 Sep  9 20:00 test.key[root@centos7 ssl]# (umask 066;openssl genrsa -out ceshi.key -des3 1024)  ##生成测试文件并加密Generating RSA private key, 1024 bit long modulus.....................................++++++................................................++++++e is 65537 (0x10001)Enter pass phrase for ceshi.key:Verifying - Enter pass phrase for ceshi.key:[root@centos7 ssl]# cat ceshi.key -----BEGIN RSA PRIVATE KEY-----Proc-Type: 4,ENCRYPTEDDEK-Info: DES-EDE3-CBC,160DA8EF125E7456xAaXoC6o7yoa3lPPd4YjvRgt0xygDJtHjjMZ4L/XLuW5V9eh/tX+Geju9pL2HHz6DRhhzpdaR60nfEIMEIdhWKe6Vmba5nID1tZluicJiZsnnlWj4wA9v1nau3jtOPJHcbdRRAr1bSR1tgfhixdoWxZ76kO+3vSqBy1onYwjamBuaVuqsvbSx2BiXS3+kVbwohxzfBaBo9rXz+eq7sflDFA76n+oN/0dyFsIlVlMwQukahFI4trEpT3tpcbPq4PCggCWRP9qtuyO399/9m2DIorjnPmTD+2V2m6X5hvbDWxzbauMI+oIaaUMhRlVso/hytqNBp+Y16k00vl5HDAqN47zidhOYSAJuCdJc5v8nRo20odMk5a57cbhIMW46yGlwjUsmdN6U3v0ylQPk7YT568Vdzr9WP289Z36frhzj49EGRJ+D9+bDrgvbmheygwoxlqochRx3+qvYpwy/6Wq/8t3mPhX+I242oqVtXW3gpkUFD+NyeQ8SH/Xs9JfdXj258Kf8flX8+Cu6r4RzerClphfOCr/KhbRemJbzgCUD6eHaaCGfjsHUsS/zmWK4V4NlFfQv/yCAJtRzQv92FTv3gLWeLji+iEyeMk6tCEAdIhl77LDpFxDlSVdfG36PW8MnVK3jL8wDz8xVYmmMef4kEJwLb4T4qlsEjdbZVHBWN8yNZaagiEDDfi9qhZjXUQUSLLuC/ES1Q5bY8mG/eBknK3LXiRC1RjMl+EsRfDrhIOCio+XZWU4++L1KszXYcNItn70FsBKL6KzINCK9aCuM7AW7hgMEsOZEmqXiwV5VV+g+atLk3CZwg==-----END RSA PRIVATE KEY-----[root@centos7 ssl]# openssl rsa -in ceshi.key -out ceshi2.key       ##解密Enter pass phrase for ceshi.key:writing RSA key[root@centos7 ssl]# cat ceshi2.key -----BEGIN RSA PRIVATE KEY-----MIICXQIBAAKBgQC3M6yoLiFfU8wdJSKxE2eVxY9lRlT7Gk0TdYlHMxE34ihAxMUowB0wNvbffidKfGCQucd0ThmzlsYHEIiV69Fo/FLgwJ4QfpF2n/u+XiX9LI/WmLfZcb4gJZvqC1pGf8GtWjDJ9hO70D530LWYoX417dV/pfwpIsbAzcTbCVNwOQIDAQABAoGAJwvMcMvkMP0bM9sGWddY7IL+3QbwddRVOSCD8bjgopiBG8zUeKr5jZ0pYNjyZt27dx0hdZhvwecQrdDIS6vHJcy72Bw9YZ7EZ/ZLkl5+yrgZ7eI8+V8gieNjgFsAyWZgsCGUtgg8OVUgDMnAyHp5rt2ulKBIH9YLMvjypv8pKEECQQDh9GFwmQul7PVwAR1hjLuMJx8BER1/IH0nNDDsAz76LSh3ZqMqzKwn1Rn+tbyO6zaR3AvwEK2dLSrT54oFhTs7AkEAz4/3ZL02xJd6ijuR2M1I1NBqPy/CLWAvF2Do8r8MqzkzncoDExSYSKSQ9Tuj22e4QoJagz+kBdZqNP8KT3WDGwJAJpcvYSSyaZdL3+JA211G1swDrpH2wLSSy3RNerGfOuklhScBbRjhujfaJbdySdKAUm8LlueyTyrcqq5b00+K6wJBAIBk8ggi86oQegDgcIvIEPF0KwUDKf6frQGtNOxUOiYAsGk++T/oUXs+MV1Bk065jkW2FP9zcqcZx4EY8uvMKVkCQQCPCy7Z5bopAoBmi57YmEGkwJVGSZbzeKhmvpeOYsWL5BWZzFRx0w9myQeFUnFQtDQ+12mb896fA8qYXym/7pMr-----END RSA PRIVATE KEY-----    ##刚才生成的都是私钥，现在从私钥中提取公钥[root@centos7 ssl]# openssl rsa -in ceshi2.key -pubout -out cehshijie.keywriting RSA key[root@centos7 ssl]# cat cehshijie.key     -----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC3M6yoLiFfU8wdJSKxE2eVxY9lRlT7Gk0TdYlHMxE34ihAxMUowB0wNvbffidKfGCQucd0ThmzlsYHEIiV69Fo/FLgwJ4QfpF2n/u+XiX9LI/WmLfZcb4gJZvqC1pGf8GtWjDJ9hO70D530LWYoX417dV/pfwpIsbAzcTbCVNwOQIDAQAB-----END PUBLIC KEY-----</code></pre><h1 id="实验两台主机创建CA和申请证书"><a href="#实验两台主机创建CA和申请证书" class="headerlink" title="实验两台主机创建CA和申请证书"></a>实验两台主机创建CA和申请证书</h1><h2 id="1-建立私钥"><a href="#1-建立私钥" class="headerlink" title="1.建立私钥"></a>1.建立私钥</h2><div class="alert alert-warning">私钥文件必须是这个文件名cakey.pema。详细可查看此文件vim /etc/pki/tls/openssl.cnf </div><pre><code>[root@centos7 CA]# (umask 077;openssl genrsa -out /etc/pki/CA/private/cakey.pem 2048)Generating RSA private key, 2048 bit long modulus........+++...........................................................................................................................................................................+++e is 65537 (0x10001)[root@centos7 CA]# tree .├── certs├── crl├── newcerts└── private    └── cakey.pem4 directories, 1 file[root@centos7 private]# ll cakey.pem -rw------- 1 root root 1675 Sep 11 12:14 cakey.pem  ##上面umask值是077，现在文件的权限时600，文件夹的权限是700</code></pre><h2 id="2-生成自签名证书"><a href="#2-生成自签名证书" class="headerlink" title="2.生成自签名证书"></a>2.生成自签名证书</h2><p>创建CA和申请证书<br>生成自签名证书<br><code>openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -days 3650 -out /etc/pki/CA/cacert.pem</code><br>选项说明：<br>req：申请<br>-new：生成新证书签署请求<br>-x509：专用于CA生成自签证书<br>-key：生成请求时用到的私钥文件<br>-days n：证书的有效期限<br>-out /PATH/TO/SOMECERTFILE: 证书的保存路径</p><pre><code>[root@centos7 private]# openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -days 3650 -out /etc/pki/CA/cacert.pemYou are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &#39;.&#39;, the field will be left blank.-----Country Name (2 letter code) [XX]:CN   ##这里是要输入必要的信息。国家  这里等会要匹配State or Province Name (full name) []:beijing   ##省(州)  这里等会要匹配Locality Name (eg, city) [Default City]:beijing   ##(城市)Organization Name (eg, company) [Default Company Ltd]:pan   ##公司名  这里等会要匹配Organizational Unit Name (eg, section) []:devops       ##组织Common Name (eg, your name or your server&#39;s hostname) []:ca.magedu.com   ##表示证书是给那个域名颁发的Email Address []:[root@centos7 private]# ls        ##现在这个文件已经建立好了，可以穿到windows上，后缀名改为crt，就可以看到证书cakey.pem</code></pre><h2 id="颁发证书"><a href="#颁发证书" class="headerlink" title="颁发证书"></a>颁发证书</h2><p><div class="alert alert-danger">在需要使用证书的主机生成证书请求</div>现在是centos6的机器生成以下文件</p><p><font color="#4de680"><i class="fa fa-arrow-down fa-2x"></i></font>给web服务器生成私钥<br><code>(umask 066; openssl genrsa –out    /data/test.key 2048)</code></p><p><font color="#4de680"><i class="fa fa-arrow-down fa-2x"></i></font>生成证书申请文件<br><code>openssl req -new -key /data/test.key -out /data/test.csr</code></p><p><font color="#4de680"><i class="fa fa-arrow-down fa-2x"></i></font>将证书请求文件传输给CA</p><p><font color="#4de680"><i class="fa fa-arrow-down fa-2x"></i></font>CA签署证书，并将证书颁发给请求者<br><code>openssl ca -in /tmp/test.csr –out    /etc/pki/CA/certs/test.crt -days 100</code><br>注意：默认要求 国家，省，公司名称三项必须和CA一致</p><pre><code>[root@centos6 ssl]# (umask 066;openssl genrsa -out /data/ssl/app.key 1024)  ##首先新建私钥Generating RSA private key, 1024 bit long modulus..........++++++.++++++e is 65537 (0x10001)[root@centos6 ssl]# lltotal 4-rw-------. 1 root root 891 Jul  6 10:05 app.key##生成证书申请文件，注意：默认要求 国家，省，公司名称三项必须和CA一致，详情看上文[root@centos6 ssl]# openssl req -new -key app.key -out app.csr         You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &#39;.&#39;, the field will be left blank.-----Country Name (2 letter code) [XX]:CNState or Province Name (full name) []:beijingLocality Name (eg, city) [Default City]:beijingOrganization Name (eg, company) [Default Company Ltd]:panOrganizational Unit Name (eg, section) []:devops    Common Name (eg, your name or your server&#39;s hostname) []:*.magedu.comEmail Address []:Please enter the following &#39;extra&#39; attributesto be sent with your certificate requestA challenge password []:An optional company name []:[root@centos6 ssl]# lltotal 8-rw-r--r--. 1 root root 651 Jul  6 10:42 app.csr-rw-------. 1 root root 891 Jul  6 10:05 app.key##将证书请求文件传输给CA.##现将文件传给centos7[root@centos6 ssl]# scp app.csr 192.168.152.136:/etc/pki/CAroot@192.168.152.136&#39;s password: app.csr                                                                                   100%  651     0.6KB/s   00:00   ##CA签署证书，并将证书颁发给请求者[root@centos7 CA]# openssl ca -in app.csr -out /etc/pki/CA/certs/app.crt -days 1000Using configuration from /etc/pki/tls/openssl.cnf/etc/pki/CA/index.txt: No such file or directoryunable to open &#39;/etc/pki/CA/index.txt&#39;140161312225168:error:02001002:system library:fopen:No such file or directory:bss_file.c:402:fopen(&#39;/etc/pki/CA/index.txt&#39;,&#39;r&#39;)140161312225168:error:20074002:BIO routines:FILE_CTRL:system lib:bss_file.c:404:[root@centos7 CA]# touch index.txt[root@centos7 CA]# openssl ca -in app.csr -out /etc/pki/CA/certs/app.crt -days 1000Using configuration from /etc/pki/tls/openssl.cnf/etc/pki/CA/serial: No such file or directoryerror while loading serial number140378285651856:error:02001002:system library:fopen:No such file or directory:bss_file.c:402:fopen(&#39;/etc/pki/CA/serial&#39;,&#39;r&#39;)140378285651856:error:20074002:BIO routines:FILE_CTRL:system lib:bss_file.c:404:[root@centos7 CA]# [root@centos7 CA]# echo 0f &gt; serial ##这里例是0f，实际用00开始[root@centos7 CA]# cat serial0f[root@centos7 CA]# openssl ca -in app.csr -out /etc/pki/CA/certs/app.crt -days 1000Using configuration from /etc/pki/tls/openssl.cnfCheck that the request matches the signatureSignature okCertificate Details:        Serial Number: 15 (0xf)        Validity            Not Before: Sep 12 19:29:53 2019 GMT            Not After : Jun  8 19:29:53 2022 GMT        Subject:            countryName               = CN            stateOrProvinceName       = beijing            organizationName          = pan            organizationalUnitName    = devops            commonName                = *.magedu.com        X509v3 extensions:            X509v3 Basic Constraints:                 CA:FALSE            Netscape Comment:                 OpenSSL Generated Certificate            X509v3 Subject Key Identifier:                 FC:32:AE:BF:AA:E2:A6:20:CD:2D:7C:99:81:F4:49:70:22:47:F0:B0            X509v3 Authority Key Identifier:                 keyid:51:A7:DF:E0:DE:4E:95:4C:A6:54:45:E4:7A:FF:17:30:04:59:CD:E8Certificate is to be certified until Jun  8 19:29:53 2022 GMT (1000 days)Sign the certificate? [y/n]:y1 out of 1 certificate requests certified, commit? [y/n]yWrite out database with 1 new entriesData Base Updated[root@centos7 CA]# ll certs/app.crt -rw-r--r-- 1 root root 3702 Sep 13 03:31 certs/app.crt[root@centos7 CA]# tree.├── app.csr├── cacert.pem├── certs│   └── app.crt├── crl├── index.txt├── index.txt.attr├── index.txt.old├── newcerts│   └── 0F.pem├── private│   └── cakey.pem├── serial└── serial.old4 directories, 10 files##现在可以将文证书文件传给客户机使用[root@centos7 CA]# scp certs/app.crt 192.168.152.131:/data/ssl root@192.168.152.131&#39;s password: app.crt                               </code></pre><h2 id="创建CA和证书管理"><a href="#创建CA和证书管理" class="headerlink" title="创建CA和证书管理"></a>创建CA和证书管理</h2><p>查看证书中的信息：</p><p><div class="alert alert-success">openssl x509 -in /PATH/FROM/CERT_FILE -noout -text|issuer|subject|serial|dates<br>openssl ca -status SERIAL 查看指定编号的证书状态</div></p><pre><code>openssl x509 -in app.crt -noout -text ##查看证书状态[root@centos7 CA]# cat index.txt          ##存放证书信息的数据库。这里的V表示此证书现在是有效的，吊销是RV       220608192953Z           0F      unknown /C=CN/ST=beijing/O=pan/OU=devops/CN=*.magedu.com[root@centos7 CA]# cat serial        ##下一个证书的编号10[root@centos7 CA]# cat serial.old         ##之前证书版本的备份0f##如果刚才那三项也就是生成新的证书签署的时候那三项设置的不通，发送到centos7后进项的颁发证书就会报错，如果不想重新申请可以更改这个文件: vim /etc/pki/tls/openssl.cnf policy          = policy_match ##如果这里改成anything那么就是填啥都行，下面的就不用更改了‘ 82  83 # For the CA policy 84 [ policy_match ] 85 countryName             = match 86 stateOrProvinceName     = optional ##optional表示设置的可以不一样(可选的，随意的) 87 organizationName        = match 88 organizationalUnitName  = optional 89 commonName              = supplied 90 emailAddress            = optional 91              ##吊销证书(此前我又建立了一个证书)[root@centos7 CA]# openssl ca -revoke /etc/pki/CA/certs/app2.crt Using configuration from /etc/pki/tls/openssl.cnfRevoking Certificate 10.Data Base Updated[root@centos7 CA]# cat index.txtV       220608192953Z           0F      unknown /C=CN/ST=beijing/O=pan/OU=devops/CN=*.magedu.comR       220608223259Z   190912223838Z   10      unknown /C=CN/ST=henan/L=zhengzhou/O=magedu/OU=ops/CN=www.magedu.org        ##更新证书吊销列表[root@centos7 CA]# openssl ca -gencrl -out /etc/pki/CA/crl.pem        ##验证某个用户的证书，用上级证书来验证他颁发证书的有效性openssl verify -CAfile cacert.pem certs/app.crt</code></pre><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i> SSH协议版本<br>v1: 基于CRC-32做MAC，不安全；man-in-middle<br>v2：双方主机协议选择安全的MAC方式<font color="red"><br><i class="fa fa-file-code-o"></i></font> 具体的软件实现：<br>OpenSSH: ssh协议的开源实现，CentOS默认安装dropbear：另一个开源实现<br>基于DH算法做密钥交换，基于RSA或DSA实现身份认证<br>两种方式的用户登录认证：基于password；基于key</div><strong>*</strong></p><h1 id="Openssh软件组成"><a href="#Openssh软件组成" class="headerlink" title="Openssh软件组成"></a>Openssh软件组成</h1><p>OpenSSH介绍<br>相关包： openssh openssh-clients openssh-server<br>工具：<br>基于C/S结构<br>Client: ssh, scp, sftp，slogin<br>Windows客户端：<br>xshell, putty, securecrt, sshsecureshellclient Server: sshd</p><pre><code>[root@centos6 data]# vim /etc/ssh/ssh_host_key.pub         ##删除他的前面的，和末尾的回车换行base64 -d ssh_host_rsa_key.pub &gt; pubkey            ##得到原始公钥文件[root@centos6 data]# md5sum pubkey             ##然后将它做哈希运算1280b0eef28fba5de9f63aa933afb6da  pubkey    ##得到的加密代码[root@centos7 ~]# rm -fr .ssh              ##重新建立ssh连接，通过MD5加密得到的与之进行匹配[root@centos7 ~]# ssh 192.168.152.131The authenticity of host &#39;192.168.152.131 (192.168.152.131)&#39; can&#39;t be established.RSA key fingerprint is SHA256:xFjNGR2DgxSIn5nh9YBemaOxXJyrlztd316Ry0b8+WY.RSA key fingerprint is MD5:12:80:b0:ee:f2:8f:ba:5d:e9:f6:3a:a9:33:af:b6:da.Are you sure you want to continue connecting (yes/no)? yes</code></pre><h1 id="ssh客户端"><a href="#ssh客户端" class="headerlink" title="ssh客户端"></a>ssh客户端</h1><p>客户端组件：<br>ssh, 配置文件：/etc/ssh/ssh_config Host PATTERN<br>StrictHostKeyChecking no 首次登录不显示检查提示<br>格式：ssh [user@]host [COMMAND]<br>ssh [-l user] host [COMMAND]<br>常见选项<br>-p port：远程服务器监听的端口<br>-b：指定连接的源IP<br>-v：调试模式<br>-C：压缩方式<br>-X：支持x11转发(图形界面)<br>-t：强制伪tty分配<br>ssh -t remoteserver1 ssh -t remoteserver2    ssh    remoteserver3<br><code>ssh -t 192.168.152.131 ssh 192.168.152.130</code></p><p><div class="alert alert-info"><i class="fa fa-link"></i> ssh客户端允许实现对远程系统经验证地加密安全访问<br>当用户远程连接ssh服务器时，会复制ssh服务器/etc/ssh/ssh_host*key.pub（CentOS7默认是ssh_host_ecdsa_key.pub）文件中的公钥到客户机的<br>~./ssh/know_hosts中。下次连接时，会自动匹配相应私钥，不能匹配，将拒绝连接</div></p><p><div class="alert alert-info"><i class="fa fa-link"></i> 基于用户和口令登录验证<br>1 客户端发起ssh请求，服务器会把自己的公钥发送给用户<br>2 用户会根据服务器发来的公钥对密码进行加密<br>3 加密后的信息回传给服务器，服务器用自己的私钥解密，如果密码正确，则用户登录成功</div>.</p><h2 id="基于key认证"><a href="#基于key认证" class="headerlink" title="基于key认证"></a>基于key认证</h2><p><div class="alert alert-success">基于密钥的登录方式<br>1 首先在客户端生成一对密钥（ssh-keygen）<br>2 并将客户端的公钥ssh-copy-id 拷贝到服务端<br>3 当客户端再次发送一个连接请求，包括ip、用户名<br>4 服务端得到客户端的请求后，会到authorized_keys中查找，如果有响应的IP和用户，就会随机生成一个字符串，例如：magedu<br>5 服务端将使用客户端拷贝过来的公钥进行加密，然后发送给客户端<br>6 得到服务端发来的消息后，客户端会使用私钥进行解密，然后将解密后的字符串发送给服务端<br>7 服务端接受到客户端发来的字符串后，跟之前的字符串进行对比，如果一致，就允许免密码登录</div>.<br>ssh服务登录验证<br><code>ssh-keygen</code> 建立key<br><code>ssh-copy-id -i /root/.ssh/id_rsa 192.168.152.130</code> 将key文件发送到对应的文件上,这样就已经可以使用了<br>上面建立的私钥并没有设置口令。基于key认证重设私钥口令： <code>ssh-keygen –p</code><br>但是这样每次连接时都必须输入口令。为了方便我们可以设置一个代理程序<br>known_host保存曾经连过的对方主机的公钥</p><pre><code>[root@centos7 ~]# ssh-agent bash[root@centos7 ~]# ssh-add            ##钥匙通过命令添加给代理Enter passphrase for /root/.ssh/id_rsa:         ##刚刚设置私钥的口令Identity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa) ##这样每次连接时就可以直接连接了。但是只能连接一次，退出后就会失效</code></pre><p><div class="alert alert-danger"><font color="#4de680"><i class="fa fa-key fa-2x"></i></font>使用crt生成公钥私钥连接主机<br>crt-tool-Key Generation Wizard 依次默认点击生成公钥和私钥文件(如果最后选择OpenSSH Key format就不需要下面的转换格式)<br>将公钥传到需要连接的主机上,将文件放置~/.ssh目录下<code>ssh-keygen -i -f Identity.pub &gt;&gt; authorized_keys</code> 转换Identity.pub文件的格式，然后追加到文件<br>在crt上连接主机在验证方式这里——Authentication——PublicKey——Propreies选择对应的私钥文件，就可以连上了</div>.</p><p><script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/highlight.min.js"></script></p><p><script>hljs.initHighlightingOnLoad();</script></p><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/styles/an-old-hope.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;FZShuTi&quot;&gt;linux 安全&lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="Document" scheme="http://yoursite.com/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>Four</title>
    <link href="http://yoursite.com/2019/07/26/Linux%E5%90%8E%E6%9C%9F%E7%90%86%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/07/26/Linux后期理论/</id>
    <published>2019-07-26T13:27:03.000Z</published>
    <updated>2019-09-01T15:39:59.996Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="FZShuTi">linux 理论知识点</font></center><br><a id="more"></a></p><h1 id="修改开机自启"><a href="#修改开机自启" class="headerlink" title="修改开机自启"></a>修改开机自启</h1><p><code>ntsysv</code>图形界面 可查看开机自启的服务。*号表示服务开机自动启动。<br>例：查看当前运行模式<code>runlevel</code> 比如说是runlevel=5。 这里服务以atd为例<br>进入这个文件夹:cd /etc/rc5.d<br>查看当前文件夹下的服务可以看到开启自动启动的服务是以S开头的’S95atd’<br>当我们使用netsysv这个工具将atd前面的*号去掉时，再回来查看这里的atd服务就是以K开头的’K05atd’<br>而且这里的开机自启服务都是软链接，所以可以手工</p><pre><code>rm -fr K05atdln -s ../init.d/atd(原始路径) S95atd</code></pre><p><code>ntsysv</code> 这个工具只能修改当前运行级别的自启服务。如果想要修改其他的运行级别的</p><pre><code>cd /etc/rc3.d/ntsysv --level 3 去掉*号以后，回到文件夹下查看已经没有S05atd变成了K05atd</code></pre><h2 id="chkconfig"><a href="#chkconfig" class="headerlink" title="chkconfig"></a>chkconfig</h2><p><code>chkconfig --level 13 atd on</code> 将1和3模式下的atd服务变为开机自启<br><code>chkconfig --list atd</code> 查看atd服务<br><code>chkconfig atd on</code> 默认开启2345模式下的atd服务<br>编写服务脚本</p><pre><code>#!/bin/bash#chkconfig: 35 96 03 #35那里如果是 - 那就表示默认所有模式都是off#服务脚本的特殊格式，35表示启动的模式 runlevel,96表示启动，96表示S开头的开机自启动，03表示K开头的不自启动.后启动，先关。#descriptaion: test service. /etc/init.d/functionscase $1 instart)        touch /var/lock/subsys/testsrv        action &quot;staring testsrv&quot; true        ;;stop)        rm -f /var/lock/subsys/testsrv        action &quot;stoping testsrv&quot; true        ;;restart)        action &quot;staring testsrv&quot; true        action &quot;stoping testsrv&quot; true        ;;status)        if [ -f  /var/lock/subsys/testsrv ];then                echo testsrv is running...        else                echo testsrv is stopped        fi        ;;*)        echo Usage: /etc/init.d/testsrv {start|stop|restart|status}esac</code></pre><h2 id="xinetd管理的服务"><a href="#xinetd管理的服务" class="headerlink" title="xinetd管理的服务"></a>xinetd管理的服务</h2><p>安装:<code>yum install -y telnet-server</code><br>service 命令：手动管理服务<br>service 服务 start|stop|restart service –status-all<br>瞬态（Transient）服务被xinetd进程所管理<br>进入的请求首先被xinetd代理<br>配置文件：<code>/etc/xinetd.conf、/etc/xinetd.d/&lt;service&gt;</code><br>与libwrap.so文件链接<br>用chkconfig控制的服务：<br>示例：chkconfig tftp on<br>安装服务以后，chkconfig –list 查看</p><pre><code>xinetd based services:        chargen-dgram:  off # off 表示这个服务不能被xinetd唤醒        chargen-stream: off        daytime-dgram:  off        daytime-stream: off        discard-dgram:  off        discard-stream: off        echo-dgram:     off        echo-stream:    off        rsync:          off        tcpmux-server:  off        telnet:         off        time-dgram:     off        time-stream:    off[root@centos6 init.d]# vim /etc/xinetd.d/telnet 需要到配置文件下去修改# default: on# description: The telnet server serves telnet sessions; it uses \#       unencrypted username/password pairs for authentication.service telnet{        flags           = REUSE        socket_type     = stream        wait            = no        user            = root        server          = /usr/sbin/in.telnetd        log_on_failure  += USERID        disable         = no 这里的yes改为no}</code></pre><p>还可用命令更改<code>chkconfig telnet on/off</code></p><div class="alert alert-warning">注意：正常级别下，最后启动一个服务S99local没有链接至/etc/rc.d/init.d一个服务脚本，而是指向了/etc/rc.d/rc.local脚本<br>不便或不需写为服务脚本放置于/etc/rc.d/init.d/目录，且又想开机时自动运行的命令，可直接放置于/etc/rc.d/rc.local文件中<br>/etc/rc.d/rc.local在指定运行级别脚本后运行<br>可以根据情况，进行自定义修改</div><h2 id="centos6启动流程"><a href="#centos6启动流程" class="headerlink" title="centos6启动流程"></a>centos6启动流程</h2><p>post<br>mbr grub stagel stagel.5<br>grub stage2 /boot/grub/grub.conf<br>vmlinuz root= iniramfs.img<br>/sbin/init<br>/etc/inittab<br>/etc/rc.d/rc.sysinit<br>/etc/rcN.d/K S<br>/etc/rc.d/rc.local<br>login</p><h2 id="CentOS-6启动流程："><a href="#CentOS-6启动流程：" class="headerlink" title="CentOS 6启动流程："></a>CentOS 6启动流程：</h2><p>POST –&gt; Boot Sequence(BIOS) –&gt; Boot Loader –&gt; Kernel(ramdisk) –&gt; rootfs –&gt; switchroot –&gt; /sbin/init –&gt;(/etc/inittab, /etc/init/*.conf) –&gt; 设定默认运行级别 –&gt; 系统初始化脚本rc.sysinit –&gt; 关闭或启动对应级别的服务 –&gt; 启动终端<br>参看：<a href="http://s4.51cto.com/wyfs02/M02/87/20/wKiom1fVBELjXsvaAAUkuL83t2Q304.jpg" target="_blank" rel="noopener">http://s4.51cto.com/wyfs02/M02/87/20/wKiom1fVBELjXsvaAAUkuL83t2Q304.jpg</a></p><h1 id="grub修复1"><a href="#grub修复1" class="headerlink" title="grub修复1"></a>grub修复1</h1><p><code>hexdump -C /dev/sda -n 512</code><br><code>dd if=/dev/zero of=/dev/sda bs=1 count=446</code> 破坏前446个字节<br>reboot<br>进入光盘修复<br><code>grub-install</code>这个工具需要到/sbin/grub，ls /mnt/sysimage/sbin/grub所以要切根目录<br><code>chroot /mnt/sysimage/</code><br><code>grub-install /dev/sda</code><br><code>hexdupm -C /dev/sda -n 512</code> 查看已经修复成功<br><code>sync</code> 同步</p><h2 id="grub修复2"><a href="#grub修复2" class="headerlink" title="grub修复2"></a>grub修复2</h2><p><code>grub&gt; root (hd0,0)</code> #第一个0表示第一个硬盘，第二个零表示第一个分区就代表/dev/sda,这里的表示方法不同。<br><code>grub&gt; setup (hd0)</code> #表示我要把446个字节写在那个硬盘上。<br>现在修复完成，但是这个命令有依赖性，他依赖于/boot/grub下的若干文件。</p><p>ls /boot/grub下 默认只有grub.conf这一个文件是重要的，但是修复以后所产生的文件就都是必要的了。<br>grub.conf这个是gurb的配置文件</p><pre><code>vim /boot/grub/grub.confdefault=1 #指第一个titletimeout=5password centos #这里是给进入单用户加一个密码centos，若是加了，想要进单用户，没有密码，就无法进入。password --md5 加密口令 #还可以使用md5加密方式 grub-md5-cryptpassword --encrypted $6$GVDpx3mdjq27eWWy$lZubXA/VXZgyJhaQzH/rX.pfttIxObIIdBkxjHHm/nRA4H4Z/h3oD5Yo80wGwfpYMyjG6UL7R1W55oSXxzKdB. #这里用的是加密的密码还是centos.方法:r!grub-cryptsplashimage=(hd0,0)/grub/splash.xpm.gz #这里就是启动的背景图片，更换见下方详解。最后一步在这里更改图片namehiddenmenutitle CentOS 6 (2.6.32-754.el6.x86_64)        root (hd0,0)        kernel /vmlinuz-2.6.32-754.el6.x86_64 ro root=UUID=c9ab54fa-2650-4363-bc37-fca60e23e8d0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet        initrd /initramfs-2.6.32-754.el6.x86_64.imgtitle CentOS 8 (4.6.32-754.el6.x86_64)#假设     #添加的启动菜单        root (hd0,0)        kernel /vmlinuz-2.6.32-754.el6.x86_64 ro root=UUID=c9ab54fa-2650-4363-bc37-fca60e23e8d0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet        initrd /initramfs-2.6.32-754.el6.x86_64.img #grub 认为boot才是根目录，下面可以写成这种形式.就是对于vmlinux-这个文件来讲，这个文件在第一个硬盘第一个分区里面，对应boot这个目录        kernel (hd0,0)/vmlinuz-2.6.32-754.el6.x86_64 ro root=UUID=c9ab54fa-2650-4363-bc37-fca60e23e8d0 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet        initrd (hd0,0)/initramfs-2.6.32-754.el6.x86_64.img #此文件加载根分区，加载文件驱动，不能和内核文件对调[root@centos6 grub]# </code></pre><p><img src="https://s2.ax1x.com/2019/07/31/etI8w4.png" alt=""></p><h2 id="启动背景更换"><a href="#启动背景更换" class="headerlink" title="启动背景更换"></a>启动背景更换</h2><p>CentOS6.5安装rz和sz命令<br>一条命令就行 <code>yum install -y lrzsz</code><br>用rz将图片传入linx，还需更改格式<br>linux 图片png转xpm工具<br>which convert 查看命令的路径<br>rpm -qf /usr/bin/convert 查看命令来自哪一个包</p><pre><code>yum install -y ImageMagick 包名convert -resize 640x480 -colors 14 2019.png win.xpmgzip win.xpm 还要将图片压缩成gz，然后移动到/boot/grub然后去文件中更改图片名。</code></pre><h2 id="rm-fr-boot-grub-grub-conf"><a href="#rm-fr-boot-grub-grub-conf" class="headerlink" title="rm -fr /boot/grub/grub.conf"></a>rm -fr /boot/grub/grub.conf</h2><p>临时修复:<br><img src="https://s2.ax1x.com/2019/07/31/etO0df.png" alt=""><br>写入文件:</p><pre><code>[root@centos6 grub]# cat grub.conf default=0timeout=3title pan #:r!ls /boot/initramfs-2.6.32-754.el6.x86_64.img /boot/vmlinuz-2.6.32-754.el6.x86_64kernel /vmlinuz-2.6.32-754.el6.x86_64 root=/dev/sda2initrd /initramfs-2.6.32-754.el6.x86_64.img </code></pre><h2 id="rm-fr-boot"><a href="#rm-fr-boot" class="headerlink" title="rm -fr /boot/*"></a>rm -fr /boot/*</h2><p><img src="https://s2.ax1x.com/2019/07/31/eNggot.png" alt=""></p><pre><code>sync 写入文件ls /mnt/sysimage/boot  查看没有grubchroot /mnt/sysimagegrub-install /dev/sda 修复grubvim /boot/grub/grub.conf 修复grub目录后，grub.conf需要自己建立defaule=0timeout=3title=linuxvmlinuz-2.6.32-754.el6.x86_64kernel /vmlinuz-2.6.32-754.el6.x86_64 ro root=/dev/sda2initrd /initramfs-2.6.32-754.el6.x86_64.img     vim /etc/selinux/config    SELINUX=disable</code></pre><h2 id="mv-etc-fstab和rm-fr-boot"><a href="#mv-etc-fstab和rm-fr-boot" class="headerlink" title="mv /etc/fstab和rm -fr /boot"></a>mv /etc/fstab和rm -fr /boot</h2><p>进入救援模式<br>fdisk -l 查看当前的硬盘<br>找到根目录，然后挂载 mount /dev/sda2 /mnt/rootfs<br>vi /mnt/rootfs/etc/fstab 恢复这个文件<br><img src="https://s2.ax1x.com/2019/08/04/eysWGj.png" alt=""><br><img src="https://s2.ax1x.com/2019/08/04/eyshzn.png" alt=""><br>重启后再次进去救援模式，可以找到了，后面还需修复grub等。</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>rmmod e1000<br>modprobe e1000</p><h2 id="自制linux系统"><a href="#自制linux系统" class="headerlink" title="自制linux系统"></a>自制linux系统</h2><pre><code>[root@centos6 ~]# fdisk -l /dev/sdb        1.增加一块20G的硬盘分区Disk /dev/sdb: 21.5 GB, 21474836480 bytes255 heads, 63 sectors/track, 2610 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0xe03fcc2f   Device Boot      Start         End      Blocks   Id  System/dev/sdb1               1         132     1060258+  83  Linux/dev/sdb2             133        1438    10490445   83  Linux/dev/sdb3            1439        1700     2104515   82  Linux swap / Solaris[root@centos6 ~]# mkfs.ext4 /dev/sdb1        2.创建文件系统 [root@centos6 ~]# mkfs.ext4 /dev/sdb2[root@centos6 ~]# mkswap /dev/sdb3[root@centos6 ~]# blkid/dev/sda1: UUID=&quot;018d560c-cf34-426f-9255-3644809c9cd1&quot; TYPE=&quot;ext4&quot; /dev/sda2: UUID=&quot;c9ab54fa-2650-4363-bc37-fca60e23e8d0&quot; TYPE=&quot;ext4&quot; /dev/sda3: UUID=&quot;c818ec58-ff08-4350-a41b-3016ec7caf4e&quot; TYPE=&quot;ext4&quot; /dev/sda5: UUID=&quot;6e3af40a-8892-474c-a76f-597954888c62&quot; TYPE=&quot;swap&quot; /dev/sdb2: UUID=&quot;e6089c91-2ce4-429e-bcbd-cbd407bdeb33&quot; TYPE=&quot;ext4&quot;  关注/dev/sdb/dev/sdb3: UUID=&quot;fcb6440e-d22f-4b96-947a-0b984705c5a6&quot; TYPE=&quot;swap&quot; /dev/sdb1: UUID=&quot;27501ae9-4d2b-4a36-ade5-659bc74e27b9&quot; TYPE=&quot;ext4&quot; [root@centos6 ~]# mkdir /mnt/boot        3.创建挂载点并挂载[root@centos6 ~]# mount /dev/sdb1 /mnt/boot[root@centos6 ~]# ls /mnt/bootlost+found4.安装grub,表示我要把grub的内容放到哪个/boot的grub,这里只需指定/mnt,他会自动寻找/mnt下的/boot[root@centos6 ~]# grub-install --root-directory=/mnt /dev/sdb                5.复制/boot下的文件[root@centos6 ~]# cp /boot/initramfs-2.6.32-754.el6.x86_64.img /mnt/boot/initramfs.img[root@centos6 ~]# cp /boot/vmlinuz-2.6.32-754.el6.x86_64 /mnt/boot/vmliinux[root@centos6 ~]# ls /mnt/boot    拷贝两个文件，这两个文件也是必须有的grub  initramfs.img  lost+found  vmliinux[root@centos6 ~]# vim /mnt/boot/grub/grub.conf    6.编辑文件grub.confdefault=0timeout=3title linuxkernel /vmlinuz root=/dev/sda2 selinux=0 init=/bin/bash #启动的时候，这里默认就会寻找init=/sbin/init 这个程序，这个程序又会寻找各种配置文件，所以这里改成bashinitrd /initramfs.img[root@centos6 ~]# mount /dev/sdb2 /media/        # 7./dev/sdb2 把根分区，临时挂到一个目录上 [root@centos6 ~]# mkdir /media/{etc,dev,proc,sys,usr,var,tmp,mnt,lib,lib64,sbin,bin} -p        #创建根目录下应该有的文件[root@centos6 ~]# vim copycmd.sh     #8. 编辑复制代码程序，此文件的作用是拷贝命令和命令依赖的库到/mnt/sdb2/media/#!/bin/bash ch_root=&quot;/media/&quot; #根目录[ ! -d $ch_root ] &amp;&amp; mkdir $ch_rootbincopy() {    if which $1 &amp;&gt;/dev/null; then        local cmd_path=`which --skip-alias $1`        local bin_dir=`dirname $cmd_path`        [ -d ${ch_root}${bin_dir} ] || mkdir -p ${ch_root}${bin_dir}        [ -f ${ch_root}${cmd_path} ] || cp $cmd_path ${ch_root}${bin_dir}        return 0    else        echo &quot;Command not found.&quot;        return 1    fi}libcopy() {    local lib_list=$(ldd `which --skip-alias $1` | grep -Eo &#39;/[^[:space:]]+&#39;)    for loop in $lib_list;do        local lib_dir=`dirname $loop`        [ -d ${ch_root}${lib_dir} ] || mkdir -p  ${ch_root}${lib_dir}        [ -f ${ch_root}${loop} ] || cp $loop ${ch_root}${lib_dir}    done}read -p &quot;Please input a command: &quot; commandwhile [ &quot;$command&quot; != &quot;quit&quot; ];do    if bincopy $command ;then        libcopy $command    fi    read -p &quot;Please input a command or quit: &quot; commanddone[root@centos6 ~]# bash copycmd.sh Please input a command: bashplease input a command or quit: modprobeplease input a command or quit: insmodplease input a command or quit: ifconfigplease input a command or quit: lsplease input a command or quit: mountplease input a command or quit: cpplease input a command or quit: pingplease input a command or quit: cat please input a command or quit: vimplease input a command or quit: dfplease input a command or quit: blkidplease input a command or quit: cpplease input a command or quit: mvplease input a command or quit: rmplease input a command or quit: quit            ......[root@centos6 ~]# tree /media/ locate e1000 查看网卡驱动[root@centos6 ~]# cp /lib/modules/2.6.32-754.el6.x86_64/kernel/drivers/net/e1000/e1000.ko /media/lib/ 拷贝[root@centos6 ~]# chroot /media/</code></pre><h1 id="proc-目录"><a href="#proc-目录" class="headerlink" title="proc 目录"></a>proc 目录</h1><p><code>cat /proc/sys/net/ipv4/ip_forward</code> 这个文件里面的配置参数都可以放在sysctl.con 里面<br>sysctl命令：<br>默认配置文件：/etc/sysctl.conf<br>(1)设置某参数 sysctl -w parameter=VALUE<br>(2)通过读取配置文件设置参数 sysctl -p [/path/to/conf_file]<br>(3)查看所有生效参数 sysctl -a</p><pre><code>[root@centos6 ~]# cat /proc/sys/vm/drop_caches 0         #0代表保留缓存数据[root@centos6 ~]# echo 1 &gt;/proc/sys/vm/drop_caches          #会立即清理缓存[root@centos6 ~]# free -h         #可以清晰的看到cached对比之前没有清理过的下降了很多</code></pre><pre><code>[root@centos6 ~]# echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all          [root@centos6 ~]# cat  /proc/sys/net/ipv4/icmp_echo_ignore_all 1        #这里改成1会禁ping     想要保存需要写到文件/etc/sysctl.conf[root@centos6 ~]# vim /etc/sysctl.conf   1 # Kernel sysctl configuration file for Red Hat Linux  2 #  3 # For binary values, 0 is disabled, 1 is enabled.  See sysctl(8) and  4 # sysctl.conf(5) for more details.  5 #  6 # Use &#39;/sbin/sysctl -a&#39; to list all possible parameters.  7   8 # Controls IP packet forwarding  9 net.ipv4.ip_forward = 0                 10 net.ipv4.icmp_echo_ignore_all = 1         #这里是我添加的一行，这里的格式要用点区分开.他和文件目录是对应的关系，sysctl管理的就是/proc/sys/目录下的文件，所以前面就不用写了。保存退出以后还没有生效使用sysctl -p 这里注意: -p的作用是读取这个文件到内存中，如果读取到内存中发现是冲突的，那就拿文件覆盖到内存中，如果没有就保留原状态。 所以这里如果禁止了ping，之后只是删除了文件加上sysctl -p这样是无法产生效果的，之前ping不通现在还是ping不通。这里重启可以。sysctl -a 查看所有生效的参数</code></pre><h1 id="sys目录："><a href="#sys目录：" class="headerlink" title="/sys目录："></a>/sys目录：</h1><p>sysfs：为用户使用的伪文件系统，输出内核识别出的各硬件设备的相关属性信息，也有内核对硬件特性的设定信息；有些参数是可以修改的，用于调整硬件工作特性<br>udev通过此路径下输出的信息动态为各设备创建所需要设备文件，udev是运行用户空间程序<br>专用工具：udevadmin, hotplug<br>udev为设备创建设备文件时，会读取其事先定义好的规则文件，一般在/etc/udev/rules.d及/usr/lib/udev/rules.d目录下</p><h1 id="内核编译"><a href="#内核编译" class="headerlink" title="内核编译"></a>内核编译</h1><p>单内核体系设计、但充分借鉴了微内核设计体系的优点，为内核引入模块化机制<br>内核组成部分：<br>kernel：内核核心，一般为bzImage，通常在/boot目录下<br>名称为 vmlinuz-VERSION-RELEASE kernel object：内核对象，一般放置于<br>/lib/modules/VERSION-RELEASE/<br>[ ]: N            #不启用<br>[M]: M            #放到/lib/modules 以模块方式存放<br>[*]: Y            #放到核心里面 启用<br>辅助文件：ramdisk<br>initrd<br>initramfs </p><h1 id="lsmod命令："><a href="#lsmod命令：" class="headerlink" title="lsmod命令："></a>lsmod命令：</h1><p>显示由核心已经装载的内核模块<br>显示的内容来自于: /proc/modules文件<br>modinfo命令：<br>显示模块的详细描述信息<br>modinfo [ -k kernel ] [ modulename|filename… ]<br>-n：只显示模块文件路径<br>-p：显示模块参数<br>-a：作者<br>-d：描述<br>示例：lsmod |grep xfs  <code>modinfo -n xfs</code></p><h1 id="内核模块管理"><a href="#内核模块管理" class="headerlink" title="内核模块管理"></a>内核模块管理</h1><p>modprobe命令：<br>装载或卸载内核模块<br>modprobe [ -C config-file ] [ modulename ] [ module parame-ters… ]<br>modprobe [ -r ] modulename… 卸载模块<br>配置文件：/etc/modprobe.conf 存放硬件加载的各种模块, /etc/modprobe.d/*.conf</p><h1 id="内核模块管理-1"><a href="#内核模块管理-1" class="headerlink" title="内核模块管理"></a>内核模块管理</h1><p>depmod命令：<br>内核模块依赖关系文件及系统信息映射文件的生成工具<br>装载或卸载内核模块：<br>insmod命令：指定模块文件，不自动解决依赖模块 insmod [ filename ] [ module options… ]<br>insmod <code>modinfo –n exportfs</code><br>lnsmod <code>modinfo –n xfs</code><br>rmmod命令：卸载模块<br>rmmod [ modulename ]<br>rmmod xfs<br>rmmod exportfs</p><h1 id="内核编译-1"><a href="#内核编译-1" class="headerlink" title="内核编译"></a>内核编译</h1><pre><code>rztar -xvf linux-4.18.13.tar.xzcp /boot/config-3.10.0-862.el7.x86_64 linux-5.2.7/.config[root@centos7 \~]# cd linux-5.2.7/[root@centos7 \~]# make menuconfig:配置内核选项这里还需要装一些软件包，不然无法使用。 yum groupinstall &quot;development tools&quot;[root@centos7 \~]# yum install -y ncurses-devel 根据提示装所缺少的包[root@centos7 \~]# make menuconfig:软件包装完后再配置内核选项[root@centos7 linux-4.18.13]# make -j 4 &amp;&amp; { echo -e &#39;\a&#39; ;sleep 0.5;echo -e &#39;\a&#39;;}yum install -y openssl-devel 继续安装缺少的包[root@centos7 linux-4.18.13]# make -j 4 &amp;&amp; { echo -e &#39;\a&#39; ;sleep 0.5;echo -e &#39;\a&#39;;}    jobs=4，同时最多跑4个作业    make自己会协调，如果CPU等资源不够可能小于4个。不过一般瓶颈都在硬盘，所以一般能看到4个进程一起跑。</code></pre><h1 id="centos7"><a href="#centos7" class="headerlink" title="centos7"></a>centos7</h1><p>systemd<br>POST –&gt; Boot Sequence –&gt; Bootloader –&gt; kernel + initramfs(initrd) – &gt; rootfs –&gt; /sbin/init<br>init:<br>CentOS 5    SysV init<br>CentOS 6    Upstart<br>CentOS 7    Systemd<br>Systemd：系统启动和服务器守护进程管理器，负责在系统启动或运行时，激活系统资源，服务器进程和其它进程<br>Systemd新特性<br>系统引导时实现服务并行启动<br>按需启动守护进程<br>自动化的服务依赖关系管理<br>同时采用socket式与D-Bus总线式激活服务系统状态快照</p><h2 id="管理服务"><a href="#管理服务" class="headerlink" title="管理服务"></a>管理服务</h2><p>管理系统服务：<br>CentOS 7: service unit<br>注意：能兼容早期的服务脚本<br>命令：systemctl COMMAND name.service<br>启动：service name start ==&gt; systemctl start name.service<br>停止：service name stop ==&gt; systemctl stop name.service<br>重启：service name restart ==&gt; systemctl restart name.service<br>状态：service name status ==&gt; systemctl status name.service</p><h2 id="管理服务-1"><a href="#管理服务-1" class="headerlink" title="管理服务"></a>管理服务</h2><p>条件式重启：已启动才重启，否则不做操作<br>service name condrestart ==&gt; systemctl try-restart name.service<br>重载或重启服务：先加载，再启动<br>systemctl reload-or-restart name.service<br>重载或条件式重启服务：<br>systemctl reload-or-try-restart name.service<br>禁止自动和手动启动：<br>systemctl mask name.service 他的作用就是创建了一个软链接，也可以手动创建，用法相同。<br><code>ln -s /dev/null /etc/systemd/system/httpd.service</code><br>取消禁止：<br>systemctl unmask name.service</p><pre><code>systemctl is-enabled httpd 查看httpd是否开机启动systemctl is-active 查看httpd现在的状态</code></pre><h2 id="服务查看"><a href="#服务查看" class="headerlink" title="服务查看"></a>服务查看</h2><p>查看某服务当前激活与否的状态： <code>systemctl is-active name.service</code><br>查看所有已经激活的服务：<br><code>systemctl list-units --type|-t service</code><br>查看所有服务：<br><code>systemctl list-units --type service --all|-a</code><br>chkconfig命令的对应关系：<br>设定某服务开机自启：<br><code>chkconfig name on ==&gt; systemctl enable name.service</code><br>设定某服务开机禁止启动：<br><code>chkconfig name off ==&gt; systemctl disable name.service</code></p><h2 id="服务查看-1"><a href="#服务查看-1" class="headerlink" title="服务查看"></a>服务查看</h2><p>查看所有服务的开机自启状态： <code>chkconfig --list ==&gt; systemctl list-unit-files --type service</code><br>用来列出该服务在哪些运行级别下启用和禁用 <code>chkconfig sshd –list ==&gt; ls /etc/systemd/system/\*.wants/sshd.service</code><br>查看服务是否开机自启：<code>systemctl is-enabled name.service</code><br>其它命令：<br>查看服务的依赖关系：<code>systemctl list-dependencies name.service</code><br>杀掉进程：<code>systemctl kill unitname</code></p><h2 id="服务状态"><a href="#服务状态" class="headerlink" title="服务状态"></a>服务状态</h2><p>loaded    Unit配置文件已处理<br>active(running)  一次或多次持续处理的运行<br>active(exited)   成功完成一次性的配置<br>active(waiting)  运行中，等待一个事件<br>inactive   不运行<br>enabled  开机启动<br>disabled  开机不启动<br>static开机不启动，但可被另一个启用的服务激活</p><h2 id="systemctl-命令示例"><a href="#systemctl-命令示例" class="headerlink" title="systemctl 命令示例"></a>systemctl 命令示例</h2><pre><code>显示所有单元状态systemctl 或 systemctl list-units只显示服务单元的状态 systemctl --type=service显示sshd服务单元systemctl –l status sshd.service验证sshd服务当前是否活动 systemctl is-active sshd启动，停止和重启sshd服务 systemctl start sshd.service systemctl stop sshd.service systemctl restart sshd.service</code></pre><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><pre><code>重新加载配置systemctl reload sshd.service列出活动状态的所有服务单元systemctl list-units --type=service列出所有服务单元systemctl list-units --type=service --all查看服务单元的启用和禁用状态systemctl list-unit-files --type=service列出失败的服务systemctl --failed --type=service</code></pre><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><pre><code>列出依赖的单元systemctl list-dependencies sshd验证sshd服务是否开机启动 systemctl is-enabled sshd禁用network，使之不能自动启动,但手动可以 systemctl disable network启用networksystemctl enable network禁用network，使之不能手动或自动启动 systemctl mask network启用networksystemctl unmask network</code></pre><h2 id="service-unit文件格式"><a href="#service-unit文件格式" class="headerlink" title="service unit文件格式"></a>service unit文件格式</h2><p>/etc/systemd/system：系统管理员和用户使用/usr/lib/systemd/system：发行版打包者使用<br>以 “#” 开头的行后面的内容会被认为是注释<br>相关布尔值，1、yes、on、true 都是开启，0、no、off、false 都是关闭<br>时间单位默认是秒，所以要用毫秒（ms）分钟（m）等须显式说明<br>service unit file文件通常由三部分组成：<br>[Unit]：定义与Unit类型无关的通用选项；用于提供unit的描述信息、unit行为及依赖关系等<br>[Service]：与特定类型相关的专用选项；此处为Service类型<br>[Install]：定义由“systemctl enable”以及”systemctl disable“命令在实现服务启用或禁用时用到的一些选项</p><h2 id="service-unit文件格式-1"><a href="#service-unit文件格式-1" class="headerlink" title="service unit文件格式"></a>service unit文件格式</h2><p>Unit段的常用选项：<br>Description：描述信息<br>After：定义unit的启动次序，表示当前unit应该晚于哪些unit启动，其功能与<br>Before相反<br>Requires：依赖到的其它units，强依赖，被依赖的units无法激活时，当前unit也无法激活<br>Wants：依赖到的其它units，弱依赖<br>Conflicts：定义units间的冲突关系</p><h3 id="service-unit文件格式-2"><a href="#service-unit文件格式-2" class="headerlink" title="service unit文件格式"></a>service unit文件格式</h3><p>Service段的常用选项：<br>Type：定义影响ExecStart及相关参数的功能的unit进程启动类型<br>simple：默认值，这个daemon主要由ExecStart接的指令串来启动，启动后常驻于内存中<br>forking：由ExecStart启动的程序透过spawns延伸出其他子程序来作为此daemon的主要服务。原生父程序在启动结束后就会终止<br>oneshot：与simple类似，不过这个程序在工作完毕后就结束了，不会常驻在内存中<br>dbus：与simple类似，但这个daemon必须要在取得一个D-Bus的名称后，才会继续运作.因此通常也要同时设定BusNname= 才行<br>notify：在启动完成后会发送一个通知消息。还需要配合 NotifyAccess 来让<br>Systemd 接收消息<br>idle：与simple类似，要执行这个daemon必须要所有的工作都顺利执行完毕后才会执行。这类的daemon通常是开机到最后才执行即可的服务</p><h3 id="EnvironmentFile：环境配置文件"><a href="#EnvironmentFile：环境配置文件" class="headerlink" title="EnvironmentFile：环境配置文件"></a>EnvironmentFile：环境配置文件</h3><p>ExecStart：指明启动unit要运行命令或脚本的绝对路径<br>ExecStartPre： ExecStart前运行<br>ExecStartPost： ExecStart后运行<br>ExecStop：指明停止unit要运行的命令或脚本<br>Restart：当设定Restart=1 时，则当次daemon服务意外终止后，会再次自动启动此服务</p><h2 id="service-unit文件格式-3"><a href="#service-unit文件格式-3" class="headerlink" title="service unit文件格式"></a>service unit文件格式</h2><p>Install段的常用选项：<br>Alias：别名，可使用systemctl command Alias.service<br>RequiredBy：被哪些units所依赖，强依赖<br>WantedBy：被哪些units所依赖，弱依赖<br>Also：安装本服务的时候还要安装别的相关服务<br>注意：对于新创建的unit文件，或者修改了的unit文件，要通知systemd重载此配置文件,而后可以选择重启<br>systemctl daemon-reload</p><h3 id="服务Unit文件示例："><a href="#服务Unit文件示例：" class="headerlink" title="服务Unit文件示例："></a>服务Unit文件示例：</h3><pre><code>[root@centos7 system]# cat  /lib/systemd/system/bak.service[Unit]Description=backup /etc Requires=atd.service[Service]Type=simpleExecStart=/bin/bash -c &quot;echo /data/bak.sh|at now&quot; [Install]WantedBy=multi-user.target[root@centos7 system]# cat /data/bak.sh tar cvf /data/etc-`date + %F`.tar /etc/ &amp;&gt; /dev/null[root@centos7 system]# chmod +x !$[root@centos7 system]# systemctl daemon-reload[root@centos7 system]# systemctl list-units -t service -a|grep bak[root@centos7 system]# systemctl list-unit-files[root@centos7 system]#systemctl start bak</code></pre><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><p>target units：<br>unit配置文件：.target<br>ls /usr/lib/systemd/system/*.target systemctl list-unit-files –type target –all<br>运行级别：<br>0    ==&gt; runlevel0.target, poweroff.target<br>1    ==&gt; runlevel1.target, rescue.target<br>2    ==&gt; runlevel2.target, multi-user.target<br>3    ==&gt; runlevel3.target, multi-user.target<br>4    ==&gt; runlevel4.target, multi-user.target<br>5    ==&gt; runlevel5.target, graphical.target<br>6    ==&gt; runlevel6.target, reboot.target<br>查看依赖性：<br>systemctl list-dependencies graphical.target</p><h3 id="运行级别-1"><a href="#运行级别-1" class="headerlink" title="运行级别"></a>运行级别</h3><p>级别切换：init N ==&gt; systemctl isolate name.target<br>systemctl isolate multi-user.target<br>注：只有/lib/systemd/system/*.target文件中AllowIsolate=yes 才能切换(修改文件需执行systemctl daemon-reload才能生效)<br>查看target： runlevel ;who -r<br>systemctl list-units –type target<br>获取默认运行级别：<br>/etc/inittab ==&gt; systemctl get-default<br>修改默认级别：<br>/etc/inittab ==&gt; systemctl set-default name.target systemctl set-default multi-user.target<br>ls –l /etc/systemd/system/default.target</p><p><code>ln -s /usr/lib/systemd/system/graphical.target  /etc/systemd/system/default.target</code> 就是修改了一个软链接</p><h3 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h3><p>切换至紧急救援模式： systemctl rescue<br>切换至emergency模式： systemctl emergency<br>其它常用命令：<br>传统命令init，poweroff，halt，reboot都成为<br>systemctl的软链接<br>关机：systemctl halt、systemctl poweroff<br>重启：systemctl reboot<br>挂起：systemctl suspend<br>休眠：systemctl hibernate<br>休眠并挂起：systemctl hybrid-sleep</p><h2 id="CentOS7引导顺序"><a href="#CentOS7引导顺序" class="headerlink" title="CentOS7引导顺序"></a>CentOS7引导顺序</h2><p>UEFi或BIOS初始化，运行POST开机自检<br>选择启动设备<br>引导装载程序, centos7是grub2<br>加载装载程序的配置文件：<br>/etc/grub.d/<br>/etc/default/grub<br>/boot/grub2/grub.cfg<br>加载initramfs驱动模块<br>加载内核选项<br>内核初始化，centos7使用systemd代替init<br>执行initrd.target所有单元，包括挂载/etc/fstab<br>从initramfs根文件系统切换到磁盘根目录<br>systemd执行默认target配置，配置文件<br>/etc/systemd/system/default.target</p><h2 id="CentOS7引导顺序-1"><a href="#CentOS7引导顺序-1" class="headerlink" title="CentOS7引导顺序"></a>CentOS7引导顺序</h2><p>systemd执行sysinit.target初始化系统及basic.target准备操作系统<br>systemd启动multi-user.target下的本机与服务器服务<br>systemd执行multi-user.target下的/etc/rc.d/rc.local<br>Systemd执行multi-user.target下的getty.target及登录服务<br>systemd执行graphical需要的服务</p><p>无限重启 <code>systemctl set-default reboot.target</code><br>在Linux16后面添加 <code>systemd.unit=multi-user.target</code><br>查看 <code>systemctl get-default</code><br>修改 <code>systemctl ser-default graphical.targer</code></p><h2 id="破解CentOS7的root口令方法一"><a href="#破解CentOS7的root口令方法一" class="headerlink" title="破解CentOS7的root口令方法一"></a>破解CentOS7的root口令方法一</h2><p>启动时任意键暂停启动<br>按e键进入编辑模式<br>将光标移动linux16开始的行，添加内核参数rd.break<br>按ctrl-x启动<br>mount –o remount,rw /sysroot<br>chroot /sysroot<br>passwd root<br>touch /.autorelabel 针对SELINUX<br>exit<br>reboot</p><h2 id="破解CentOS7的root口令方法二"><a href="#破解CentOS7的root口令方法二" class="headerlink" title="破解CentOS7的root口令方法二"></a>破解CentOS7的root口令方法二</h2><p>启动时任意键暂停启动<br>按e键进入编辑模式<br>将光标移动linux16开始的行，改为rw init=/sysroot/bin/sh<br>按ctrl-x启动<br>chroot /sysroot<br>passwd root<br>touch /.autorelabel<br>exit<br>reboot</p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>修复/boot: chroot /mnt/sysimage<br>mount /dev/sr0 /mnt<br>rpm -ivh /mnt/Packages/Kernel-3.10.0-862.e17.x86_64.rpm –force<br>修复/grub:grub2-mkconfig -o /boot/grub2/grub.cfg</p><h1 id="SElinux"><a href="#SElinux" class="headerlink" title="SElinux"></a>SElinux</h1><p>DAC：Discretionary Access Control自由访问控制<br>MAC：Mandatory Access Control 强制访问控制<br>DAC环境下进程是无束缚的<br>MAC环境下策略的规则决定控制的严格程度<br>MAC环境下进程可以被限制的<br>策略被用来定义被限制的进程能够使用那些资源（文件和端口）<br>默认情况下，没有被明确允许的行为将被拒绝</p><h2 id="SELinux策略"><a href="#SELinux策略" class="headerlink" title="SELinux策略"></a>SELinux策略</h2><p>对象(object)：所有可以读取的对象，包括文件、目录和进程，端口等<br>主体：进程称为主体(subject)<br>SELinux中对所有的文件都赋予一个type的文件类型标签，对于所有的进程也赋予各自的一个domain的标签。domain标签能够执行的操作由安全策略里定义<br>当一个subject试图访问一个object，Kernel中的策略执行服务器将检查AVC (访<br>问矢量缓存Access Vector Cache), 在AVC中，subject和object的权限被缓存<br>(cached)，查找“应用+文件”的安全环境。然后根据查询结果允许或拒绝访问<br>安全策略：定义主体读取对象的规则数据库，规则中记录了哪个类型的主体使用哪个方法读取哪一个对象是允许还是拒绝的，并且定义了哪种行为是充许或拒绝</p><h2 id="SELinux工作类型"><a href="#SELinux工作类型" class="headerlink" title="SELinux工作类型"></a>SELinux工作类型</h2><p>SELinux有四种工作类型：<br>Strict：CentOS 5,每个进程都受到selinux的控制<br>targeted：用来保护常见的网络服务,仅有限进程受到selinux控制，只监控容易被入侵的进程，CentOS 4只保护13个服务，CentOS 5保护88个服务<br>minimum：CentOS 7,修改的 targeted，只对选择的网络服务<br>mls：提供MLS（多级安全）机制的安全性<br>targeted为默认类型，minimum和mls稳定性不足，未加以应用，strict已不再使用</p><h2 id="SELinux安全上下文"><a href="#SELinux安全上下文" class="headerlink" title="SELinux安全上下文"></a>SELinux安全上下文</h2><p>传统Linux，一切皆文件，由用户，组，权限控制访问<br>在SELinux中，一切皆对象（object），由存放在inode的扩展属性域的安全元素所控制其访问<br>所有文件和端口资源和进程都具备安全标签：安全上下文（security context）<br>安全上下文有五个元素组成：<br>user:role:type:sensitivity:category<br>user_u:object_r:tmp_t:s0:c0<br>实际上下文：存放在文件系统中，ls –Z;ps –Z<br>期望(默认)上下文：存放在二进制的SELinux策略库（映射目录和期望安全上下文）中<br>semanage fcontext –l</p><h2 id="五个安全元素"><a href="#五个安全元素" class="headerlink" title="五个安全元素"></a>五个安全元素</h2><p>User：指示登录系统的用户类型,进程：如system_u为系统服务进程，是受到管制的，unconfined_u为不管制的进程，用户自己开启的，如 bash，文件：system_u系统进程创建的文件， unconfined_u为用户自已创建的文件</p><p>Role：定义文件，进程和用户的用途：进程：system_r为系统服务进程，受到管制。unconfined_r 为不管制进程，通常都是用户自己开启的，如 bash，文件:object_r</p><p>Type：指定数据类型，规则中定义何种进程类型访问何种文件Target策略基于type实现,多服务共用：public_content_t</p><p>Sensitivity：限制访问的需要，由组织定义的分层安全级别，如 unclassified,secret,top,secret, 一个对象有且只有一个sensitivity,分0-15级，s0最低,Target策略默认使用s0</p><p>Category：对于特定组织划分不分层的分类，如FBI Secret，NSA secret, 一个对象可以有多个categroy， c0-c1023共1024个分类， Target 策略不使用 category</p><pre><code>[root@centos7 ~]# setenforce 0[root@centos7 ~]# getenforce selinuxPermissive[root@centos7 ~]# setenforce 1[root@centos7 ~]# getenforce selinuxEnforcing</code></pre><p>禁用可以在/boot/grub2/grub.cfg linux16末尾加上: selinux=0<br>查看selinux的状态还可以用<code>sestatus</code></p><h2 id="配置SELinux"><a href="#配置SELinux" class="headerlink" title="配置SELinux"></a>配置SELinux</h2><p>相关命令：<br>getenforce: 获取selinux当前状态<br>sestatus :查看selinux状态<br>setenforce 0|1<br>0:    设置为permissive<br>1:    设置为enforcing<br>配置文件:<br>/boot/grub/grub.conf 在kernel行使用selinux=0禁用SELinux<br>/boot/grub2/grub.cfg 在linux16行使用selinux=0禁用SELinux<br>/etc/selinux/config<br>/etc/sysconfig/selinux<br>SELINUX={disabled|enforcing|permissive}</p><pre><code>[root@centos7 ~]# ll -Z /var/log/messages     源文件-rw-------. root root system_u:object_r:var_log_t:s0   /var/log/messages[root@centos7 ~]# cp /var/log/messages /root    复制以后的文件[root@centos7 ~]# ll -Z /root/messages             查看属性，可以看到已经有了变化-rw-------. root root unconfined_u:object_r:admin_home_t:s0 /root/messages[root@centos7 ~]# mv /root/messages /var/log/messages                即便移动回去属性也已经被破坏了，而且日志也无法记录了mv: overwrite ‘/var/log/messages’? y[root@centos7 ~]# ll -Z /var/log/messages    -rw-------. root root unconfined_u:object_r:admin_home_t:s0 /var/log/messages[root@centos7 ~]# semanage fcontext -l | grep &quot;/var/log/messages&quot;    查找数据库里面的文件原有类型/var/log/messages[^/]*                             all files          system_u:object_r:var_log_t:s0 [root@centos7 ~]# chcon -t var_log_t /var/log/messages[root@centos7 ~]# ll /var/log/messages -Z -rw-------. root root unconfined_u:object_r:var_log_t:s0 /var/log/messages</code></pre><p><code>systemctl restart rsyslog</code> 重启日志服务</p><pre><code>[root@centos7 ~]# chcon -t default_t /var/log/messages[root@centos7 ~]# ll -Z /var/log/messages-rw-------. root root unconfined_u:object_r:default_t:s0 /var/log/messages[root@centos7 ~]# restorecon /var/log/messages        这样也可以还原[root@centos7 ~]# ll !$ -Zll /var/log/messages -Z-rw-------. root root unconfined_u:object_r:var_log_t:s0 /var/log/messages</code></pre><p>现在重启日志服务后可以记录了</p><pre><code>[root@centos7 ~]# ll -d /var/www/html/index.html -Z-rw-r--r--. root root unconfined_u:object_r:httpd_sys_content_t:s0 /var/www/html/index.html[root@centos7 ~]# chcon -t var_log_t /var/www/html/index.html -rw-r--r--. root root unconfined_u:object_r:var_log_t:s0 /var/www/html/index.html[root@centos7 ~]# semanage fcontext -a -t httpd_sys_content_t &quot;/data/www(/.*)?&quot; 将没有的加入数据库[root@centos7 ~]# semanage fcontext -l | grep &quot;/data/www&quot; 现在查看有了/data/www(/.*)?                                    all files          system_u:object_r:httpd_sys_content_t:s0[root@centos7 ~]# restorecon -R /data/www[root@centos7 ~]# ll -dZ /data/www/index.html -rw-r--r--. root root unconfined_u:object_r:httpd_sys_content_t:s0 /data/www/index.html[root@centos7 ~]# semanage fcontext -d -t httpd_sys_content_t &quot;/data/www(/.*)?&quot; </code></pre><p>服务更改端口后报错，是因为服务的端口没有加入<br>查询服务所能用的端口<br><code>semanage port -l | grep http</code><br><code>semanage port -a -t httpd_port_t -p tcp 9527</code> 添加一个tcp端口9527，现在使用semanage就可以查看到了</p><h2 id="默认安全上下文查询与修改"><a href="#默认安全上下文查询与修改" class="headerlink" title="默认安全上下文查询与修改"></a>默认安全上下文查询与修改</h2><p>semanage：来自policycoreutils-python包<br>查看默认的安全上下文<br>semanage fcontext –l<br>添加安全上下文<br><code>semanage fcontext -a –t httpd_sys_content_t ‘/testdir(/.*)?’ restorecon –Rv /testdir</code><br>删除安全上下文<br><code>semanage fcontext  -d –t httpd_sys_content_t    ‘/testdir(/.*)?’</code></p><h2 id="SElinux端口标签"><a href="#SElinux端口标签" class="headerlink" title="SElinux端口标签"></a>SElinux端口标签</h2><p>查看端口标签 semanage port –l<br>添加端口<br>semanage port -a -t port_label -p tcp|udp PORT<br>semanage port -a -t http_port_t -p tcp 9527<br>删除端口<br>semanage port -d -t port_label -p tcp|udp PORT<br>semanage port -d -t http_port_t -p tcp 9527<br>修改现有端口为新标签<br>semanage port -m -t port_label -p tcp|udp PORT<br>semanage port -m -t http_port_t -p tcp 9527</p><h2 id="SELinux布尔值"><a href="#SELinux布尔值" class="headerlink" title="SELinux布尔值"></a>SELinux布尔值</h2><p><code>getsebool -a</code> 查看所有布尔值<br>布尔型规则： getsebool setsebool<br>查看bool命令：<br>getsebool [-a] [boolean]<br>semanage boolean –l<br>semanage boolean -l –C 查看修改过的布尔值<br>设置bool值命令：<br>setsebool [-P] boolean value（on,off）<br>setsebool [-P] Boolean=value（1，0）</p><pre><code>[root@centos7 ~]# setsebool ftpd_anon_write onftpd_anon_write                (on   ,  off)  Allow ftpd to anon write 表示临时生效，机器重启后还是offsetsebool ftpd_anon_write 0             改成off[root@centos7 ~]# semanage boolean -l | grep ftp         -p永久保存[root@centos7 ~]# sestsebool -P ftpd_anon_write 1ftpd_anon_write                (on   ,   on)  Allow ftpd to anon write</code></pre><h2 id="SELinux日志管理"><a href="#SELinux日志管理" class="headerlink" title="SELinux日志管理"></a>SELinux日志管理</h2><p>yum install setroubleshoot（重启生效）<br>将错误的信息写入/var/log/message<br>grep setroubleshoot /var/log/messages<br>查看安全事件日志说明 sealert -l UUID<br>扫描并分析日志<br>sealert -a /var/log/audit/audit.log</p><h2 id="SELinux帮助"><a href="#SELinux帮助" class="headerlink" title="SELinux帮助"></a>SELinux帮助</h2><p>yum –y install selinux-policy-devel ( centos7.2)<br>yum –y install selinux-policy-doc<br>mandb | makewhatis<br>man -k _selinux</p><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><pre><code>[root@centos7 ~]# awk &#39;{print $0}&#39; /etc/passwd        将整个文件全部打印一遍[root@centos7 ~]# awk &#39;{print &quot;abc&quot;$0}&#39; /etc/passwd        将整个文件全部打印一遍每行首都加入abc[root@centos7 ~]# awk &#39;{print 1+2}&#39; /etc/fstab        还可以做数据运算，依然是文件多少行，就会显示多少行出来[root@centos7 ~]# awk &#39;BEGIN{print &quot;1+2&quot;}&#39;        BEGIN表示读入文件前处理一次，也就是只显示一次。注意双引号的区别1+2[root@centos7 ~]# awk &#39;BEGIN{print &quot;1+2&quot;}{print $0}END{print &quot;end&quot;}&#39; /etc/fstab1+2    #这里三段分别表示开始处理前；逐行处理文件；最后处理一次## /etc/fstab# Created by anaconda on Fri Mar 29 05:07:40 2019## Accessible filesystems, by reference, are maintained under &#39;/dev/disk&#39;# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info#UUID=deb83589-98fa-4bf0-a3fc-5e5448892ca9 /                       xfs     defaults        0 0UUID=fc8fc457-8851-43d6-9485-37b256d9e972 /boot                   xfs     defaults        0 0UUID=3aa10d04-b9e4-4b0f-84cf-8c59e7e77ad0 /data                   xfs     defaults        0 0UUID=f647ed48-10d0-4358-9ef5-3fa77d36bc23 swap                    swap    defaults        0 0end</code></pre><h2 id="awk变量"><a href="#awk变量" class="headerlink" title="awk变量"></a>awk变量</h2><pre><code>变量：内置和自定义变量FS：输入字段分隔符，默认为空白字符    awk -v FS=&#39;:&#39; &#39;{print $1,FS,$3}’ /etc/passwd     awk –F: &#39;{print $1,$3,$7}’ /etc/passwdOFS：输出字段分隔符，默认为空白字符    awk -v FS=: -v OFS=: &#39;{print $1,$3}&#39; /etc/passwd    fs=:;awk -v FS=$fs -v OFS=$fs &#39;{print $1,$3}&#39; /etc/passwdRS：输入记录分隔符，指定输入时的换行符这里的意思是当awk &#39;{print $0} /etc/passwd&#39; 他会将整个文件都打印出来，他的分隔符也就是换行符。[root@centos7 ~]# cat f1.txtaa:bb:ccdd:eex:xxxzzz:xxaa[root@centos7 ~]# awk -v RS=&#39;:&#39; &#39;{print $0}&#39; f1.txt 更改换行符aabbccddeexxxxzzzxxaa[root@centos7 ~]# cat f1.txtaa;xxx:bb;bzaa:ccdd:eex;zccc:xxxzzz:xxaa;adfad        #这里先以：进行段落分割，再以；作字段分割，空行是因为不存在。[root@centos7 ~]# awk -v FS=&quot;;&quot; -v RS=&quot;:&quot; &#39;{print $2}&#39; f1.txt xxxbzaazcccadfadORS：输出记录分隔符，输出时用指定符号代替换行符 [root@centos7 ~]#cat f1.txt aa;xxx:bb;bzaa:ccdd:eex;zccc:xxxzzz:xxaa;adfad[root@centos7 ~]#awk -v FS=&quot;;&quot; -v RS=&quot;:&quot; -v ORS=&quot;===&quot; &#39;{print $0}&#39; f1.txt aa;xxx===bb;bzaa===ccdd===eex;zccc===xxxzzz===xxaa;adfad===[root@centos7 ~]#NF：字段数量    awk -F：&#39;{print NF}&#39;    /etc/fstab    引用变量时，变量前不需加$    awk -F : &#39;{print NF}&#39; /etc/passwd 查看每行有多少个：    awk -F : &#39;{print $NF}&#39; /etc/passwd 被：分割的最后一列    awk -F : &#39;{print $(NF-1)}&#39; /etc/passwd 倒数第二列NR：记录号    awk &#39;{print NR}&#39;&#39; /etc/fstab ; awk END‘{print NR}’ /etc/fstabawk -v RS=&quot;:&quot; &#39;{print NR,$0}&#39; f1.txt 因为这里是以：为分割，所以会有没有计数的1 aa;xxx2 bb;bzaa3 ccdd4 eex;zccc5 xxxzzz6 xxaa;adfad[root@centos7 ~]# awk END&#39;{print NR}&#39; /etc/fstab  打印总行号12FNR：各文件分别计数,记录号    awk &#39;{print FNR}&#39; /etc/fstab /etc/inittab    awk -F : &#39;{print FNR,$1}&#39; /etc/passwd /etc/groupFILENAME：当前文件名    awk &#39;{print FILENAME}’ /etc/fstab    awk -F : &#39;{print FNR,FILENAME$1}&#39; /etc/passwd /etc/group1 /etc/passwdroot2 /etc/passwdbin3 /etc/passwddaemon4 /etc/passwdadm5 /etc/passwdlp ......ARGC：查看命令行参数的个数    awk -F : &#39;{print ARGC}&#39; /etc/passwd /etc/group ARGV：数组，保存的是命令行所给定的各参数awk -F : &#39;{print ARGV[0]}&#39; /etc/passwd /etc/groupawk -F : &#39;{print ARGV[1]}&#39; /etc/passwd /etc/group</code></pre><div class="alert alert-success">默认分隔符是空格<br>-F 指定分隔符  <code>awk -F : &#39;{print $1,$3}&#39; /etc/passwd</code><br>这里逗号是默认的，输出会变成空格，如果想要加指定的间隔符可以<br><code>awk -F : &#39;{print $1&quot;:&quot;$3}&#39; /etc/passwd</code><br>-v 变量赋值  <code>awk -v FS=&quot;:&quot; &#39;{print $1,$3}&#39; /etc/passwd</code><br><code>awk -v FS=&quot;:&quot; &#39;{print $1FS$3}&#39; /etc/passwd</code><br><code>df | awk -F &quot;[[:space:]]+&quot; &#39;{print $5}&#39;</code> 还可以用正则表达式</div><p>调用shell中的变量 </p><pre><code>fs=:awk -v FS=$fs &#39;{print $1FS$3}&#39; /etc/passwdawk -F $fs &#39;{print $1,$3}&#39; /etc/passwd</code></pre><p>可以写在文件中</p><pre><code>[root@centos7 ~]# cat awk.txt {print $1}[root@centos7 ~]# awk -F: -f awk.txt /etc/passwd </code></pre><h2 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h2><p>他不会自动换行，需要显示给出换行符\n<br>格式符:</p><pre><code>%c：显示字符的ASCII码%d, %i：显示十进制整数%e, %E：显示科学计数法数值%f：显示为浮点数%g, %G：以科学计数法或浮点形式显示数值%s：显示字符串%u：无符号整数%%：显示%自身</code></pre><p>修饰符<br><code>#[.#]</code> 第一个数字控制显示的宽度；第二个#表示小数点后精度，%3.1f<br><code>-</code> 左对齐（默认右对齐）%-15s<br><code>+</code> 显示数值的正负符号 %+d</p><pre><code>[root@centos7 ~]# awk -F : &#39;{printf &quot;%20s %5d\n&quot;, $1,$3}&#39; /etc/passwd%20s 表示$1这第一个字段预留20个宽度，默认右对齐，%5d 表示$3这个字段预留5个宽度</code></pre><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>比较操作符：<br><code>==, !=, &gt;, &gt;=, &lt;, &lt;=</code><br>模式匹配符：<br>~：左边是否和右边匹配，包含<br>!~：是否不匹配<br>示例：<br>awk -F: ‘$0 ~ /root/{print $1}‘ /etc/passwd<br>awk ‘$0~“^root”‘    /etc/passwd<br>awk ‘$0 !~ /root/‘    /etc/passwd<br>awk -F: ‘$3==0’    /etc/passwd</p><h2 id="操作符-1"><a href="#操作符-1" class="headerlink" title="操作符"></a>操作符</h2><p>算术操作符：<br><code>x+y, x-y, x*y, x/y, x^y, x%y</code><br><code>-x</code>：转换为负数<br><code>+x</code>：将字符串转换为数值<br>字符串操作符：没有符号的操作符，字符串连接<br>赋值操作符：<br><code>=, +=, -=, *=, /=, %=, ^=，++, --</code><br>下面两语句有何不同<br>awk ‘BEGIN{i=0;print ++i,i}’ 先加后打印<br>awk ‘BEGIN{i=0;print i++,i}’ 先打印后加</p><pre><code>[root@centos7 ~]# awk -v i=100 &#39;BEGIN{print i++,i}&#39;  100 101</code></pre><h2 id="操作符-2"><a href="#操作符-2" class="headerlink" title="操作符"></a>操作符</h2><p>逻辑操作符：与&amp;&amp;，或||，非!<br>示例：<br>awk -F:  ‘$3&gt;=0 &amp;&amp; $3&lt;=1000 {print $1}’ /etc/passwd<br>awk -F:  ‘$3==0 || $3&gt;=1000 {print $1}’ /etc/passwd<br>awk -F: ‘!($3==0) {print $1}’    /etc/passwd<br>awk -F: ‘!($3&gt;=500) {print $3}’ /etc/passwd<br>条件表达式（三目表达式）selector?if-true-expression:if-false-expression<br>示例：<br>awk -F: ‘{$3&gt;=1000?usertype=”Common User”:usertype=” SysUser”;printf “%15s:%-s\n”,$1,usertype}’ /etc/passwd</p><pre><code>[root@centos7 ~]# awk -F : &#39;{$3&gt;=1000?name=&quot;common user&quot;:name=&quot;system user&quot;;print name,$1,$3}&#39; /etc/passwd这里表示$3&gt;1000 就怎样 ，否则就怎样；然后打印出来system user root 0            例system user bin 1system user daemon 2system user adm 3system user lp 4system user sync 5system user shutdown 6</code></pre><p><code>[root@centos7 ~]# ss -nt | awk -F &quot;[[:space:]]+|:&quot; &#39;/ESTAB/{print $7}&#39;</code><br>这里表示空格和:作为分隔符，后面的是正则表达式锁定/ESTSB/这行</p><p>relational expression: 关系表达式，结果为“真”才会被处理<br>真：结果为非0值，非空字符串<br>假：结果为空字符串或0值<br><code>awk -v abc=&quot; &quot; &#39;abc{print $0}&#39; /etc/passwd</code></p><h2 id="行范围"><a href="#行范围" class="headerlink" title="行范围"></a>行范围</h2><p>startline,endline：/pat1/,/pat2/ 不支持直接给出数字格式<br>awk -F: ‘/^root>/,/^nobody>/{print $1}’ /etc/passwd<br>awk -F: ‘(NR&gt;=10&amp;&amp;NR&lt;=20){print NR,$1}’ /etc/passwd</p><pre><code>打印 ftp 到 rpc 的行[root@centos7 ~]#awk &#39;/^ftp/,/^rpc/{print $0}&#39; /etc/passwdftp:x:14:50:FTP User:/var/ftp:/sbin/nologinnobody:x:99:99:Nobody:/:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologindbus:x:81:81:System message bus:/:/sbin/nologinpolkitd:x:999:998:User for polkitd:/:/sbin/nologinlibstoragemgmt:x:998:996:daemon account for libstoragemgmt:/var/run/lsm:/sbin/nologinrpc:x:32:32:Rpcbind Daemon:/var/lib/rpcbind:/sbin/nologin[root@centos7 ~]#awk &#39;NR&gt;=10 &amp;&amp; NR&lt;=20{print NR,$0}&#39; /etc/passwd                  打印10-20行的内容 </code></pre><pre><code>seq 10 | awk &#39;i=!i&#39; 这里表示一开始i没有赋值所以就为假，然后!i就为真，就会打印出第一行，为真后第二行又!2所以是空值，不打印。以此类推13579seq 10 | awk &#39;!(i=!i)&#39;  根据上面所以这里会打印出偶数行也就是说如果首先i有值为真，那么就可以直接打印出来偶数行seq 10 | awk -v i=&quot;1&quot; &#39;i=!i&#39;[root@centos7 ~]# seq 10 | awk &#39;{i=!i;print i}&#39;1010101010</code></pre><h2 id="awk控制语句if-else"><a href="#awk控制语句if-else" class="headerlink" title="awk控制语句if-else"></a>awk控制语句if-else</h2><pre><code>[root@centos7 ~]# awk -v score=66 &#39;BEGIN{if(score&lt;60){print &quot;no pass&quot;}else if(score &lt;=80){print &quot;score&quot;}else {print &quot;good&quot;}}&#39;score</code></pre><h2 id="awk控制语句"><a href="#awk控制语句" class="headerlink" title="awk控制语句"></a>awk控制语句</h2><p>while循环<br>语法：while(条件){处理语句;…}<br>条件“真”，进入循环；条件“假”，退出循环<br>使用场景：<br>对一行内的多个字段逐一类似处理时使用对数组中的各元素逐一处理时使用<br><code>awk -F : &#39;NR==1{i=1;while(i&lt;=NF){print $i,length($i);i++}}&#39; /etc/passwd</code><br>打印/etc/passwd文件第一行的字段并逐行显示<br>NR 行号，NF字段<br><code>awk &#39;/^[[:space:]]*linux16/{i=1;while(i&lt;=NF) {print $i,length($i); i++}}&#39; /etc/grub2.cfg</code><br>加了条件:</p><pre><code>awk &#39;/^[[:space:]]*linux16/{i=1;while(i&lt;=NF){if(length($i)&gt;=10){print $i,length($i)}; i++}}&#39; /etc/grub2.cfg</code></pre><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><pre><code>[root@centos7 ~]# for i in {1..1000};do if [ $i -eq 1 ];then echo -e &quot;$RANDOM\c&quot; &gt;&gt;f1.txt;else echo -e &quot;,$RANDOM\c&quot; &gt;&gt; f1.txt;fi;done                                    随机1-1000的数字存在这个文件中awk -F &#39;,&#39; &#39;{i=2;max=$1;min=$1;while(i&lt;=NF){if($i &gt; max){max=$i}else if($i &lt; min){min=$i};i++}}END{print &quot;max=&quot;max,&quot;min=&quot;min}&#39; f1.txt           取最大值，最小值</code></pre><h2 id="awk控制语句-1"><a href="#awk控制语句-1" class="headerlink" title="awk控制语句"></a>awk控制语句</h2><p>do-while循环<br>语法：do {statement;…}while(condition)<br>意义：无论真假，至少执行一次循环体<br>示例：</p><pre><code>[root@centos7 ~]# awk &#39;BEGIN{ total=0;i=0;do{ total+=i;i++;}while(i&lt;=100);print total}&#39;5050</code></pre><h2 id="awk控制语句-2"><a href="#awk控制语句-2" class="headerlink" title="awk控制语句"></a>awk控制语句</h2><p>for循环<br>语法：for(expr1;expr2;expr3) {statement;…}<br>常见用法<br>for(variable assignment;condition;iteration process)<br>{for-body}<br>特殊用法：能够遍历数组中的元素<br>语法：for(var in array) {for-body}<br>示例：</p><pre><code>awk &#39;/^[[:space:]]*linux16/{for(i=1;i&lt;=NF;i++) {print $i,length($i)}}&#39; /etc/grub2.cfgawk &#39;BEGIN{for(i=0;i&lt;=100;i++)total+=i;print total}&#39;awk &#39;BEGIN{total=0;for(i=0;i&lt;=100;i++)total+=i;print total}&#39;</code></pre><p>用shell写法<code>for ((i=0,total=0;i&lt;=100;i++));do let total+=i;done; echo $total</code><br>查看时间：time “awk ‘BEGIN{total=0;for(i=1;i&lt;=100000;i++)total+=i;print total}’”  </p><h2 id="awk控制语句-3"><a href="#awk控制语句-3" class="headerlink" title="awk控制语句"></a>awk控制语句</h2><p>switch语句<br>语法：switch(expression) {case VALUE1 or /REGEXP/: statement1; case VALUE2 or /REGEXP2/: statement2; …; default: statementn}<br>break和continue<br>awk ‘BEGIN{sum=0;for(i=1;i&lt;=100;i++) {if(i%2==0)continue;sum+=i}print sum}’<br>awk ‘BEGIN{sum=0;for(i=1;i&lt;=100;i++) {if(i==66)break;sum+=i}print sum}’</p><pre><code>[root@centos7 ~]# awk &#39;BEGIN{total=0;for(i=0;i&lt;=100;i++){if(i==50)continue;total+=i};print total}&#39;5000[root@centos7 ~]# awk &#39;BEGIN{total=0;for(i=0;i&lt;=100;i++){if(i==50)break;total+=i};print total}&#39;        1225</code></pre><h2 id="next"><a href="#next" class="headerlink" title="next:"></a>next:</h2><p>提前结束对本行处理而直接进入下一行处理（awk自身循环）<br>awk -F: ‘{if($3%2!=0) next; print $1,$3}’ /etc/passwd</p><pre><code>[root@centos7 ~]# awk -F : &#39;{if(NR%2==0)next;print NR,$0}&#39; /etc/passwd对2取模，显然NR必须都是偶数才满足。next跳过本行处理也就是跳过偶数行1 root:x:0:0:root:/root:/bin/bash            3 daemon:x:2:2:daemon:/sbin:/sbin/nologin5 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown9 mail:x:8:12:mail:/var/spool/mail:/sbin/nologin ......</code></pre><p><code>awk -F : &#39;NR%2==1{print NR,$0}&#39; /etc/passwd</code> 写法不同</p><h2 id="awk数组"><a href="#awk数组" class="headerlink" title="awk数组"></a>awk数组</h2><p>关联数组：array[index-expression]<br>index-expression:<br>(1) 可使用任意字符串；字符串要使用双引号括起来<br>(2) 如果某数组元素事先不存在，在引用时，awk会自动创建此元素，并将其值初始化为“空串”<br>(3) 若要判断数组中是否存在某元素，要使用“index in array”格式进行遍历示例：<br>weekdays[“mon”]=”Monday”<br>awk ‘BEGIN{weekdays[“mon”]=”Monday”;weekdays[“tue”]=”Tuesday”; print weekdays[“mon”]}‘<br>awk ‘!line[$0]++’ dupfile<br>awk ‘{!line[$0]++;print $0, line[$0]}’ dupfile</p><pre><code>[root@centos7 ~]# awk &#39;BEGIN{title[&quot;ceo&quot;]=&quot;mage&quot;;title[&quot;coo&quot;]=&quot;zhnagsir&quot;;title[3]=&quot;wnag&quot;;print title[3]}&#39;           wnag[root@centos7 ~]# cat f1.txt abcabcdddccccccaaaaaaaabc[root@centos7 ~]# awk &#39;{!line[$0]++;print $0,line[$0]}&#39; f1.txtabc 1abc 2ddd 1ccc 1ccc 2aaaa 1aaa 1abc 3[root@centos7 ~]# awk &#39;!line[$0]++;&#39; f1.txt     表现为去除重复          abcdddcccaaaaaaa</code></pre><h2 id="awk数组-1"><a href="#awk数组-1" class="headerlink" title="awk数组"></a>awk数组</h2><p>若要遍历数组中的每个元素，要使用for循环<br>for(var in array) {for-body}<br>注意：var会遍历array的每个索引<br>示例：<br>awk‘BEGIN{weekdays[“mon”]=”Monday”;weekdays[“tue”]=”Tuesday”; for(i in weekdays) {print weekdays[i]}}’<br>netstat -tan | awk ‘/^tcp/{state[$NF]++} END{for(i in state) { print i,state[i]}}’<br><code>awk &#39;{ip[$1]++}END{for(i in ip){print i,ip[i]}}&#39; /var/log/httpd/access_log-20190824</code>  统计文件中的ip<br><code>ss -nt | awk -F &quot;[[:space:]]+|:&quot; &#39;/ESTAB/{ip[$(NF-2)]++}END{for (i in ip){print i;ip[i]}}&#39;</code></p><pre><code>[root@centos7 ~]# awk &#39;/UUID/{filesystem[$3]++}END{for (i in filesystem){print i,filesystem[i]}}&#39; /etc/fstabswap 1xfs 3</code></pre><h2 id="awk函数"><a href="#awk函数" class="headerlink" title="awk函数"></a>awk函数</h2><p>数值处理：<br>rand()：返回0和1之间一个随机数<br><code>awk &#39;BEGIN{srand(); for (i=1;i&lt;=10;i++)print int(rand()*100) }&#39;</code><br><code>awk &#39;BEGIN{srand();print rand()}&#39;</code></p><h3 id="字符串处理："><a href="#字符串处理：" class="headerlink" title="字符串处理："></a>字符串处理：</h3><p>length([s])：返回指定字符串的长度</p><pre><code>sub(r,s,[t])：对t字符串搜索r表示模式匹配的内容，并将第一个匹配内容替换为s echo &quot;2008:08:08 08:08:08&quot; | awk &#39;sub(/:/,&quot;-&quot;,$1)&#39;2008-08:08 08:08:08</code></pre><h3 id="gsub-r-s-t-：对t字符串进行搜索r表示的模式匹配的内容，并全部替换为s所表示的内容"><a href="#gsub-r-s-t-：对t字符串进行搜索r表示的模式匹配的内容，并全部替换为s所表示的内容" class="headerlink" title="gsub(r,s,[t])：对t字符串进行搜索r表示的模式匹配的内容，并全部替换为s所表示的内容"></a>gsub(r,s,[t])：对t字符串进行搜索r表示的模式匹配的内容，并全部替换为s所表示的内容</h3><pre><code>[root@centos7 ~]# echo &quot;2008:08:08 08:08:08&quot; | awk &#39;gsub(&quot;:&quot;,&quot;-&quot;,$1)&#39;2008-08-08 08:08:08[root@centos7 ~]# echo &quot;2008:08:08 08:08:08&quot; | awk &#39;{split($0,str,&quot;:&quot;)}END{for (i in str){print i,str[i]}}&#39;4 085 081 20082 083 08 08</code></pre><h3 id="split-s-array-r-：以r为分隔符，切割字符串s，并将切割后的结果保存至array所"><a href="#split-s-array-r-：以r为分隔符，切割字符串s，并将切割后的结果保存至array所" class="headerlink" title="split(s,array,[r])：以r为分隔符，切割字符串s，并将切割后的结果保存至array所"></a>split(s,array,[r])：以r为分隔符，切割字符串s，并将切割后的结果保存至array所</h3><p>表示的数组中，第一个索引值为1,第二个索引值为2,…</p><pre><code>[root@centos7 ~]# netstat -tnActive Internet connections (w/o servers)Proto Recv-Q Send-Q Local Address           Foreign Address         State      tcp        0     96 192.168.152.136:22      192.168.152.1:51449     ESTABLISHEDtcp        0      0 192.168.152.136:22      192.168.152.1:51450     ESTABLISHED[root@centos7 ~]# netstat -tn | awk &#39;/^tcp/{split($5,ip,&quot;:&quot;);count[ip[1]]++}END{for (i in count){print i,count[i]}}&#39; 192.168.152.1 2        统计每一个IP的连接次数[root@centos7 ~]# netstat -tn | awk &#39;/^tcp/{split($5,ip,&quot;:&quot;);count[ip[2]]++}END{for (i in count){print i,count[i]}}&#39; 51449 151450 1</code></pre><h2 id="awk函数-1"><a href="#awk函数-1" class="headerlink" title="awk函数"></a>awk函数</h2><pre><code>[root@centos7 ~]# cat func.awk         比较最大值function max(x,y){        x&gt;y?var=x:var=y        return var}BEGIN{print max(i,j)}[root@centos7 ~]# awk -v i=22 -v j=23 -f func.awk 23</code></pre><h2 id="awk中调用shell命令"><a href="#awk中调用shell命令" class="headerlink" title="awk中调用shell命令"></a>awk中调用shell命令</h2><p>system命令<br>空格是awk中的字符串连接符，如果system中需要使用awk中的变量可以使用空格分隔，或者说除了awk的变量外其他一律用””引用起来</p><pre><code>awk &#39;BEGIN{system(&quot;hostname&quot;) }&#39;awk &#39;BEGIN{score=100; system(&quot;echo your score is &quot; score) }&#39;[root@centos7 ~]# awk &#39;BEGIN{dir=&quot;/boot&quot;;system(&quot;ls &quot;dir)}&#39; 调用变量</code></pre><h2 id="awk脚本"><a href="#awk脚本" class="headerlink" title="awk脚本"></a>awk脚本</h2><p>将awk程序写成脚本，直接调用或执行<br>示例：</p><pre><code>[root@centos7 ~]# cat f1.awk #!/bin/awk -f#this is a awk script{if($3&gt;=1000)print $1,$3}[root@centos7 ~]# ./f1.awk -F : /etc/passwdnfsnobody 65534pan 1000</code></pre><h2 id="向awk脚本传递参数"><a href="#向awk脚本传递参数" class="headerlink" title="向awk脚本传递参数"></a>向awk脚本传递参数</h2><p>格式：awkfile var=value var2=value2… Inputfile<br>注意：在BEGIN过程中不可用。直到首行输入完成以后，变量才可用。可以通过-v 参数，让awk在执行BEGIN之前得到变量的值。命令行中每一个指定的变量都需要一个-v参数<br>示例</p><pre><code>[root@centos7 ~]# cat b.awk #!/bin/awk -f{if($3&gt;=min &amp;&amp; $3&lt;=max)print $1,$3}[root@centos7 ~]# ./b.awk -F : min=50 max=80 /etc/passwdtss 59radvd 75sshd 74avahi 70tcpdump 72</code></pre><h2 id="将以下文件内容中FQDN取出并根据其进行计数从高到低排序"><a href="#将以下文件内容中FQDN取出并根据其进行计数从高到低排序" class="headerlink" title="将以下文件内容中FQDN取出并根据其进行计数从高到低排序"></a>将以下文件内容中FQDN取出并根据其进行计数从高到低排序</h2><pre><code>[root@centos7 ~]# cat ff.txt http://mail.magedu.com/index.html http://www.magedu.com/test.html http://study.magedu.com/index.html http://blog.magedu.com/index.html http://www.magedu.com/images/logo.jpg http://blog.magedu.com/20080102.html[root@centos7 ~]# awk -F &quot;/&quot; &#39;{fqdn[$3]++}END{for(i in fqdn){print i,fqdn[i]}}&#39; ff.txt | sort -k 2 -nrwww.magedu.com 2blog.magedu.com 2study.magedu.com 1mail.magedu.com 1</code></pre><p><script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/highlight.min.js"></script></p><p><script>hljs.initHighlightingOnLoad();</script></p><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/styles/an-old-hope.min.css"><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;FZShuTi&quot;&gt;linux 理论知识点&lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="Document" scheme="http://yoursite.com/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>Three</title>
    <link href="http://yoursite.com/2019/06/20/%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/06/20/脚本/</id>
    <published>2019-06-20T12:27:03.000Z</published>
    <updated>2019-08-28T08:37:29.052Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="FZShuTi">脚本..</font></center><br><a id="more"></a></p><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><p><font size="3">条件选择if语句<br>选择执行：<br>注意：if语句可嵌套<br>单分支<br>if 判断条件;then<br>    条件为真的分支代码<br>fi</font></p><h2 id="双分支"><a href="#双分支" class="headerlink" title="双分支"></a>双分支</h2><p>if 判断条件; then<br>    条件为真的分支代码<br>else<br>    条件为假的分支代码<br>fi.</p><h2 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h2><p><font size="3">if 判断条件1; then<br>    条件1为真的分支代码<br>elif 判断条件2; then<br>    条件2为真的分支代码<br>elif 判断条件3; then<br>    条件3为真的分支代码<br>else<br>    以上条件都为假的分支代码<br>fi</font><br>逐条件进行判断，第一次遇为“真”条件时，执行其分支，而后结束整个if语句<br><code>=~</code>：左侧字符串是否能够被右侧的PATTERN（正则表达式）所匹配  若匹配则为真，否则为假<br><img src="https://s2.ax1x.com/2019/06/20/VvRzjS.png" alt=""><br><img src="https://s2.ax1x.com/2019/06/20/VvvtYV.png" alt=""></p><h1 id="条件判断：case语句"><a href="#条件判断：case语句" class="headerlink" title="条件判断：case语句"></a>条件判断：case语句</h1><p><font size="3">case 变量引用 in<br>PAT1)<br>分支1<br>;;<br>PAT2)<br>分支2<br>;;<br>…<br>*)<br>默认分支<br>;;<br>esac</font><br><img src="https://s2.ax1x.com/2019/06/20/VxiRL8.png" alt=""></p><pre><code>[root@centos7 data]# cat yes.sh read -p &quot;Do you agree(yes or no)?&quot; ansans=`echo $ans | tr &#39;A-Z&#39; &#39;a-z&#39;`case $ans iny|yes|ye)        echo &quot;OK&quot;        ;;no|n)        echo &quot;NO&quot;        ;;*)        echo &quot;input false&quot;        ;;esac</code></pre><p><img src="https://s2.ax1x.com/2019/06/21/VzbTYT.png" alt=""></p><pre><code>ans=YE;[[ $ans =~ ^([Yy]|[Yy][Ee][Ss])$ ]] &amp;&amp; echo yes</code></pre><p>后面的括号的意思表示里面是一个整体，要么是[Yy]要么是[Yy][Ee][Ss]。然后再^和$。</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>循环执行<br>将某代码段重复运行多次重复运行多少次<br>循环次数事先已知循环次数事先未知<br>有进入条件和退出条件<br>for, while, until<br>列出当前文件夹下的文件名</p><p><pre><code style="font-size: 20px;">for num in /data/*.sh ;do echo filename is $num;done</code></pre></p><p><pre><code class="Bash" style="font-size: 18px; border:0px solid #000;">#!/bin/bash 从1加到100得出结果5050，这里是算术运算，有记录<br>sum=0<br>for i in {1..100};do<br>        let sum=sum+i<br>done<br>echo sum=$sum<br></code></pre>问题：猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不过瘾，又多吃了一个，<br>第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃前一天剩下的一半零一个。<br>到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘多少个桃子？</p><pre><code>#!/bin/bashsum=1for i in {9..1}        do                let sum=(sum+1)*2        doneecho &quot;桃子的个数是：$sum&quot;</code></pre><pre><code>#!/bin/bash 猴子的升级版本read -p &quot;请输入天数：&quot; dayread -p &quot;请输入最后一天剩下的个数：&quot; sumlet day=day-1for i in `seq $day`        do                let sum=(sum+1)*2        doneecho &quot;桃子的个数是 $sum&quot;</code></pre><h2 id="将-data文件夹下，所有的文件后缀改为-log结尾的文件。"><a href="#将-data文件夹下，所有的文件后缀改为-log结尾的文件。" class="headerlink" title="将/data文件夹下，所有的文件后缀改为.log结尾的文件。"></a>将/data文件夹下，所有的文件后缀改为.log结尾的文件。</h2><pre><code>#!/bin/bashfor i in /data/*;do  　　　.*表示贪婪模式，找到最后一个. 然后后面的字符让.*去匹配file=`echo $i | sed -nr &#39;s/(.*)\..*/\1/p&#39;`mv $i $file.shdone</code></pre><h2 id="将该目录下的后缀名都修改为sh结尾的文件"><a href="#将该目录下的后缀名都修改为sh结尾的文件" class="headerlink" title="将该目录下的后缀名都修改为sh结尾的文件"></a>将该目录下的后缀名都修改为sh结尾的文件</h2><pre><code>for ceshi in `ls | sed -nr &#39;s/.*\.(.*)/\1/p&#39; | sort -u`;do rename $ceshi sh *;done</code></pre><h2 id="判断网段中主机在线状态"><a href="#判断网段中主机在线状态" class="headerlink" title="判断网段中主机在线状态"></a>判断网段中主机在线状态</h2><pre><code>#!/bin/baship=192.168.100for id in {1..254};do        { #这里表示同时运行 一次ping 1-254个地址        if ping -c1 -w1 $ip.$id &amp;&gt;/dev/null;then#-c1是指ping的次数，-w是指执行的最后期限，也就是执行的时间，单位为秒                echo $ip.$id is up        else                echo $ip.$id is down        fi        }&amp;donewait#wait等待后台执行的命令，执行完后退出。如果不写后台命令不敲操作他不会退出。</code></pre><pre><code>#!/bin/bash　　　交互式read -p &quot;please input ip address: &quot; ipip=`echo $ip | sed -rn &#39;s/(.*)\..*/\1/p&#39;`for id in {1..254};do        { #这里表示同时运行 一次ping 1-254个地址        if ping -c1 -w1 $ip.$id &amp;&gt;/dev/null;then#-c1是指ping的次数，-w是指执行的最后期限，也就是执行的时间，单位为秒                echo $ip.$id is up &gt;&gt; a.txt        else                echo $ip.$id is down        fi        }&amp;donewait#wait等待后台执行的命令，执行完后退出。如果不写后台命令不敲操作他不会退出。</code></pre><h2 id="根据IP地址和子网掩码得出"><a href="#根据IP地址和子网掩码得出" class="headerlink" title="根据IP地址和子网掩码得出"></a>根据IP地址和子网掩码得出</h2><h2 id="交互式打印等腰三角形"><a href="#交互式打印等腰三角形" class="headerlink" title="交互式打印等腰三角形"></a>交互式打印等腰三角形</h2><pre><code>#!/bin/bashread -p &quot;please input line: &quot; line  #用户输入的总行数for i in `seq $line`;do        let star=$i*2-1  #&quot;*&quot;的个数        let space=$line-$i  #空格的个数=总行数-行号        for j in `seq $space`;do                echo -n &quot; &quot;        done        for k in `seq $star`;do #循环&quot;*&quot;的个数                echo -n &quot;*&quot; #-n 不换行输出        done        echo #换行，让接下来的&quot;*&quot;换行输出done</code></pre><h2 id="99乘法表"><a href="#99乘法表" class="headerlink" title="99乘法表"></a>99乘法表</h2><pre><code>#!/bin/bashfor i in `seq 9`;do        for j in `seq $i`;do        let sum=j*i        echo -e &quot;$j*$i=$sum\t\c&quot;    \t表示:插入Tab字符        done        echodone</code></pre><h1 id="for循环的特殊格式"><a href="#for循环的特殊格式" class="headerlink" title="for循环的特殊格式"></a>for循环的特殊格式</h1><p><img src="https://s2.ax1x.com/2019/06/25/ZZFJwF.png" alt=""><br>99乘法表</p><pre><code>#!/bin/bashfor((i=1;i&lt;=9;i++));do        for((j=1;j&lt;=$i;j++));do                echo -en &quot;${i}*${j}=$[$i*$j]\t\c&quot;        done        echodone</code></pre><p>乱码文件，tr -c:字符串1中字符集的补集替换此字符集，要求字符集为ASCI。 head -c:取前8个字符，-n是前n行。</p><pre><code> cat /dev/urandom | tr -dc &#39;[[:alnum:]]&#39; | head -c 8</code></pre><h1 id="while"><a href="#while" class="headerlink" title="while"></a>while</h1><p>while循环<br>while CONDITION(这里可以写 :或者ture 就是死循环); do<br>循环体<br>done<br>CONDITION：循环控制条件；进入循环之前，先做一次判断；每一次循环之后会再次做判断；条件为“true”，则执行一次循环；直到条件测试状态为“false”终止循环<br>因此：CONDTION一般应该有循环控制变量；而此变量的值会在循环体不断地被修正<br>进入条件：CONDITION为true<br>退出条件：CONDITION为false</p><pre><code>i=1;while [ $i -le 100 ];do let sum+=i;let i++;done;echo sum=$sum</code></pre><h1 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h1><p>until CONDITION; do<br>循环体<br>done<br>进入条件： CONDITION 为false<br>退出条件： CONDITION 为true</p><h1 id="循环控制语句continue"><a href="#循环控制语句continue" class="headerlink" title="循环控制语句continue"></a>循环控制语句continue</h1><p>用于循环体中<br>continue [N]：提前结束第N层的本轮循环，而直接进入下一轮判断；最内层为第1层<br>while CONDTIITON1; do CMD1<br>…<br>if CONDITION2; then continue<br>fi CMDn<br>…<br>done</p><pre><code>#!/bin/bashi=0until [ &quot;$i&quot; -gt 9 ];do        let i++        if [ &quot;$i&quot; -eq 5 ];then                continue        fi        echo i=$idone  </code></pre><p>continue:结束当次循环<br>break：结束当前整个循环(是循环不是条件判断语句)，直接跳入下一个循环。<br>循环控制语句break用于循环体中<br>break [N]：提前结束第N层循环，最内层为第1层</p><pre><code>#!/bin/bashfor ((i=1;i&lt;=3;i++));do        for((j=1;j&lt;=10;j++));do                if [ &quot;$j&quot; -eq 5 ];then                        continue 2 #这里默认是1,2的意思是结束本次循环，退到上轮循环。                fi                echo j=$j        done        echo i=$i # 上面是continue 2 所以后面的都不会执行doneecho  &quot;************************************************************************&quot;for ((i=1;i&lt;=3;i++));do        for((j=1;j&lt;=10;j++));do                if [ &quot;$j&quot; -eq 5 ];then                        break 2 #默认是1，所以2会跳到上层结束掉上层循环，这里只会输出：                fi                      #i=1                echo j=$j               #i=2        done                            #i=3        echo i=$i                       #i=4done</code></pre><p>监测服务的运行，失败自动运行</p><pre><code>#!/bin/bashSLEEPTIME=30 #定义变量SLEEPTIME=30秒until false;do        if ! killall -0 httpd &amp;&gt;/dev/null;then                service httpd restart &amp;&gt;/dev/null;                echo &quot;At `date +&#39;%F %T&#39;` httpd restarted&quot; &gt;&gt;/data/httpd.log                break;#结束循环，退出程序        fi        sleep $SLEEPTIME;#如果不匹配if语句里面内容就执行这里的睡眠30sdone</code></pre><h1 id="lastb"><a href="#lastb" class="headerlink" title="lastb"></a>lastb</h1><p>ssh 用户名@ip地址 或者 ssh IP地址<br><code>lastb</code> 查看失败登录的信息。<br><code>[root@centos7 ~]# lastb | awk &#39;$3 ~ /^[[:digit:]]/{print $3}&#39; | sort | uniq -c | awk &#39;$1 &gt;=3{print $2}&#39;</code><br>查看访问的链接IP地址，统计大于等于3次的</p><h1 id="grep取IP地址"><a href="#grep取IP地址" class="headerlink" title="grep取IP地址"></a>grep取IP地址</h1><p>0-9 10-99 100-199 200-249 250-255<br><code>ifconfig | grep -Eo &quot;(([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])&quot;</code></p><h1 id="批量创建用户用shift"><a href="#批量创建用户用shift" class="headerlink" title="批量创建用户用shift"></a>批量创建用户用shift</h1><pre><code>#!/bin/bashwhile : ;do        [ -z &quot;$1&quot; ] &amp;&amp; break        useradd $1 &amp;&amp; echo $1 is created        shiftdone            bash ceshi.txt a b c 可接多个用户名 </code></pre><pre><code>#!/bin/bashwhile [ &quot;$1&quot; ];do        useradd $1 &amp;&amp; echo $1 is created        shiftdone</code></pre><pre><code>#!/bin/bashwhile [ $# -gt 0 ];do   #or (( $#&gt;0 ))        echo $*        shiftdone</code></pre><p>$RANDOM: 随机输出数字<br>取余:除数=余数范围最大值+1<br>x%11 余数范围:0-10</p><h1 id="while循环的特殊用法-遍历文件的每一行"><a href="#while循环的特殊用法-遍历文件的每一行" class="headerlink" title="while循环的特殊用法(遍历文件的每一行)"></a>while循环的特殊用法(遍历文件的每一行)</h1><p>while read line;do<br>    循环体<br>    done &lt; /PATH/FROM/SOMEFILE<br>依次读取/PATH/FROM/SOMEFILE文件中的每一行，且将行复制给变量line</p><h2 id="df磁盘-gt-10输出"><a href="#df磁盘-gt-10输出" class="headerlink" title="df磁盘%&gt;10输出"></a>df磁盘%&gt;10输出</h2><pre><code>#!/bin/bashdf | while read diskspace;do        space=`echo $diskspace | sed -nr &quot;/^\/dev\/sd/s/.* (.+)%.*/\1/p&quot;`        disk=`echo $diskspace | sed -nr &quot;/^\/dev\/sd/s/([^ ]+).*/\1/p&quot;`        if [[ $space =~ ^[0-9+$] ]];then                if [ $space -gt 10 ];then                        echo $disk:$space                fi        fidone</code></pre><h2 id="查看ip链接次数大于2记录到文件"><a href="#查看ip链接次数大于2记录到文件" class="headerlink" title="查看ip链接次数大于2记录到文件"></a>查看ip链接次数大于2记录到文件</h2><pre><code>#!/bin/bashnetstat -nta | sed -nr &quot;/^tcp/ s/.*  ([1-9].*):.*/\1/p&quot; | sort | uniq -c | while read iplist ;do        linknum=`echo $iplist | cut -d &quot; &quot; -f 1`        ip=`echo $iplist | cut -d &quot; &quot; -f 2`        if [ $linknum -ge 2 ];then                echo $ip &gt;&gt; /data/cracker_ip.log        fidone</code></pre><h1 id="select-语句"><a href="#select-语句" class="headerlink" title="select 语句"></a>select 语句</h1><p>select循环与菜单<br>select variable in list do<br>循环体命令<br>done<br>select 循环主要用于创建菜单，按数字顺序排列的菜单项将显示在标准错误上，并显示 PS3 提示符，等待用户输入<br>用户输入菜单列表中的某个数字，执行相应的命令<br>用户输入被保存在内置变量 REPLY 中<br>select 是个无限循环，因此要记住用 break 命令退出循环，或用 exit 命令终止脚本。也可以按 ctrl+c 退出循环<br>select 经常和 case 联合使用<br>与 for 循环类似，可以省略 in list，此时使用位置参量</p><pre><code>#!/bin/bashPS3=&quot;please input a number: &quot;select MENU in 拉面 烩面 盖饭 饺子 包子 quit;do        case $REPLY in        1|2)                echo &quot;The price is 15元&quot;                ;;        3|5)                echo &quot;The price is 20元&quot;                ;;        4)                echo &quot;The price is 25元&quot;        ;;        6)                echo &quot;bye&quot;                break                ;;        *)                echo &quot;Input false&quot;        esacdone</code></pre><h1 id="bc"><a href="#bc" class="headerlink" title="bc"></a>bc</h1><pre><code>bc 1.06.95Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.This is free software with ABSOLUTELY NO WARRANTY.For details type `warranty&#39;. obase=2 输出二进制222 输入原始数字回车11011110 计算机输出二进制^C(interrupt) Exiting bc.</code></pre><h1 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h1><p>函数function是由若干条shell命令组成的语句块，实现代码重用和模块化编程<br>它与shell程序形式上是相似的，不同的是它不是一个单独的进程，不能独立运行，而是shell程序的一部分<br>函数和shell程序比较相似，区别在于<br>Shell程序在子Shell中运行<br>而Shell函数在当前Shell中运行。因此在当前Shell中，函数可以对shell中变量进行修改</p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>函数由两部分组成：函数名和函数体<br>help function<br>语法一：<br>f_name（）{<br>…函数体…<br>}<br>语法二：<br>function f_name {<br>…函数体…<br>}<br>语法三：<br>function f_name （）{<br>…函数体…<br>}</p><h2 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h2><p>函数的定义和使用：<br>可在交互式环境下定义函数<br>可将函数放在脚本文件中作为它的一部分<br>可放在只包含函数的单独文件中<br>调用：函数只有被调用才会执行调用：给定函数名<br>函数名出现的地方，会被自动替换为函数代码<br>函数的生命周期：被调用时创建，返回时终止</p><pre><code>[root@centos7 ~]#sysinfo(){ hostname;cat /etc/centos-release; }[root@centos7 ~]# sysinfocentos7.localdomainCentOS Linux release 7.5.1804 (Core) </code></pre><p>还可以给变量赋值</p><pre><code>sysinfo(){ name=magedu;echo $name;hostname;cat /etc/centos-release; }[root@centos7 ~]# sysinfomageducentos7.localdomainCentOS Linux release 7.5.1804 (Core) [root@centos7 ~]# echo $namemagedu</code></pre><p>删除函数 <code>unset sysinfo</code><br>查看定义的函数 <code>declare -f sysinfo</code></p><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>在diao文件里面调用functions文件里面的内容</p><pre><code>[root@centos7 data]# cat functions 普通的文本文件version(){         sed -nr &quot;s/.* ([0-9])\..*/\1/p&quot; /etc/centos-release}sysinfo(){        echo Hostname is `hostname`        echo OS version is `version`        }</code></pre><pre><code>[root@centos7 data]# cat diao.sh #!/bin/bash. functions 调用函数路径sysinfo</code></pre><h3 id="调用函数——猜数字"><a href="#调用函数——猜数字" class="headerlink" title="调用函数——猜数字"></a>调用函数——猜数字</h3><pre><code>#!/bin/bash. /data/functionsn=$[RANDOM%11]while read -p &quot;input a 0-10 number: &quot; num ;do        is_digit $num || { echo input 0000 no digit; continue; }        if [ $num -gt $n ];then                echo $num is greater        elif [ $num -lt $n ];then                echo $num is lower        else                echo &quot;guess right!&quot;                break        fidone</code></pre><pre><code>cat functionsis_digit(){        [[ &quot;$1&quot; =~ ^[0-9]+$ ]] &amp;&amp; true || false}</code></pre><h1 id="6-7取ip地址-ifconfig-sed-nr-quot-2s-0-9-0-9-1-p-quot"><a href="#6-7取ip地址-ifconfig-sed-nr-quot-2s-0-9-0-9-1-p-quot" class="headerlink" title="6,7取ip地址:ifconfig | sed -nr &quot;2s/[^0-9]+([0-9.]+).*/\1/p&quot;"></a>6,7取ip地址:<code>ifconfig | sed -nr &quot;2s/[^0-9]+([0-9.]+).*/\1/p&quot;</code></h1><h1 id="return"><a href="#return" class="headerlink" title="return"></a>return</h1><pre><code>#!/bin/bashfunc(){        echo fun1_cmd1        #return #退出函数本身(提前结束函数)        exit #这里退出整个脚本        echo fun1_cmd2}func #使用return这里也会执行echo &quot;return&quot;</code></pre><h1 id="删除shell函数"><a href="#删除shell函数" class="headerlink" title="删除shell函数"></a>删除shell函数</h1><p>现在对函数做一些改动后，需要先删除函数，使其对shell不可用。使用unset命令完成删除函数<br>命令格式为：<br>unset function_name<br>示例：<br>unset findit<br>再键入set命令，函数将不再显示<br>环境函数<br>使子进程也可使用<br>声明：export -f function_name<br>查看：export -f 或 declare -xf</p><h1 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h1><p>函数可以接受参数：<br>传递参数给函数：调用函数时，在函数名后面以空白分隔给定参数列表即可；<br>例如“testfunc arg1 arg2 …”<br>在函数体中当中，可使用$1, $2, …调用这些参数；还可以使用$@, $*, $# 等特殊变量</p><h1 id="函数变量"><a href="#函数变量" class="headerlink" title="函数变量"></a>函数变量</h1><p>变量作用域：<br>环境变量：当前shell和子shell有效<br>本地变量：只在当前shell进程有效，为执行脚本会启动专用子shell进程；因此，本地变量的作用范围是当前shell脚本程序文件，包括脚本中的函数<br>局部变量：函数的生命周期；函数结束时变量被自动销毁<br>注意：如果函数中有局部变量，如果其名称同本地变量，使    用局部变量<br>在函数中定义局部变量的方法 local NAME=VALUE</p><h1 id="函数递归示例"><a href="#函数递归示例" class="headerlink" title="函数递归示例"></a>函数递归示例</h1><p>函数递归：<br>函数直接或间接调用自身注意递归层数<br>递归实例：<br>阶乘是基斯顿·卡曼于 1808 年发明的运算符号，是数学术语，一个正整数的阶乘（factorial）是所有小于及等于该数的正整数的积，并且有0的阶乘为1，自然数n的阶乘写作n!<br>n!=1×2×3×…×n<br>阶乘亦可以递归方式定义：0!=1，n!=(n-1)!×n<br>n!=n(n-1)(n-2)…1<br>n(n-1)! = n(n-1)(n-2)!</p><pre><code>#!/bin/bashfact(){        if [ &quot;$1&quot; -eq 1 ];then                echo 1        else                echo $[ $1*`fact $[$1-1]`]        fi}fact $1</code></pre><p>执行结果</p><pre><code>执行 fact.sh 3 这里的3就是末行的$1fact 3 对于fact来讲他是一个函数，3就是他的参数然后执行整个文件里面的函数3 不等于 1 执行elseecho $[3*`fact $[3-1]`]就是echo $[3*`fact 2`],但是这里不知fact 2是什么于是再次执行fact 2 $1=2 2 -eq 1 else echo $[2*`fact 1`],这里也不知道fact 1是什么fact 1$1=11 -eq 1 echo 1 这个函数的结果就是fact 1就是1替换上面的 echo $[2*1] fact 2 就是2  ;3*fact 2(fact 2就是2)=6</code></pre><h2 id="fork-炸弹"><a href="#fork-炸弹" class="headerlink" title="fork 炸弹"></a>fork 炸弹</h2><p>fork炸弹是一种恶意程序，它的内部是一个不断在fork进程的无限循环，实质是一个简单的递归程序。由于程序是递归的，如果没有任何限制，这会导致这个简单的程序迅速耗尽系统里面的所有资源<br>函数实现:<br><code>:(){ :|:&amp; };:</code> 这里的:就是一个函数名，故作玄虚。让你看不懂才写一个:所以把它换一个单词就行。<br><code>bomd(){ bomd | bomd &amp; };bomd</code><br>函数(){这里的bomd是一个执行函数在里面调用自己 管道的作用就是开启子进程 后台执行并行 }调用此函数<br>脚本实现</p><pre><code>cat Bomb.sh 脚本自身#!/bin/bashcat Bomb.sh./$0|./$0&amp;</code></pre><p>$0:脚本自身，用管道传给自己后台执行，并行执行<br>要给文件加上执行权限</p><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>   斐波那契数列又称黄金分割数列，因数学家列昂纳多·斐波那契以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：0、1、1、2、3、5、8、13、21、34、……，斐波纳契数列以如下被以递归的方法定义：F（0）=0，F（1）=1，F（n）=F(n-1)+F(n-2)（n≥2）利用函数，求n阶斐波那契数列</p><pre><code>#!/bin/bashfei(){        if [ &quot;$1&quot; -eq 0 ];then                echo 0        elif [ &quot;$1&quot; -eq 1 ];then                echo 1        else                echo $[`fei $[$1-1]`+`fei $[$1-2]`]        fi}fei 3大概计算方式fei 3fei 2 + fei 1fei 1 + fei 0echo 1        echo 0</code></pre><h1 id="trap-信号捕捉"><a href="#trap-信号捕捉" class="headerlink" title="trap 信号捕捉"></a>trap 信号捕捉</h1><p>格式：trap “commands” signals<br>当shell接收到signals指定的信号时（显示当前可用信号<code>kill -l</code>），执行commands命令<br>trap ‘触发指令’ 信号 进程收到系统发出的指定信号后，将执行自定义指令，而不会执行原操作<br>trap ‘’ 信号 忽略信号的操作<br>trap ‘-‘ 信号 恢复原信号的操作<br>trap -p 列出自定义信号操作<br>trap finish EXIT 当脚本退出时，执行finish函数</p><pre><code>#!/bin/bashtrap &#39;echo 当接受到后面指定的信号时，就执行这里的命令&#39; 2 15  #2(SIGINT 中止正在运行的进程；相当于CTRL+Ctrap -pfor (( i=1;i&lt;=10;i++ ));do        echo $i        sleep 1donetrap &#39;&#39; 2 15trap -pfor (( i=11;i&lt;=20;i++ ));do        echo $i        sleep 1donetrap &#39;-&#39; 2 15trap -pfor (( i=21;i&lt;=30;i++ ));do        echo $i        sleep 1done#!/bin/bashfinish(){        echo &quot;finish&quot;}trap finish exitfor ((i=1;i&lt;=50;i++));do        let sum+=i        sleep 1doneecho $sum</code></pre><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>变量：存储单个元素的内存空间<br>数组：存储多个元素的连续的内存空间，相当于多个变量的集合<br>数组名和索引<br>索引：编号从0开始，属于数值索引<br>注意：索引可支持使用自定义的格式，而不仅是数值格式，即为关联索引，bash4.0版本之后开始支持<br>bash的数组支持稀疏格式（索引不连续）<br>声明数组：<br>declare -a ARRAY_NAME<br>declare -A ARRAY_NAME: 关联数组<br>注意：两者不可相互转换</p><h2 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h2><p>数组元素的赋值<br>(1) 一次只赋值一个元素<br>数组名[下标 从0开始]=”值”<br><code>weekdays[0]=&quot;Sunday&quot;</code><br><code>weekdays[4]=&quot;Thursday&quot;</code></p><pre><code>[root@centos7 data]# title[0]=ceo 赋值[root@centos7 data]# title[1]=coo[root@centos7 data]# title[2]=cto[root@centos7 data]# title[3]=devops[root@centos7 data]# echo ${title[1]} 查看coo[root@centos7 data]# echo ${title[0]}ceo</code></pre><p>(2) 一次赋值全部元素<br>ARRAY_NAME=(“VAL1” “VAL2” “VAL3” …)</p><pre><code>title=(ceo coo cto)echo ${title[*]}filename=(f{1,2,3}.{txt,log})echo ${filename[0]}nmae=(`seq 10`)echo ${name[3]}alphe=({a..e})</code></pre><p>(3) 只赋值特定元素<br>ARRAY_NAME=([0]=”VAL1” [3]=”VAL2” …)<br>(4) 交互式数组值对赋值 read -a ARRAY</p><pre><code>[root@centos7 data]# read -a titleceo coo cto</code></pre><p>显示所有数组：<code>declare -a</code></p><h2 id="引用数组1"><a href="#引用数组1" class="headerlink" title="引用数组1"></a>引用数组1</h2><p>引用数组元素<br>${ARRAY_NAME[INDEX]}<br>注意：省略[INDEX]表示引用下标为0的元素<br>引用数组所有元素</p><pre><code>echo ${title[*]}echo ${title[@]}</code></pre><h2 id="数组的长度-数组中元素的个数"><a href="#数组的长度-数组中元素的个数" class="headerlink" title="数组的长度(数组中元素的个数)"></a>数组的长度(数组中元素的个数)</h2><pre><code>echo ${#title[*]}echo ${#title[@]}</code></pre><pre><code>for i in `seq 0 $[${#title[@]}-1]`;do echo Title is ${title[$i]};done列出数组，标准的数组下标=数组元素个数-1for i in `seq 0 ${#title[@]}`;do echo Title is ${title[$[$i-1]};done 假设不知道下标到多少个了，要在最后添加一个下标可以 查看数组的个数 echo ${#title[*]} title[${#title[*]}]=&quot;new title&quot; echo ${title[*]</code></pre><p>删除数组中的某元素：导致稀疏格式:意思是中间的元素被删除了会导致稀疏格式<br>unset ARRAY[INDEX],<br><code>unset title[1]</code><br>删除整个数组<br>unset ARRAY<br><code>unset title</code></p><h2 id="数组数据处理"><a href="#数组数据处理" class="headerlink" title="数组数据处理"></a>数组数据处理</h2><p><i class="fa fa-anchor"></i> 引用数组中的元素：<br>数组切片:${title[@]:offset:number}<br><code>echo ${title[*]:1:2}</code> <code>echo ${title[@]:1:2}</code><br>offset:要跳过的元素个数<br>number:要取出的元素个数<br>取偏移量之后的所有元素 <code>echo ${title[@]:offset}</code><br><i class="fa fa-anchor"></i> 向数组中追加元素：</p><pre><code>title[${#title[*]}]=avc 上面有提到不知道下角标${#title[*]} 数组长度</code></pre><p><i class="fa fa-anchor"></i> 关联数组：<br>declare -A ARRAY_NAME<br>ARRAY_NAME=([idx_name1]=’val1’ [idx_name2]=’val2’…)<br>注意：关联数组必须先声明再调用</p><pre><code>arr[&quot;a&quot;]=&quot;aaa&quot;arr[&quot;b&quot;]=&quot;bbb&quot;arr[&quot;c&quot;]=&quot;ccc&quot;这里的数组赋值后查看echo ${arr[b]}cccecho ${arr[c]}ccc显示都一样有问题，要声明 （提前声明）declare -A arr &lt;晚了,声明报错，必须提前声明&gt;-bash: declare: arr: cannot convert indexed to associative arrayunset arr 先删除他declare -A arr  先声明 后赋值arr[&quot;a&quot;]=aaaarr[&quot;b&quot;]=bbbarr[&quot;c&quot;]=cccecho ${arr[&quot;a&quot;]}aaaecho ${arr[&quot;b&quot;]}bbb</code></pre><h2 id="生成10个随机数保存于数组中，并找出其最大值和最小值"><a href="#生成10个随机数保存于数组中，并找出其最大值和最小值" class="headerlink" title="生成10个随机数保存于数组中，并找出其最大值和最小值"></a>生成10个随机数保存于数组中，并找出其最大值和最小值</h2><pre><code>#!/bin/bashdeclare -a numfor ((i=0;i&lt;10;i++));do        num[$i]=$RANDOM        if [ $i -eq 0 ];then                MAX=${num[$i]}                MIN=${num[$i]}        else                 if [ &quot;$MAX&quot; -lt ${num[$i]} ];then                        MAX=${num[$i]}                elif [ &quot;$MIN&quot; -gt ${num[$i]} ];then                        MIN=${num[$i]}                else                        true                fi        fidoneecho all random are ${num[*]}echo Max random is $MAXecho Max random is $MIN</code></pre><pre><code>#!/bin/bashdeclare -i min max declare -a nums        for ((i=0;i&lt;10;i++));do        nums[$i]=$RANDOM        [ $i -eq 0 ] &amp;&amp; min=${nums[$i]} &amp;&amp; max=${nums[$i]}&amp;&amp; continue        [ ${nums[$i]} -gt $max ] &amp;&amp; max=${nums[$i]}        [ ${nums[$i]} -lt $min ] &amp;&amp; min=${nums[$i]}        done        echo &quot;All numbers are ${nums[*]}&quot;         echo Max is $max        echo Min is $min</code></pre><h2 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h2>${#字符串}:返回字符串变量var的长度<pre><code>str=`echo {%a..z%} | tr -d`echo $strabcdefghijklmnopqrstuvwxyzecho ${%#str%}26</code></pre>${var:offset}:返回字符串变量var中从第offset个字符后（不包括第offset个字符）的字符开始，到最后的部分，offset的取值在0 到 ${#var}-1 之间(bash4.2后，允许为负值)<pre><code>echo ${str:5}fghijklmnopqrstuvwxyz</code></pre>${var:offset:number}：返回字符串变量var中从第offset个字符后（不包括第offset个字符）的字符开始，长度为number的部分<pre><code>[root@centos7 ~]# echo ${str:5:2}fg</code></pre>${var: -length}：取字符串的最右侧几个字符注意：冒号后必须有一空白字符<pre><code>[root@centos7 ~]# echo ${str: -3}xyz</code></pre>${var:offset:-length}：从最左侧跳过offset字符，一直向右取到距离最右侧lengh个字符之前的内容<pre><code>[root@centos7 ~]# echo ${str:4:-3} 抛头去尾efghijklmnopqrstuvw </code></pre>${var: -length:-offset}：先从最右侧向左取到length个字符开始，再向右取到距离最右侧offset个字符之间的内容，注意：-length前空格 centos6不支持<pre><code>[root@centos7 ~]# echo ${str: -4: -3} 取最后的四个，再从右往左除去三个数w[root@centos7 ~]# echo ${str: -5: -3} vw</code></pre><h2 id="字符串处理-自左而右"><a href="#字符串处理-自左而右" class="headerlink" title="字符串处理 自左而右"></a>字符串处理 自左而右</h2><p>基于模式取子串<br>${var#*word}：其中word可以是指定的任意字符<br>功能：自左而右，查找var变量所存储的字符串中，第一次出现的word, 删除字符串开头至第一次出现word字符串（含）之间的所有字符</p><pre><code>[root@centos7 ~]# rootinfo=`getent passwd root`[root@centos7 ~]# echo $rootinforoot:x:0:0:root:/root:/bin/bash[root@centos7 ~]# echo ${rootinfo#*root}:x:0:0:root:/root:/bin/bash[root@centos7 ~]# echo ${rootinfo##*root} 贪婪模式:/bin/bash</code></pre>${var##*word}：同上，贪婪模式，不同的是，删除的是字符串开头至最后一次由word指定的字符之间的所有内容<p>示例：</p><pre><code>file=&quot;var/log/messages&quot;  ${file#*/}: log/messages  ${file##*/}: messages  </code></pre><h2 id="字符串处理自右而左"><a href="#字符串处理自右而左" class="headerlink" title="字符串处理自右而左"></a>字符串处理自右而左</h2>${var%word*}：其中word可以是指定的任意字符<p>功能：自右而左，查找var变量所存储的字符串中，第一次出现的word, 删除字符串最后一个字符向左至第一次出现word字符串（含）之间的所有字符</p><pre><code>[root@centos7 ~]# echo ${rootinfo%root*}root:x:0:0:root:/[root@centos7 ~]# echo ${rootinfo%%:*}  贪婪模式 rootfile=&quot;/var/log/messages&quot;       word例子${file%/*}: /var/log</code></pre>${var%%word*}：同上，只不过删除字符串最右侧的字符向左至最后一次出现word字符之间的所有字符<p>示例：</p><pre><code>url=http://www.magedu.com:80${url##*:}  80${url%%:*}  http</code></pre><h2 id="字符串处理1"><a href="#字符串处理1" class="headerlink" title="字符串处理1"></a>字符串处理1</h2><p>查找替换${var/pattern/substr}：查找var所表示的字符串中，第一次被pattern所匹配到的字符串，以substr替换之</p><pre><code>[root@centos7 ~]# echo $urlhttp://www.magedu.com:80[root@centos7 ~]# echo ${url/www/ftp}http://ftp.magedu.com:80</code></pre><p>查找var所表示的字符串中，所有能被pattern所匹配到的字符串，以substr替换之</p><pre><code>[root@centos7 ~]# echo $urlhttp://www.magedu.com:80[root@centos7]# echo｛ｕｒｌ／／：／／＃｝合理忽略掉空格，这里是用全半角打开写的。若不这样会造成大片内容无法识别http#//www.magedu.com#80</code></pre><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><p>查找并删除<br>${var/pattern}：删除var表示的字符串中第一次被pattern匹配到的字符串</p><pre><code>[root@centos7 ~]# echo $urlhttp://www.magedu.com:80[root@centos7 ~]# echo ${url/:}http//www.magedu.com:80</code></pre><p>${var//pattern}：删除var表示的字符串中所有被pattern匹配到的字符串</p><pre><code>[root@centos7 ~]# echo ${url//:}http//www.magedu.com80</code></pre><p>${var/#pattern}：删除var表示的字符串中所有以pattern为行首匹配到的字符串</p><pre><code>[root@centos7 ~]# echo $aba.a.b.b.a.a++[root@centos7 ~]# echo ${ab/#a}.a.b.b.a.a++</code></pre><p>${var/%pattern}：删除var所表示的字符串中所有以pattern为行尾所匹配<br>到的字符串</p><pre><code>[root@centos7 ~]# echo $aba.a.b.b.a.a++[root@centos7 ~]# echo ${ab/+}a.a.b.b.a.a+[root@centos7 ~]# echo ${ab/++}a.a.b.b.a.a</code></pre><p>字符大小写转换<br>${var^^}：把var中的所有小写字母转换为大写${var,,}：把var中的所有大写字母转换为小写</p><pre><code>[root@centos7 ~]# echo $aba.a.b.b.a.a++[root@centos7 ~]# echo ${ab^^} A.A.B.B.A.A++</code></pre><p><img src="https://s2.ax1x.com/2019/07/19/ZvwVLF.png" alt=""></p><h2 id="高级变量用法-有类型变量"><a href="#高级变量用法-有类型变量" class="headerlink" title="高级变量用法-有类型变量"></a>高级变量用法-有类型变量</h2><p>Shell变量一般是无类型的，但是bash Shell提供了declare和typeset两个命令用于指定变量的类型，两个命令是等价的<br>declare [选项] 变量名<br>-r 声明或显示只读变量<br>-i 将变量定义为整型数<br>-a 将变量定义为数组<br>-A 将变量定义为关联数组<br>-f 显示已定义的所有函数名及其内容<br>-F 仅显示已定义的所有函数名<br>-x 声明或显示环境变量和函数<br>-l 声明变量为小写字母 declare –l var=UPPER -u 声明变量为大写字母 declare –u var=lower</p><h2 id="eval命令"><a href="#eval命令" class="headerlink" title="eval命令"></a>eval命令</h2><p>eval命令将会首先扫描命令行进行所有的置换，然后再执行该命令。该命令适用于那些一次扫描无法实现其功能的变量.该命令对变量进行两次扫描<br>示例：<br>[root@server ~]# CMD=whoami<br>[root@server ~]# echo $CMD<br>whoami<br>[root@server ~]# eval $CMD<br>root<br>[root@server ~]# n=10<br>[root@server ~]# echo {0..$n}<br>{0..10}<br>[root@server ~]# eval echo {0..$n}<br>0 1 2 3 4 5 6 7 8 9 10</p><h2 id="间接变量引用"><a href="#间接变量引用" class="headerlink" title="间接变量引用"></a>间接变量引用</h2><p>如果第一个变量的值是第二个变量的名字，从第一个变量引用第二个变量的值就称为间接变量引用<br>variable1的值是variable2，而variable2又是变量名，variable2的值为value，间接变量引用是指通过variable1获得变量值value的行为 variable1=variable2<br>variable2=value</p><h2 id="间接变量引用-1"><a href="#间接变量引用-1" class="headerlink" title="间接变量引用"></a>间接变量引用</h2><p>bash Shell提供了两种格式实现间接变量引用 eval tempvar=\$$variable1 ;tempvar=${!variable1}<br>示例：</p><pre><code>[root@server ~]# N=NAME [root@server ~]# NAME=wangxiaochun [root@server ~]# N1=${!N} [root@server ~]# echo $N1 wangxiaochun[root@server ~]# eval N2=\$$N [root@server ~]# echo $N2 wangxiaochunwangxiaochun</code></pre><h2 id="创建临时文件"><a href="#创建临时文件" class="headerlink" title="创建临时文件"></a>创建临时文件</h2><p>mktemp命令：创建并显示临时文件，可避免冲突<br>mktemp [OPTION]… [TEMPLATE]<br><code>mktemp fileXXX</code> 会生成一个随机文件<br>OPTION：<br>-d: 创建临时目录<br>-p DIR或–tmpdir=DIR: 指明临时文件所存放目录位置<br><code>mktemp -d -p /data/ dirXXX</code><br>示例：</p><pre><code>mktemp /tmp/testXXXtmpdir=`mktemp –d /tmp/testdirXXX`mktemp --tmpdir=/testdir testXXXXXX</code></pre><h2 id="安装复制文件"><a href="#安装复制文件" class="headerlink" title="安装复制文件"></a>安装复制文件</h2><p>install命令：<br>install [OPTION]… [-T] SOURCE DEST 单文件<br>install [OPTION]… SOURCE… DIRECTORY<br>install [OPTION]… -t DIRECTORY SOURCE…<br>install [OPTION]… -d DIRECTORY…创建空目录<br>选项：<br>-m MODE，默认755<br>-o OWNER 所有者<br>-g GROUP 所属组<br>示例：</p><pre><code>install -m 700 -o wang -g admins srcfile desfile install –m 770 –d /testdir/installdir</code></pre><p><code>install -m 700 -o pan -g p1 /etc/issue /data/issue_bak</code> 复制/etc/issue到/data/issue_bak/ 改文件权限为700，所有者为pan 用户，所属组p1。</p><h2 id="expect介绍"><a href="#expect介绍" class="headerlink" title="expect介绍"></a>expect介绍</h2><p>expect 是由Don Libes基于Tcl（ Tool Command Language ）语言开发的，主要应用于自动化交互式操作的场景，借助Expect处理交互的命令，可以将交互过程如：ssh登录，ftp登录等写在一个脚本上，使之自动化完成。尤其适用于需要对多台服务器执行相同操作的环境中，可以大大提高系统管理人员的工作效率</p><h2 id="expect命令"><a href="#expect命令" class="headerlink" title="expect命令"></a>expect命令</h2><p>expect 语法：<br>expect [选项] [ -c cmds ] [ [ -[f|b] ] cmdfile ] [ args ]<br>选项<br>-c：从命令行执行expect脚本，默认expect是交互地执行的示例：expect -c ‘expect “\n” {send “pressed enter\n”}<br>-d：可以输出输出调试信息<br>示例：expect -d ssh.exp<br>expect中相关命令<br>spawn：启动新的进程<br>send：用于向进程发送字符串<br>expect：从进程接收字符串<br>interact：允许用户交互<br>exp_continue 匹配多个字符串在执行动作后加此命令</p><h2 id="expect"><a href="#expect" class="headerlink" title="expect"></a>expect</h2><p>expect最常用的语法(tcl语言:模式-动作)<br>单一分支模式语法：<br>expect “hi” {send “You said hi\n”}<br>匹配到hi后，会输出“you said hi”，并换行<br>多分支模式语法：</p><pre><code>expect &quot;hi&quot; { send &quot;You said hi\n&quot; } \ &quot;hehe&quot; { send &quot;Hehe yourself\n&quot; } \ &quot;bye&quot; { send &quot;Good bye\n&quot; }</code></pre><p>匹配 hi,hello,bye任意字符串时，执行相应输出。等同如下： </p><pre><code>expect {&quot;hi&quot; { send &quot;You said hi\n&quot;} &quot;he&quot; { send &quot;Hehe yourself\n&quot;} &quot;bye&quot; { send &quot;Good bye\n&quot;}}</code></pre><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre><code>用scp程序从本系统下的/etc/fstab文件传到192.168.152.131这台主机上的/data目录下[root@centos7 data]# cat expect.sh #!/usr/bin/expectspawn scp /etc/fstab pan@192.168.152.131:/dataexpect { #第一次会输yes，但我没见过&quot;yes/no&quot; { send &quot;yes\n&quot;;exp_continue } &quot;password&quot; { send &quot;123456\n&quot; }} #第二次输密码expect eof</code></pre><p>SCP 传送文件，第一次会提示yes,第二次会提示密码，但我测试一直都是密码？</p><pre><code>用ssh登录到另外一台主机上并可以允许用户交互执行#!/usr/bin/expectspawn ssh pan@192.168.152.131expect {        &quot;yes/no&quot; { send &quot;yes\n&quot;;exp_continue }         &quot;password&quot; { send &quot;123456\n&quot; }}interactexpect eof</code></pre><h2 id="用变量实现"><a href="#用变量实现" class="headerlink" title="用变量实现"></a>用变量实现</h2><pre><code>#!/usr/bin/expectset ip 192.168.152.131set user panset password 123456 spawn ssh $user@$ipexpect {        &quot;yes/no&quot; { send &quot;yes\n&quot;;exp_continue }         &quot;password&quot; { send &quot;$password\n&quot; }}interact</code></pre><h2 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h2><pre><code>#!/usr/bin/expectset ip [lindex $argv 0]set user [lindex $argv 1]set password [lindex $argv 2]spawn ssh $user@$ipexpect {        &quot;yes/no&quot; { send &quot;yes\n&quot;;}        &quot;password&quot; { send &quot;$password\n&quot; }}interact#./ssh3.exp 192.168.152.131 pan 123456</code></pre><h2 id="执行多个命令"><a href="#执行多个命令" class="headerlink" title="执行多个命令"></a>执行多个命令</h2><pre><code>#!/usr/bin/expectset ip [lindex $argv 0]set user [lindex $argv 1]set password [lindex $argv 2]spawn ssh $user@$ipexpect {        &quot;yes/no&quot; { send &quot;yes\n&quot;;exp_continue }        &quot;password&quot; { send &quot;$password\n&quot; }}expect &quot;]#&quot; { send &quot;useradd expect\n&quot; }expect &quot;]#&quot; { send &quot;echo 123456 |passwd --stdin expect\n&quot; }send &quot;exit\n&quot;expect eof#./ssh4.exp 192.168.152.131 root 123456</code></pre><h2 id="shell脚本调用expect"><a href="#shell脚本调用expect" class="headerlink" title="shell脚本调用expect"></a>shell脚本调用expect</h2><pre><code>#!/bin/bash #想要shell中调用expectip=$1user=$2password=$3expect &lt;&lt;EOF #expect本身是一个交互式命令，所以想要把命令传入给expect执行，就必须用标准输入输出重定向传入进去。        set timeout 10        spawn ssh $user@$ip        expect {        &quot;yes/no&quot; { send &quot;yes\n&quot;;exp_continue }        &quot;password&quot; { send &quot;$password\n&quot; }                }        expect &quot;]#&quot; { send &quot;useradd hehe\n&quot; }        expect &quot;]#&quot; { send &quot;echo 123456 |passwd --stdin hehe\n&quot; }        expect &quot;]#&quot; { send &quot;exit\n&quot; }        expect eofEOF#./ssh5.sh 192.168.8.100 root 123456</code></pre><h2 id="expect循环修改"><a href="#expect循环修改" class="headerlink" title="expect循环修改"></a>expect循环修改</h2><pre><code>可以批量读入ip地址从而到达他们的主机进行修改#!/bin/bashwhile read ip;douser=rootpassword=123456expect &lt;&lt;EOF        spawn ssh $user@$ip        expect {        &quot;yes/no&quot; { send &quot;yes\n&quot;; }        &quot;password&quot; { send &quot;$password\n&quot; }                }        expect &quot;]#&quot; { send &quot;sed -i &#39;s/^SELINUX=.*/SELINUX=permissive/&#39; /etc/selinux/config \n&quot; }        expect &quot;]#&quot; { send &quot;exit\n&quot; }        expect eofEOFdone &lt; iplist.txt[root@centos7 data]# cat iplist.txt 192.168.152.131   </code></pre><h1 id="Linux组成"><a href="#Linux组成" class="headerlink" title="Linux组成"></a>Linux组成</h1><p>Linux: kernel+rootfs<br>kernel: 进程管理、内存管理、网络管理、驱动程序、文件系统、安全功能<br>rootfs:程序和glibc<br>库：函数集合, function, 调用接口（头文件负责描述）<br>过程调用：procedure，无返回值<br>函数调用：function<br>程序：二进制执行文件<br>内核设计流派：<br>单内核(monolithic kernel)：Linux<br>把所有功能集成于同一个程序<br>微内核(micro kernel)：Windows, Solaris<br>每种功能使用一个单独子系统实现</p><h2 id="Linux内核特点："><a href="#Linux内核特点：" class="headerlink" title="Linux内核特点："></a>Linux内核特点：</h2><p>支持模块化：.ko（内核对象）<br>如：文件系统，硬件驱动，网络协议等支持内核模块的动态装载和卸载<br>组成部分：<br>核心文件：/boot/vmlinuz-VERSION-release ramdisk：辅助的伪根系统<br>CentOS 5: /boot/initrd-VERSION-release.img<br>CentOS 6,7: /boot/initramfs-VERSION-release.img 模块文件：/lib/modules/VERSION-release</p><h2 id="Centos6启动流程"><a href="#Centos6启动流程" class="headerlink" title="Centos6启动流程"></a>Centos6启动流程</h2><p><a href="http://naotu.baidu.com/file/9a7347d324bea3f386351c42268cf850" target="_blank"><img src="https://s2.ax1x.com/2019/07/15/ZoddHS.png" alt="iwAR3T.jpg" title="请点击图片"></a>CentOS6启动流程<br>1.加载BIOS的硬件信息，获取第一个启动设备<br>2.读取第一个启动设备MBR的引导加载程序(grub)的启动信息<br>3.加载核心操作系统的核心信息，核心开始解压缩，并尝试驱动所有的硬件设备<br>4.核心执行init程序，并获取默认的运行信息<br>5.init程序执行/etc/rc.d/rc.sysinit文件<br>6.启动核心的外挂模块<br>7.init执行运行的各个批处理文件(scripts)<br>8.init执行/etc/rc.d/rc.local<br>9.执行/bin/login程序，等待用户登录<br>10.登录之后开始以Shell控制主机</p><h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><p>POST：Power-On-Self-Test，加电自检，是BIOS功能的一个主要部分。负责完成对<br>CPU、主板、内存、硬盘子系统、显示子系统、串并行接口、键盘等硬件情况的检测<br>ROM：BIOS，Basic Input and Output System，保存着有关计算机系统最重要<br>的基本输入输出程序，系统信息设置、开机加电自检程序和系统启动自举程序等RAM：CMOS互补金属氧化物半导体，保存各项参数的设定<br>按次序查找引导设备，第一个有引导程序的设备为本次启动设备<br>bootloader: 引导加载器，引导程序 windows: ntloader，仅是启动OS<br>Linux：功能丰富，提供菜单，允许用户选择要启动系统或不同的内核版本；把用户选定的内核装载到内存中的特定空间中，解压、展开，并把系统控制权移交给内核<br>LILO：LInux LOader<br>GRUB: GRand Unified Bootloader<br>GRUB 0.X: GRUB Legacy， GRUB2</p><h2 id="启动流程-1"><a href="#启动流程-1" class="headerlink" title="启动流程"></a>启动流程</h2><p><i class="fa fa-envelope-open"></i> MBR：第一个扇区<br>前446字节  bootloader<br>中间64字节  分区表<br>最后2字节   55AA<br><i class="fa fa-envelope-open"></i> GRUB:<br>primary boot loader : 1st stage，1.5 stage<br>secondary boot loader ：2nd stage，分区文件<br><i class="fa fa-envelope-open"></i> kernel：<br>自身初始化：<br>探测可识别到的所有硬件设备<br>加载硬件驱动程序（借助于ramdisk加载驱动）以只读方式挂载根文件系统<br>运行用户空间的第一个应用程序：/sbin/init</p><h2 id="启动流程-2"><a href="#启动流程-2" class="headerlink" title="启动流程"></a>启动流程</h2><p>ramdisk：<br>内核中的特性之一：使用缓冲和缓存来加速对磁盘上的文件访问，并加载相应的硬件驱动<br>ramdisk –&gt; ramfs 提高速度 CentOS 5: initrd<br>工具程序：mkinitrd CentOS 6，7: initramfs<br>工具程序：mkinitrd, dracut<br>系统初始化：<br>POST –&gt; BootSequence (BIOS) –&gt; Bootloader(MBR) –&gt; kernel(ramdisk) –&gt; rootfs(只读) –&gt; init（systemd）</p><h2 id="ramdisk管理"><a href="#ramdisk管理" class="headerlink" title="ramdisk管理"></a>ramdisk管理</h2><p><code>initramfs-2.6.32-754.el6.x86_64.img</code> 删除后的修复方法<br>ramdisk文件的制作：<br>(1) mkinitrd命令<br>为当前正在使用的内核重新制作ramdisk文件<br>mkinitrd /boot/initramfs-$(uname -r).img $(uname -r)<br>(2) dracut命令<br>为当前正在使用的内核重新制作ramdisk文件<br>dracut /boot/initramfs-$(uname -r).img $(uname -r)</p><p>系统启动流程</p><h2 id="init程序的类型："><a href="#init程序的类型：" class="headerlink" title="init程序的类型："></a>init程序的类型：</h2><p>SysV: init, CentOS 5之前配置文件：/etc/inittab：开机默认启动模式(0-6)。<br>Upstart: init,CentOS 6<br>配置文件：/etc/inittab,/etc/init/*.conf<br>Systemd：systemd, CentOS 7<br>配置文件：/usr/lib/systemd/system<br>/etc/systemd/system</p><h2 id="启动流程-3"><a href="#启动流程-3" class="headerlink" title="启动流程"></a>启动流程</h2><p>/sbin/init CentOS6之前<br>运行级别：为系统运行或维护等目的而设定；0-6：7个级别0：关机<br>1：单用户模式(root自动登录), single, 维护模式<br>2: 多用户模式，启动网络功能，但不会启动NFS；维护模式3：多用户模式，正常模式；文本界面4：预留级别；可同3级别<br>5：多用户模式，正常模式；图形界面<br>6：重启<br>默认级别：<code>3, 5</code><br>切换级别：<code>init #</code><br>查看级别：<code>runlevel</code>; <code>who -r</code></p><h2 id="init初始化"><a href="#init初始化" class="headerlink" title="init初始化"></a>init初始化</h2><p>init读取其初始化文件：/etc/inittab初始运行级别(RUN LEVEL)<br>系统初始化脚本<br>对应运行级别的脚本目录捕获某个关键字顺序<br>定义UPS电源终端/恢复脚本在虚拟控制台生成getty<br>在运行级别5初始化X</p><h2 id="etc-rc-d-rc-sysinit-系统初始化脚本"><a href="#etc-rc-d-rc-sysinit-系统初始化脚本" class="headerlink" title="/etc/rc.d/rc.sysinit: 系统初始化脚本"></a>/etc/rc.d/rc.sysinit: 系统初始化脚本</h2><p>(1) 设置主机名<br>(2) 设置欢迎信息<br>(3) 激活udev和selinux<br>(4) 挂载/etc/fstab文件中定义的文件系统<br>(5) 检测根文件系统，并以读写方式重新挂载根文件系统<br>(6) 设置系统时钟<br>(7) 激活swap设备<br>(8) 根据/etc/sysctl.conf文件设置内核参数<br>(9) 激活lvm及software raid设备<br>(10) 加载额外设备的驱动程序<br>(11) 清理操作</p><h2 id="CentOS-5的inittab文件"><a href="#CentOS-5的inittab文件" class="headerlink" title="CentOS 5的inittab文件"></a>CentOS 5的inittab文件</h2><p>每一行格式： id:runlevel:action:process id：是惟一标识该项的字符序列runlevels： 定义了操作所使用的运行级别action： 指定了要执行的特定操作<br>wait: 切换至此级别运行一次<br>respawn：此process终止，就重新启动之initdefault：设定默认运行级别；process省略sysinit：设定系统初始化方式<br>process：定义了要执行的进程<br>示例：<br>id:3:initdefault:<br>si::sysinit:/etc/rc.d/rc.sysinit<br>l0:0:wait:/etc/rc.d/rc 0<br>l1:1:wait:/etc/rc.d/rc 1…<br>l6:6:wait:/etc/rc.d/rc 6<br>ca::ctrlaltdel:/sbin/shutdown -t3 -r now</p><p><script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/highlight.min.js"></script></p><p><script>hljs.initHighlightingOnLoad();</script></p><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/styles/an-old-hope.min.css"><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;FZShuTi&quot;&gt;脚本..&lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="Document" scheme="http://yoursite.com/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>技巧集合</title>
    <link href="http://yoursite.com/2019/04/29/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2019/04/29/小技巧/</id>
    <published>2019-04-29T03:16:03.000Z</published>
    <updated>2019-08-23T02:57:48.443Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="FZShuTi">linux 小技巧+总结 </font></center><br><a id="more"></a></p><h1 id="simple-command"><a href="#simple-command" class="headerlink" title="simple command"></a>simple command</h1><pre><code>uname -a              # 查看Linux内核版本信息cat /proc/version     # 查看内核版本cat /etc/issue        # 查看系统版本lsb_release -a        # 查看系统版本  需安装 centos-releaselocale -a             # 列出所有语系locale                # 当前环境变量中所有编码hwclock               # 查看时间who                   # 当前在线用户w                     # 当前在线用户whoami                # 查看当前用户名logname               # 查看初始登陆用户名uptime                # 查看服务器启动时间sar -n DEV 1 10       # 查看网卡网速流量dmesg                 # 显示开机信息lsmod                 # 查看内核模块</code></pre><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><div class="alert alert-info"><i class=""></i><font color="black"><center>sed 执行系统命令。查找当前目录以及子目录中以 “.sh”,并改为以”.shell”结尾。</center></font><code>find ./a -type f  -regex &quot;.*/.sh$&quot; | sed -r -n &#39;s#(.*\.)sh$#mv &amp; \1shell#e&#39;</code> <font color="red"><br>-regex</font>: 使用正则表达式<br><code>&quot;.*/.sh$&quot;</code> <font size="4">给出的正则表达式必须要匹配完整的文件路径,比如：<code>find / -regex &quot;find&quot;</code> 这样子是找不到/usr/bin/find的，要像这样<code>find / -regex &quot;.*find&quot;</code>或者更精确一点<code>find / -regex &quot;.*/find&quot;</code></font> <font color="red"><br>&amp;</font>: 匹配前面找到的内容 <font color="red"><br>e</font>: 末尾的e表示<font color="red"># #这里允许执行命令然后得到结果#</font>,也就是<code>mv 前面匹配到的.sh文件 任意内容.shell</code><br></div><h2 id="Bash中-的用法和变量的间接引用"><a href="#Bash中-的用法和变量的间接引用" class="headerlink" title="Bash中${}的用法和变量的间接引用"></a>Bash中${}的用法和变量的间接引用</h2><pre><code>${STR^^}, 把STR中的所有小写字母转换为大写输出(不改变值)[root@junun ~]# str=abcde[root@junun ~]# echo ${str^^}ABCDE</code></pre><pre><code>${STR,,}, 把STR中的所有大写字母转换为小写输出(不改变值)[root@junun ~]# str1=ABCDE[root@junun ~]# echo ${str1,,}abcde</code></pre><h1 id="交互登录式shell的配置文件加载次序"><a href="#交互登录式shell的配置文件加载次序" class="headerlink" title="交互登录式shell的配置文件加载次序"></a>交互登录式shell的配置文件加载次序</h1><p><img src="https://s2.ax1x.com/2019/06/16/V7UGwt.png" alt=""></p><h1 id="linux使用dhclient自动获取IP"><a href="#linux使用dhclient自动获取IP" class="headerlink" title="linux使用dhclient自动获取IP"></a>linux使用dhclient自动获取IP</h1><p>获取IP: <code>dhclient eth1</code><br>查看结果:<br>-方法1: <code>ifconfig eth1</code><br>-方法2,显示更详细: <code>cat /var/lib/dhclient/dhclient.leases</code><br>释放IP: <code>dhclient -r</code><br>dhclient -r并没有真正释放IP，下一次执行dhclient eth1时，没有discover这个步骤，而是直接REQUEST上次IP。<br>在网络拓扑或者配置变化的情况下，获取不到IP，需要删除/var/lib/dhclient/dhclient.leases 文件</p><h1 id="PS1修改"><a href="#PS1修改" class="headerlink" title="PS1修改"></a>PS1修改</h1><pre><code>[root@Tiger data]# cat /etc/profile.d/panxiaohu.sh PS1=&#39;\[\033[1;40;33m\][\u@\h \W]\$ \[\033[0m\]&#39;     #注意引号&#39;PATH=/etc/profile.d/:$PATH&#39;</code></pre><h1 id="df"><a href="#df" class="headerlink" title="df"></a>df</h1><p><code>df -T</code> 可以查看文件系统类型</p><h1 id="文件重启"><a href="#文件重启" class="headerlink" title="文件重启"></a>文件重启</h1><p><code>cat /sbin/shutdown -t3 -r now</code> 三秒以后重启</p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><pre><code>ps -eaf           # 查看所有进程kill -9 PID       # 强制终止某个PID进程kill -15 PID      # 安全退出 需程序内部处理信号cmd &amp;             # 命令后台运行nohup cmd &amp;       # 后台运行不受shell退出影响ctrl+z            # 将前台放入后台(暂停)jobs              # 查看后台运行程序bg 2              # 启动后台暂停进程fg 2              # 调回后台进程pstree            # 进程树vmstat 1 9        # 每隔一秒报告系统性能信息9次sar               # 查看cpu等状态lsof file         # 显示打开指定文件的所有进程lsof -i:32768     # 查看端口的进程renice +1 180     # 把180号进程的优先级加1</code></pre><h1 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3OTgyMDcwNg==&amp;mid=2650637412&amp;idx=1&amp;sn=ffb9ec56b91bdcbd93c042da254375e7&amp;chksm=87a486a9b0d30fbfe01b5e9f714c49944cf5f292d14e3827f6958262eb2d66e6d2b65662d4fd&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1564102447782&amp;sharer_shareid=837dfcba2206d025ecf6e6476b699921#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzA3OTgyMDcwNg==&amp;mid=2650637412&amp;idx=1&amp;sn=ffb9ec56b91bdcbd93c042da254375e7&amp;chksm=87a486a9b0d30fbfe01b5e9f714c49944cf5f292d14e3827f6958262eb2d66e6d2b65662d4fd&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1564102447782&amp;sharer_shareid=837dfcba2206d025ecf6e6476b699921#rd</a></p><h1 id="开机启动脚本顺序"><a href="#开机启动脚本顺序" class="headerlink" title="开机启动脚本顺序"></a>开机启动脚本顺序</h1><pre><code>/etc/profile/etc/profile.d/*.sh~/bash_profile~/.bashrc/etc/bashrc</code></pre><h1 id="sed-替换内容"><a href="#sed-替换内容" class="headerlink" title="sed 替换内容"></a>sed 替换内容</h1><p><font color="red"><i class="fa fa-question-circle fa-2x"></i></font>将seq 10返回内容的1,5,8替换成xxx</p><pre><code>seq 10 | sed -e{1,5,8}&#39;s#.*#xxx#&#39; </code></pre><h1 id="显示已知用户的信息"><a href="#显示已知用户的信息" class="headerlink" title="显示已知用户的信息"></a>显示已知用户的信息</h1><p><code>lslogins</code></p><h1 id="特殊变量：shell对一些参数做特殊处理-这些参数只能被引用而不能被赋值"><a href="#特殊变量：shell对一些参数做特殊处理-这些参数只能被引用而不能被赋值" class="headerlink" title="特殊变量：shell对一些参数做特殊处理,这些参数只能被引用而不能被赋值"></a>特殊变量：shell对一些参数做特殊处理,这些参数只能被引用而不能被赋值</h1><p><code>$#</code>  传递到脚本的参数个数<br><code>$*</code>  显示所有向脚本传递的参数                  #与位置变量不同，此选项参数可超过9个<br><code>$$</code>  获取当前shell的进程号<br><code>$!</code>  执行上一个指令的进程号<br><code>$?</code>  获取执行的上一个指令的返回值              #0为执行成功，非零为执行失败<br><code>$-</code>  显示shell使用的当前选项，与set命令功能相同<br><code>$@</code>  与$*相同，但是使用时加引号，并在引号中返回每个参数</p><p><script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/highlight.min.js"></script></p><p><script>hljs.initHighlightingOnLoad();</script></p><p><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/styles/an-old-hope.min.css"><br><code class="Bash" style="font-size: 18px; border:0px solid #000 ;"></code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;FZShuTi&quot;&gt;linux 小技巧+总结 &lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="Document" scheme="http://yoursite.com/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2018/08/28/%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>http://yoursite.com/2018/08/28/练习题/</id>
    <published>2018-08-28T09:28:03.000Z</published>
    <updated>2019-08-12T12:17:59.108Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="FZShuTi">题目归档</font></center><br><a id="more"></a></p><h1 id="描述linux目录结构以及目录结构命名规定"><a href="#描述linux目录结构以及目录结构命名规定" class="headerlink" title="描述linux目录结构以及目录结构命名规定"></a>描述linux目录结构以及目录结构命名规定</h1><p>所有的目录都是按照一定的类别有规律的组织和命名的.FHS（目录层次结构）是Linux的目录规范标准.不要使用特殊字符来命令目录名。和glob字符或许会有冲突<br>FHS（目录层次结构）: <a href="http://www.pathname.com/fhs/" target="_blank" rel="noopener">http://www.pathname.com/fhs/</a><br>总结流程图:<a href="http://naotu.baidu.com/file/90bbd454b261551260c4e75ca6564f0d" target="_blank" rel="noopener">http://naotu.baidu.com/file/90bbd454b261551260c4e75ca6564f0d</a></p><h2 id="显示-etc目录下，所有以-d结尾的文件或目录"><a href="#显示-etc目录下，所有以-d结尾的文件或目录" class="headerlink" title="显示/etc目录下，所有以.d结尾的文件或目录"></a>显示/etc目录下，所有以.d结尾的文件或目录</h2><p><code>ls -d /etc/*.d</code> <font color="red">-d</font> 只显示当前文件夹</p><h2 id="显示-etc目录下，所有-conf结尾，且以m-n-r-p开头的文件或目录"><a href="#显示-etc目录下，所有-conf结尾，且以m-n-r-p开头的文件或目录" class="headerlink" title="显示/etc目录下，所有.conf结尾，且以m,n,r,p开头的文件或目录"></a>显示/etc目录下，所有.conf结尾，且以m,n,r,p开头的文件或目录</h2><p><code>ls /etc/[mnrp]*.conf</code></p><h2 id="创建-app-rootdir目录，并复制-root下所有文件到该目录内，-要求保留原有权限"><a href="#创建-app-rootdir目录，并复制-root下所有文件到该目录内，-要求保留原有权限" class="headerlink" title="创建/app/rootdir目录，并复制/root下所有文件到该目录内， 要求保留原有权限"></a>创建/app/rootdir目录，并复制/root下所有文件到该目录内， 要求保留原有权限</h2><pre><code>[root@centos7 /]# mkdir -p /app/rootdir[root@centos7 /]# cp -a /root/ !$cp -a /root/ /app/rootdir[root@centos7 /]# ls /app/rootdir/root</code></pre><h2 id="使用命令行展开功能，创建-tmp-a1-tmp-a2-tmp-a1-a-tmp-a1-b，在-tmp目录下创建目录：x-y-x-z-q-y-q-z"><a href="#使用命令行展开功能，创建-tmp-a1-tmp-a2-tmp-a1-a-tmp-a1-b，在-tmp目录下创建目录：x-y-x-z-q-y-q-z" class="headerlink" title="使用命令行展开功能，创建/tmp/a1, /tmp/a2, /tmp/a1/a, /tmp/a1/b，在/tmp目录下创建目录：x_y, x_z, q_y, q_z"></a>使用命令行展开功能，创建/tmp/a1, /tmp/a2, /tmp/a1/a, /tmp/a1/b，在/tmp目录下创建目录：x_y, x_z, q_y, q_z</h2><p><code>mkdir {x,q}_{y,z}</code></p><h2 id="总结用户、用户组管理命令并演示命令以及常见用法"><a href="#总结用户、用户组管理命令并演示命令以及常见用法" class="headerlink" title="总结用户、用户组管理命令并演示命令以及常见用法"></a>总结用户、用户组管理命令并演示命令以及常见用法</h2><p>useradd 创建用户 <font color="red"> <a href="http://holyghost.me/2018/08/28/linux%20command/" target="_blank" rel="noopener">http://holyghost.me/2018/08/28/linux%20command/</a><br>-u</font> 指定UID <font color="red"><br>-g</font> 指定所属组或gid <font color="red"><br>-c</font> “文字” 用户的注释信息 <font color="red"><br>-d</font> 指定家目录 <font color="red"><br>-s</font> 指定用户的默认登录的shell,可用列表在/etc/shells文件中 <font color="red"><br>-G</font> 指定用户的附加组，要先创建<br><code>useradd -u 678 -g pan -c &quot;测试&quot; -d /data -s /bin/sh aaa</code><br>userdel -r username 删除用户及所属的家目录和邮件<br>groups username 显示linux用户所属的组<br>groupadd groupname 创建组<br><code>usermod -g root username</code>将用户username的组修改为root组<br><code>usermod -a -G</code>-a -G 无限增加到附加组，可拥有多个附加组.将a1添加附加组user3 usermod -a -G user3 a1</p><pre>某一用户拥有多个附加组之后，使用usemod -G会修改附加组，则多个组消失掉变成唯一当前修改的附加组</pre><h2 id="文件权限，属主属组管理命令有哪些，并演示命令以及用法"><a href="#文件权限，属主属组管理命令有哪些，并演示命令以及用法" class="headerlink" title="文件权限，属主属组管理命令有哪些，并演示命令以及用法"></a>文件权限，属主属组管理命令有哪些，并演示命令以及用法</h2><p>chmod 更改文件权限：<code>chmod 777 a</code>  <a href="http://holyghost.me/2018/08/28/linux%20command/" target="_blank" rel="noopener">http://holyghost.me/2018/08/28/linux%20command/</a><br>chown 更改文件拥有者和所属组：<code>chown USER:GROUP 对象</code>  <code>chown USER 对象</code>　<code>chown :group 对象</code><br>chgrp 改变文件或目录所属的组: chgrp - R book /opt/local /book 改变/opt/local /book/及其子目录下的所有文件的属组为book</p><ol start="8"><li>创建用户gentoo，附加组为bin和root，默认shell为/bin/csh，注释信息为 “Gentoo Distribution”<br><code>useradd  -G bin,root -s /bin/sh -c &quot;Gentoo Distribution&quot;  gentoo</code></li></ol><h1 id="1、总结vim命令行模式常见快捷方式，以及vim查找，替换的方法"><a href="#1、总结vim命令行模式常见快捷方式，以及vim查找，替换的方法" class="headerlink" title="1、总结vim命令行模式常见快捷方式，以及vim查找，替换的方法"></a>1、总结vim命令行模式常见快捷方式，以及vim查找，替换的方法</h1><p><strong><code>:.,$y</code></strong>复制当前行到末尾行<br><strong><code>:!</code></strong> 调用系统命令，可临时执行 <table><tr><td> 使vim设置永久生效:vim /etc/vimrc   把设置写到这个文件的最后，对所有账户生效<br>set nu 显示行号 　　set nonu 取消行号<br>set ic 不区分大小写　set noic 取消不区分大小写<br>set ts=4    设置tab键长度<br>set sw=4    设置自动缩进的tab键长度 </td></tr></table>   <code>vim  /root/.vimrc    也可以把设置写到此文件，只对root生效</code> </p><h2 id="vim字符替换"><a href="#vim字符替换" class="headerlink" title="vim字符替换"></a>vim字符替换</h2><p><table><tr><td bgcolor="#FFF0F5"><font size="4">:%s/this/that 每一行的第一个this被替换成that<br>:%s/this/that/g 将文本中所有的this替换成that %从每一行的开头到结尾   s表示替换<br>:1,5 s/old/new/g  #替换第一行到第5行中所有匹配的内容</font></td></tr></table>.</p><pre><code>：s/a/b/   替换当前行第一个a为b：s/a/b/g  替换当前行所有a为b：%s/a/b/  替换每一行的第一个a为b：%s/a/b/g 替换每一行中所有a为b</code></pre><h2 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h2><p>u撤销上一步<br>i当前插入，I行首插入。<br>a当前字符插入(光标后一位插入)，A行尾插入。<br>o表示：本行回车到下一行插入，O上一行插入。<br>x删除光标所在字符，X向前删除一个字符。<br>dd删除光标所在的行，dG删除光标所在开始行到文件尾的所有字符。<br>J合并两行。<font color="#FF6437"><br>行操作：</font>home 键或^键行首，$或end行尾<br>dd删除一行Ndd(删除本行与下一行)。<br>yy复制一行，Nyy复制n行，p将复制行粘贴，p向光标下一行粘。(N表示数字) <font color="#FF6437"><br>词操作</font>:dw删除一个词，y+$复制至行尾。y+^复制至行首。yw复制一个词。<strong><font color="red">:.,$y</font></strong>  复制当前行到末尾  <table><tr><td bgcolor="#778899">v模式:编程的时候需要进行多行注释：         （删除是要将光标移到这个词的行首，如果光标不在行首则删除光标之后的字母。）<br>块操作：D或d+$删除至行尾  d+^删除至行首<br>1、注释：ctrl+v进入列编辑模式<br>2、向下或向上移动光标 （ctrl L 向下全部选中）<br>3、把需要注释的行开头的开头标记起来<br>4、然后按大写的I<br>5、再插入注释符，比如“#”<br>6、再按Esc，就会全部注释了<br>删除多行注释：按ctrl+v进入列编辑模式;向下或向上移动光标；选中注释部  分然后按d,就会删除注释符号。</td></tr></table>  </p><p><table><tr><td bgcolor="#FFF0F5">vim编辑器： :wq 可以保存外 :w +路径+文件名直接保存在某个位置和重命名<font color="blue">:w 路径/文件名</font><br>ZZ 保存退出　　:x 保存退出　　:!命令<font color="blue">:!ifconfig</font><br>vi的行定位功能:<br>ctrl+f 向前卷动一个屏幕<br>ctrl+b 向后卷动一个屏幕<br>G     到文件最后一行行首<br>:$    到文件最后一行行尾<br>mG    到指定行，m为目标行数 或者mgg<br>set nu  显示行号<br>/内容   查找指定内容<br>n   查找下一个<br>N   回到前一个<br>？  寻找上一个 </td></tr></table> <table><tr><td bgcolor="#4682B4"><font color="#FFF8DC"><font size="4">/^字符串  查找以字符串开始的行<br>/字符串$  查找以字符串结尾的行<br>/a.b      查找字符串a任意字符b   vim替换<br>r              替换当前光标字符<br>:r 文件名      在光标当前位置载入另一个文件</font></font></td></tr></table>. </p><h1 id="2、总结脚本中运算符、逻辑运算以及用法"><a href="#2、总结脚本中运算符、逻辑运算以及用法" class="headerlink" title="2、总结脚本中运算符、逻辑运算以及用法"></a>2、总结脚本中运算符、逻辑运算以及用法</h1><p>按照文件类型判断</p><p><table><tr><th>测试选型</th><th>作用</th></tr><tr><td>-b 文件</td><td>判断该文件是否存在，并且是否为块设备文件(是块设备文件为真)</td></tr><tr><td>-c 文件</td><td>判断该文件是否存在，并且是否为字符设备文件(是字符设备文件为真)</td></tr><tr><td>-d 文件</td><td>判断该文件是否存在，并且是否为目录文件(是目录为真)</td></tr><tr><td>-e 文件</td><td>判断该文件是否存在，(存在为真)</td></tr><tr><td>-f 文件</td><td>判断该文件是否存在，并且是否为普通文件(是普通文件为真)</td></tr><tr><td>-L 文件</td><td>判断该文件是否存在，并且是否为符号链接文件(是符号链接文件为真)</td></tr><tr><td>-p 文件</td><td>判断文件是否存在，并且是否为管道文件(是管道文件为真)</td></tr><tr><td>-s 文件</td><td>判断该文件是否存在，并且是否为非空(非空为真)</td></tr><tr><td>-S 文件</td><td>判断该文件是否存在，并且是否为套接字文件(是套接字文件为真)</td></tr></table> 判断文件是否存在(两种格式)<br><code>test -e /root/install.log</code><br><code>-e /root/install.log]</code><br>第一个判断命令如果正确执行，则打印”yes”，否则打印”no”<br><code>[ -d /root ] &amp;&amp; echo &quot;yes&quot; || &quot;no&quot;</code>注意空格 </p><h2 id="按照文件权限进行判断"><a href="#按照文件权限进行判断" class="headerlink" title="按照文件权限进行判断"></a>按照文件权限进行判断</h2><p><table><tr><th>测试选项</th><th>作用</th></tr><tr><td>-r 文件</td><td>判断该文件是否存在，并且是否该文件拥有读权限(有读权限为真)</td></tr><tr><td>-w 文件</td><td>判断该文件是否存在，并且是否该文件拥有写权限</td></tr><tr><td>-x 文件</td><td>判断该文件是否存在，并且是否该文件拥有执行权限(有执行权限为真)</td></tr><tr><td>-u 文件</td><td>判断该文件是否存在，并且是否该文件拥有SUID权限(有SUID权限为真)</td></tr><tr><td>-g 文件</td><td>判断该文件是否存在，并且是否该文件拥有SGID权限(有SGID权限为真)</td></tr><tr><td>-k 文件</td><td>判断该文件是否存在，并且是否该文件拥有SBit权限(有SBit权限为真)</td></tr></table>.</p><pre><code>test -w /data/a.txt &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot; 他只要UGO只要有一个有写权限就会执行出来</code></pre><h2 id="两个文件之间进行比较"><a href="#两个文件之间进行比较" class="headerlink" title="两个文件之间进行比较"></a>两个文件之间进行比较</h2><p><table><tr><th>测试选项</th><th>作用</th></tr><tr><td>文件1 -nt 文件2</td><td>判断文件1的修改时间是否比文件2的新(如果新则为真)</td></tr><tr><td>文件1 -ot 文件2</td><td>判断文件1的修改时间是否比文件2的旧(如果旧则为真)</td></tr><tr><td>文件1 -ef 文件2</td><td>判断文件1是否和文件2的Inode号一致，可以理解为两个文件是否为同一个文件。这个判断用于判断硬链接是很好的方法</td></tr></table><br>比较硬链接的文件Inode号</p><pre><code>test a.txt -ef /tmp/a1.txt &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</code></pre><h2 id="两个整数之间比较"><a href="#两个整数之间比较" class="headerlink" title="两个整数之间比较"></a>两个整数之间比较</h2><p><table><tr><th>测试选项</th><th>作用</th></tr><tr><td>整数1 -eq 整数2</td><td>判断整数1是否和整数2相等 (相等为真)</td></tr><tr><td>整数1 -ne 整数2</td><td>判断整数1是否和整数2不相等 (不相等为真)</td></tr><tr><td>整数1 -gt 整数2</td><td>判断整数1 是否大于整数2 (大于为真)</td></tr><tr><td>整数1 -lt 整数2</td><td>判断整数1是否小于整数2 (小于为真)</td></tr><tr><td>整数1 -ge 整数2</td><td>判断整数1是否大于等于整数2 (大于等于为真)</td></tr><tr><td>整数1 -le 整数2</td><td>判断整数1是否小于等于整数2 (小于等于真)</td></tr></table></p><pre><code>[ 23 -gt 22 ] &amp;&amp; echo &quot;Y&quot; || echo &quot;N&quot;  注意[]左右的空格</code></pre><h2 id="字符串的判断"><a href="#字符串的判断" class="headerlink" title="字符串的判断"></a>字符串的判断</h2><p><table><tr><th>测试选项</th><th>作用</th></tr><tr><td>-z 字符串</td><td>判断字符串是否为空(为空返回真)</td></tr><tr><td>-n 字符串</td><td>判断字符串是否为非空(非空返回真)</td></tr><tr><td>子串1 == 子串2</td><td>判断子串1是否和子串2相等(相等返回真)</td></tr><tr><td>子串1 ！= 子串2</td><td>判断字符串1是否和字符串2不相等(不相等为真)</td></tr></table>.</p><pre><code>[root@Tiger data]# name=scYou have new mail in /var/spool/mail/root[root@Tiger data]# [ -z &quot;$name&quot; ] &amp;&amp; echo &quot;Y&quot; || echo &quot;N&quot;N</code></pre><pre><code>[root@Tiger data]# aa=abc[root@Tiger data]# bb=abc[root@Tiger data]# [ &quot;$aa&quot; == &quot;$bb&quot; ] &amp;&amp; echo &quot;y&quot; || echo &quot;N&quot;y</code></pre><h2 id="多重条件判断"><a href="#多重条件判断" class="headerlink" title="多重条件判断"></a>多重条件判断</h2><p><table><tr><th>测试选项</th><th>作用</th></tr><tr><td>判断1 -a 判断2</td><td>逻辑与，判断1和判断2都成立，最终的结果才为真</td></tr><tr><td>判断1 -o 判断2</td><td>逻辑或，判断1和判断2有一个成立，最终的结果就为真</td></tr><tr><td>! 判断</td><td>逻辑非，使原始的判断式取反</td></tr></table></p><pre><code>[root@Tiger data]# aa=24[root@Tiger data]# [ -n &quot;$aa&quot; -a &quot;$aa&quot; -gt 23 ] &amp;&amp; echo &quot;yes&quot; || echo &quot;NO&quot;yes[root@Tiger data]# [ -z &quot;$aa&quot; -a &quot;$aa&quot; -gt 23 ] &amp;&amp; echo &quot;yes&quot; || echo &quot;NO&quot;  NO</code></pre><h2 id="3、编写脚本-root-bin-backup-sh，可实现每日将-etc-目录备份到-root-etcYYYY-mm-dd中"><a href="#3、编写脚本-root-bin-backup-sh，可实现每日将-etc-目录备份到-root-etcYYYY-mm-dd中" class="headerlink" title="3、编写脚本/root/bin/backup.sh，可实现每日将/etc/目录备份到 /root/etcYYYY-mm-dd中"></a>3、编写脚本/root/bin/backup.sh，可实现每日将/etc/目录备份到 /root/etcYYYY-mm-dd中</h2><pre><code>#!/bin/bashecho &quot;Start Backup&quot;  sleep 5cp -av /etc/ /root/data/etc`date +%F`echo &quot;backup is finished&quot;</code></pre><h2 id="4、编写脚本-root-bin-nologin-sh和login-sh-实现禁止和充许普通用户登录系统"><a href="#4、编写脚本-root-bin-nologin-sh和login-sh-实现禁止和充许普通用户登录系统" class="headerlink" title="4、编写脚本/root/bin/nologin.sh和login.sh,实现禁止和充许普通用户登录系统"></a>4、编写脚本/root/bin/nologin.sh和login.sh,实现禁止和充许普通用户登录系统</h2><pre><code>禁止普通用户登录系统#!/bin/bashread -p &quot;请输入禁止登陆用户名:  useruid=$(id $user | sed -r -n &#39;s/.*=([0-9]{3,}).*$/\1/p&#39;)[ $uid -ge 500 ] &amp;&amp; usermod -s /bin/nologin $user || echo &quot;该用户为系统用户，无法禁止&quot;echo &quot;该用户已经禁止登陆&quot;</code></pre><pre><code>允许普通用户登录系统#!/bin/bashread -p &quot;请输入允许登录的用户： useruid=$( id $user | sed -r -n &#39;s/.*=([0-9]{3,}).*$/\1/p&#39; )[ $uid -ge 500 ] &amp;&amp; usermod -s /bin/bash $user || echo &#39;该用户为系统用户&#39;echo &#39;该用户已允许登陆&#39;</code></pre><h2 id="5、编写脚本-root-bin-disk-sh-显示当前硬盘分区中空间利用率最大的值"><a href="#5、编写脚本-root-bin-disk-sh-显示当前硬盘分区中空间利用率最大的值" class="headerlink" title="5、编写脚本/root/bin/disk.sh,显示当前硬盘分区中空间利用率最大的值"></a>5、编写脚本/root/bin/disk.sh,显示当前硬盘分区中空间利用率最大的值</h2><p><code>df | grep /dev/sd | grep -o  &#39;[0-9]\+%&#39; | sort -nr | head -1</code></p><h1 id="3-1-查找-var-目录下不属于root、lp、gdm的所有文件"><a href="#3-1-查找-var-目录下不属于root、lp、gdm的所有文件" class="headerlink" title="3 1.查找/var/目录下不属于root、lp、gdm的所有文件"></a>3 1.查找/var/目录下不属于root、lp、gdm的所有文件</h1><p><code>find /var/ -not -user root -a -not -user lp -a -not -user gdm;</code></p><h2 id="2-统计-etc-init-d-functions文件中每个单词的出现次数，并排序-用grep和sed两种方法分别实现"><a href="#2-统计-etc-init-d-functions文件中每个单词的出现次数，并排序-用grep和sed两种方法分别实现" class="headerlink" title="2.统计/etc/init.d/functions文件中每个单词的出现次数，并排序(用grep和sed两种方法分别实现)"></a>2.统计/etc/init.d/functions文件中每个单词的出现次数，并排序(用grep和sed两种方法分别实现)</h2><pre><code>$ cat /etc/init.d/functions|tr -c &#39;[:alpha:]&#39; &#39;\n&#39;|tr -s &#39;\n&#39; | sort | uniq -c | sort -nr$ sed -nre &#39;s/[^[:alnum:]]+/\n/g&#39; -e &#39;s/[0-9]/\n/gp&#39; /etc/init.d/functions|sort|uniq -c|sort -n$ grep -Eo &quot;\&lt;[[:alpha:]]+[[:alnum:]]+\&gt;&quot; /etc/init.d/functions | sort | uniq -c | sort -n</code></pre><div class="alert alert-success"><br>[:alpha:] 表示任何大小写字母<br>tr　-c, 用集合1中的字符串替换，要求字符集为ASCII<br>　　-s, 即将重复出现字符串压缩为一个字符串<br>[:alnum:] 任意字符<br>sort 将文本文件内容加以排序<br>　　-n 依照数值的从小到大排序。<br>　　-r 以相反的顺序来排序。<br>uniq -c或–count 在每列旁边显示该行重复出现的次数<br>[:alnum:] 表示字母和数字<br>\&lt; #锚定单词的开始，如:<br><code>&#39;\&lt;\grep&#39;匹配包含以grep开头的单词的行&#39;</code>  </div><h2 id="3-利用sed取出ifconfig命令本机的IPV4地址"><a href="#3-利用sed取出ifconfig命令本机的IPV4地址" class="headerlink" title="3.利用sed取出ifconfig命令本机的IPV4地址"></a>3.利用sed取出ifconfig命令本机的IPV4地址</h2><p><code>ifconfig | sed -nr &#39;2s/.*t (.*) net.*/\1/p&#39;</code></p><h2 id="4-总结yum的配置和使用，包括yum仓库的创建"><a href="#4-总结yum的配置和使用，包括yum仓库的创建" class="headerlink" title="4.总结yum的配置和使用，包括yum仓库的创建"></a>4.总结yum的配置和使用，包括yum仓库的创建</h2><p><code>yum repolist</code> 查看仓库信息<br>仓库的元数据<br><code>yum history</code> 查看yum安装历史<br><code>yum history info 2</code> 查看历史中的第二项<br><img src="https://s2.ax1x.com/2019/05/04/EauSmR.png" alt="">yum客户端配置文件：<br><code>/etc/yum.conf</code>：为所有仓库提供公共配置<code>/etc/yum.repos.d/*.repo</code>：为仓库的指向提供配置仓库指向的定义：<pre>[repositoryID]<br>name=Some name for this repository<br>baseurl=url://path/to/repository/<br>enabled={1|0}<br>gpgcheck={1|0}<br>gpgkey=URL<br>enablegroups={1|0}</pre></p><h2 id="5-编写系统初始化脚本reset-sh-包括别名，提示符颜色，yum仓库配置文件"><a href="#5-编写系统初始化脚本reset-sh-包括别名，提示符颜色，yum仓库配置文件" class="headerlink" title="5.编写系统初始化脚本reset.sh,包括别名，提示符颜色，yum仓库配置文件"></a>5.编写系统初始化脚本reset.sh,包括别名，提示符颜色，yum仓库配置文件</h2><pre><code>#!/bin/bashc=&quot;alias cdnet=&#39;cd /etc/sysconfig/network-scripts&#39;&quot;a=&quot;alias ednet=&#39;vim /etc/sysconfig/network-scripts/ifcfg-ens33&#39;&quot;echo $c &gt;&gt; /root/.bashrcecho $a &gt;&gt; /root/.bashrcsource /root/.bashrcecho -e &quot;PS1=\&quot;\e[33m[\u@\h \W]\$\e[m\&quot;&quot; &gt; /etc/profile.d/env.shsource /etc/profile.d/env.shecho &#39;PATH=/data/bin:$PATH&#39; &gt; /etc/profile.d/input.shsource /etc/profile.d/input.shchmod +x /etc/profile.d/*mkdir /data/basemount /dev/sr0 /data/base[ -d /etc/yum.repos.d/bak ] &amp;&amp; echo &quot;yes&quot; exit || mkdir /etc/yum.repos.d/bakmv /etc/yum.repos.d/*.repo  /etc/yum.repos.d/baktouch /etc/yum.repos.d/base.repoecho -e &quot;[base]\nname=cdrom\nbaseurl=file:///data/base\ngpgcheck=0&quot;&gt;&gt;/etc/yum.repos.d/base/repo</code></pre><h2 id="6-安装tree-lftp-telnet等包"><a href="#6-安装tree-lftp-telnet等包" class="headerlink" title="6.安装tree,lftp,telnet等包"></a>6.安装tree,lftp,telnet等包</h2><p><code>yum install tree ftp lftp telnet</code></p><h2 id="7-在centos7上编译安装apache2-4源码包，并启动此服务"><a href="#7-在centos7上编译安装apache2-4源码包，并启动此服务" class="headerlink" title="7.在centos7上编译安装apache2.4源码包，并启动此服务"></a>7.在centos7上编译安装apache2.4源码包，并启动此服务</h2><p>yum groupinstall “development tools” 使用组包安装<br>tar -xf httpd-2.4.39.tar.gz<br>cd httpd-2.4.39/<br>通过./configure –指定软件总目录，二进制目录和其他功能<br>make 使用make命令创建make文档文档中存放着各种文件路径<br>make install 讲各文件复制到所对应的目录<br>systemctl start apache 启动服务 </p><h1 id="4-1、磁盘lvm管理，完成下面要求，并写出详细过程："><a href="#4-1、磁盘lvm管理，完成下面要求，并写出详细过程：" class="headerlink" title="4 1、磁盘lvm管理，完成下面要求，并写出详细过程："></a>4 1、磁盘lvm管理，完成下面要求，并写出详细过程：</h1><p>  1) 创建一个至少有两个PV组成的大小为20G的名为testvg的VG;要求PE大小 为16MB, 而后在卷组中创建大小为5G的逻辑卷testlv;挂载至/users目录</p><pre><code>[root@centos7 ~]# pvcreate /dev/sd{b1,c} fdisk新的分区之后，t类型转换为8e为LINUX LVM[root@centos7 ~]# pvs  PV         VG Fmt  Attr PSize  PFree   /dev/sdb1     lvm2 ---  10.00g 10.00g  /dev/sdc      lvm2 ---  10.00g 10.00g[root@centos7 ~]# vgcreate -s 16M testvg /dev/sd{b1,c} -s用来指定PE的大小  Volume group &quot;testvg&quot; successfully created[root@centos7 ~]# lvcreate -L 5G -n testlv testvg[root@centos7 ~]# mkfs.ext4 /dev/testvg/testlv[root@centos7 ~]# mkdir /users[root@centos7 ~]# mount /dev/testvg/testlv /users/</code></pre><p>(2) 扩展testlv至7G，要求archlinux用户的文件不能丢失</p><pre><code>[root@centos7 ~]# lvextend -L +2G /dev/testvg/testlv[root@centos7 ~]# lvs 查看大小[root@centos7 ~]# resize2fs /dev/testvg/testlv</code></pre><p>(3) 收缩testlv至3G，要求archlinux用户的文件不能丢失</p><pre><code>[root@centos7 ~]# umount /dev/testvg/testlv[root@centos7 ~]# resize2fs /dev/testvg/testlv 3G 先缩减文件系统[root@centos7 ~]# lvreduce -L 3G /dev/testvg/testlv </code></pre><p>(4) 对testlv创建快照，并尝试基于快照备份数据，验证快照的功能<br><code>lvcreate -L 1G -s -n kuaizhao -p r /dev/testvg/testlv</code><br><code>mount /dev/vg0/kuaizaho /kuaizhao</code><br> 此时快照目录与源目录中的文件一样<br>当修改源lv目录中的文件时，快照目录文件不会发生变化</p><h2 id="2、创建一个可用空间为1G的RAID1设备，文件系统为ext4，有一个空闲盘，开机可自动挂载至-backup目录"><a href="#2、创建一个可用空间为1G的RAID1设备，文件系统为ext4，有一个空闲盘，开机可自动挂载至-backup目录" class="headerlink" title="2、创建一个可用空间为1G的RAID1设备，文件系统为ext4，有一个空闲盘，开机可自动挂载至/backup目录"></a>2、创建一个可用空间为1G的RAID1设备，文件系统为ext4，有一个空闲盘，开机可自动挂载至/backup目录</h2><p><code>mdadm -C /dev/md0 -l 1 -n 2 /dev/sdb{1,2} -x 1 /dev/sdb3</code><br>-C：创建模式<br>专属选项包括：<br>-n #:指定使用#个块设备来创建此RAID；<br>-l #:指定要创建的RAID的级别；<br>-a {yes|no}:指定是否自动创建目标RAID设备的设备文件；<br>-c CHUNK_SIZE:指定块大小；<br>-x #:指定空闲盘的个数；</p><pre><code>创建挂载点与文件系统cdmkdir /backupmkfs.ext /dev/md0设置挂载vim /etc/fstabblkidUUID=7b6dcdd4-a061-4417-8cbc-f3e9db4e7082 /backup ext4 defaults 0 0mount -a</code></pre><h2 id="3、简述TCP链接建立和断开过程"><a href="#3、简述TCP链接建立和断开过程" class="headerlink" title="3、简述TCP链接建立和断开过程"></a>3、简述TCP链接建立和断开过程</h2><ol><li>主机A通过向主机B 发送一个含有同步序列号的标志位的数据段给主机B ,向主机B 请求建立连接,通过这个数据段,主机A告诉主机B 两件事:我想要和你通信;你可以用哪个序列号作为起始数据段来回应我。</li><li>主机B 收到主机A的请求后,用一个带有确认应答(ACK)和同步序列号(SYN)标志位的数据段响应主机A,也告诉主机A两件事:我已经收到你的请求了,你可以传输数据了;你要用哪个序列号作为起始数据段来回应我。</li><li>主机A收到这个数据段后,再发送一个确认应答,确认已收到主机B 的数据段:我已收到回复,我现在要开始传输实际数据了</li></ol><h2 id="4、简述TCP和UDP的区别"><a href="#4、简述TCP和UDP的区别" class="headerlink" title="4、简述TCP和UDP的区别"></a>4、简述TCP和UDP的区别</h2><p>UDP是面向无连接的通讯协议，UDP数据包括目的端口号和源端口号信息。<br>优点：UDP速度快、操作简单、要求系统资源较少，由于通讯不需要连接，可以实现广播发送<br>缺点：UDP传送数据前并不与对方建立连接，对接收到的数据也不发送确认信号，发送端不知道数<br>据是否会正确接收，也不重复发送，不可靠。<br>TCP是面向连接的通讯协议，通过三次握手建立连接，通讯完成时四次挥手<br>优点：TCP在数据传递时，有确认、窗口、重传、阻塞等控制机制，能保证数据正确性，较为可靠。<br>缺点：TCP相对于UDP速度慢一点，要求系统资源较多。</p><h1 id="6-1、总结IP地址规划"><a href="#6-1、总结IP地址规划" class="headerlink" title="6 1、总结IP地址规划"></a>6 1、总结IP地址规划</h1><p>IP地址分五大类<br>A类地址: 1-127<br>B类地址: 128-191<br>C类地址: 192-223<br>D类地址: 240-245<br>E类地址: 保留</p><h2 id="2、总结常见网络管理命令"><a href="#2、总结常见网络管理命令" class="headerlink" title="2、总结常见网络管理命令"></a>2、总结常见网络管理命令</h2><p><code>ping</code> 用来测试网络是否互通<br><code>ifconfig</code> 查看IP网卡<br><code>netstat</code> 命令用来打印Linux中网络系统的状态信息，可让你得知整个Linux系统的网络情况</p><pre><code>-netstat -a     //列出所有端口-netstat -at    //列出所有tcp端口-netstat -au    //列出所有udp端口 </code></pre><h2 id="3、给定IP地址167-77-88-99和掩码255-255-255-192，子网号是什么？广播地址是什么？有效IP地址是什么？"><a href="#3、给定IP地址167-77-88-99和掩码255-255-255-192，子网号是什么？广播地址是什么？有效IP地址是什么？" class="headerlink" title="3、给定IP地址167.77.88.99和掩码255.255.255.192，子网号是什么？广播地址是什么？有效IP地址是什么？"></a>3、给定IP地址167.77.88.99和掩码255.255.255.192，子网号是什么？广播地址是什么？有效IP地址是什么？</h2><p>10100111.01001101.01011000.01100011 167.77.88.99<br>11111111.11111111.11111111.11000000 255.255.2555.192<br>子网号=ip地址与子网掩码相与得到: 10100111.01001101.01011000.01000000 167.77.88.64/26</p><p>广播地址:主机位全为0是一个网络地址是一个网段，主机位全为1是一个广播地址<br>由子网掩码可知网络位是前26位，主机位是后6位,所以将ip地址的后六位全部置为1可得到<br>10100111.01001101.01011000.01111111 167.77.88.127</p><p>有效IP地址: 网络号+1——广播地址减1 167.77.88.65——167.77.88.126</p><h2 id="4、添加IP地址192-168-2-2-24到eth0网卡上"><a href="#4、添加IP地址192-168-2-2-24到eth0网卡上" class="headerlink" title="4、添加IP地址192.168.2.2/24到eth0网卡上"></a>4、添加IP地址192.168.2.2/24到eth0网卡上</h2><p>ifconfig eth0 192.168.2.2/24</p><h2 id="5、top-iostat-vmstat命令总结"><a href="#5、top-iostat-vmstat命令总结" class="headerlink" title="5、top,iostat,vmstat命令总结"></a>5、top,iostat,vmstat命令总结</h2><p>top 动态查看进程状况<br>P：以占据的CPU百分比,%CPU<br>M：占据内存百分比,%MEM<br>T：累积占据CPU时长,TIME+<br>iostat 工具将对系统的磁盘操作活动进行监视。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况<br>vmstat用来显示Linux系统虚拟内存状态，也可以报告关于进程、内存、I/O等系统整体运行状态</p><h2 id="6、找出CPU占用最多的前10个进程"><a href="#6、找出CPU占用最多的前10个进程" class="headerlink" title="6、找出CPU占用最多的前10个进程"></a>6、找出CPU占用最多的前10个进程</h2><p><code>ps aux | sort -nrk 3 | more</code><br>sort -n: 按照数值大小从小到大排列<br>-r:执行反方向（由上至下）整理<br>-k:使用第3列来排序</p><h2 id="7、crontab实现，在12-月内-每天的早上-6-点到-12-点，每隔-3-个小时-0-分钟执行一次-usr-bin-backup"><a href="#7、crontab实现，在12-月内-每天的早上-6-点到-12-点，每隔-3-个小时-0-分钟执行一次-usr-bin-backup" class="headerlink" title="7、crontab实现，在12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup"></a>7、crontab实现，在12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup</h2><p><code>0 6-12/3 * 12 * /usr/bin/backup</code></p><h1 id="7-1-编写脚本实现传入进程pid-查看对应进程-proc下CPU、内存指标"><a href="#7-1-编写脚本实现传入进程pid-查看对应进程-proc下CPU、内存指标" class="headerlink" title="7 1.编写脚本实现传入进程pid,查看对应进程/proc下CPU、内存指标"></a>7 1.编写脚本实现传入进程pid,查看对应进程/proc下CPU、内存指标</h1><pre><code>#!/bin/bashread -p &quot;please input PID to Mematy&amp;CPU infos: &quot; pidcheckpid=`ps aux | sed -nr &quot;1! p&quot; | tr -s &quot; &quot; | cut -d &quot; &quot; -f 2 | grep $pid`if [ ! $checkpid ];then        echo &quot;NO error &quot;else         echo &quot;Memory info: &quot;        echo &quot;`cat /proc/$pid/status | grep ^Vm`&quot;        echo &quot;Cpu info: &quot;        echo &quot;`cat /proc/$pid/status | grep ^Cpu`&quot;        echo &quot;%cpu is `ps -p $pid -o pcpu | sed -nr &quot;2p&quot;`&quot;fi</code></pre><h2 id="2-编写脚本实现每分钟检查一个主机端口是否存活-提示使用nmap-如果检查端口不在线，sleep-10s-如果三次都不存在，记录到日志"><a href="#2-编写脚本实现每分钟检查一个主机端口是否存活-提示使用nmap-如果检查端口不在线，sleep-10s-如果三次都不存在，记录到日志" class="headerlink" title="2.编写脚本实现每分钟检查一个主机端口是否存活(提示使用nmap),如果检查端口不在线，sleep 10s,如果三次都不存在，记录到日志"></a>2.编写脚本实现每分钟检查一个主机端口是否存活(提示使用nmap),如果检查端口不在线，sleep 10s,如果三次都不存在，记录到日志</h2><pre><code>#!/bin/bashread -p &quot;Please input a ip address: &quot; ip_addrread -p &quot;Please input a port: &quot; portport_stat=`nmap $ip_addr -p $port | grep &quot;^[0-9]&quot; | cut -d &quot; &quot; -f 2`i=1while [ $i -le 3 ];do #判断整数1是否小于等于整数2 (小于等于真)        if [ &quot;$port_stat&quot; != &quot;open&quot; ];then                sleep 10s        else                break        fi        let i++        if [ $i -eq 3 ];then #判断整数1是否和整数2相等 (相等为真)                echo &quot;host:$ip_addr port:$port is not open&quot; &gt;&gt; /var/log/host_port.log        fidone</code></pre><h2 id="3-编写脚本-root-bin-excute-sh，判断参数文件是否为sh后缀的普通文件，如果是，添加所有人可执行权限，否则提示用户非脚本文件"><a href="#3-编写脚本-root-bin-excute-sh，判断参数文件是否为sh后缀的普通文件，如果是，添加所有人可执行权限，否则提示用户非脚本文件" class="headerlink" title="3.编写脚本/root/bin/excute.sh，判断参数文件是否为sh后缀的普通文件，如果是，添加所有人可执行权限，否则提示用户非脚本文件"></a>3.编写脚本/root/bin/excute.sh，判断参数文件是否为sh后缀的普通文件，如果是，添加所有人可执行权限，否则提示用户非脚本文件</h2><pre><code>#!/bin/bashread -p &quot;please input filename: &quot; fileif [[ $file =~ .*sh$ ]];then        if [ -f $file ];then                chmod a+x $file        fielse                echo &quot;非脚本文件&quot;fi</code></pre><h2 id="4-编写脚本-root-bin-nologin-sh和login-sh实现禁止和允许普通用户登录系统"><a href="#4-编写脚本-root-bin-nologin-sh和login-sh实现禁止和允许普通用户登录系统" class="headerlink" title="4.编写脚本/root/bin/nologin.sh和login.sh实现禁止和允许普通用户登录系统"></a>4.编写脚本/root/bin/nologin.sh和login.sh实现禁止和允许普通用户登录系统</h2><pre><code>#!/bin/bashread -p &quot;please input user: &quot; useruid=`id $user | sed -nr &quot;s/.*=([[:digit:]]+)\(.*$/\1/p&quot;`if [[ $uid -ge 500 ]];then        usermod -s /bin/nologin $user         echo &quot;该用户已禁止登陆&quot;else        echo &quot;该用户为系统用户无法禁止&quot;fi</code></pre><h2 id="5-编写脚本-root-bin-sumid-sh-计算-etc-passwd文件中的第10个用户和第20用户的ID之和。"><a href="#5-编写脚本-root-bin-sumid-sh-计算-etc-passwd文件中的第10个用户和第20用户的ID之和。" class="headerlink" title="5.编写脚本/root/bin/sumid.sh,计算/etc/passwd文件中的第10个用户和第20用户的ID之和。"></a>5.编写脚本/root/bin/sumid.sh,计算/etc/passwd文件中的第10个用户和第20用户的ID之和。</h2><pre><code>#!/bin/basha=`cat /etc/passwd | head -10 | tail -1  | cut -d &quot;:&quot; -f 3`b=`cat /etc/passwd | head -20 | tail -1  | cut -d &quot;:&quot; -f 3`let c=a+becho &quot;$c&quot;unset a b</code></pre><h1 id="8-1、用shell脚本实现自动登录机器"><a href="#8-1、用shell脚本实现自动登录机器" class="headerlink" title="8 1、用shell脚本实现自动登录机器"></a>8 1、用shell脚本实现自动登录机器</h1><pre><code>#!/usr/bin/expectspawn ssh root@192.168.152.131expect {        &quot;yes/no&quot; { send &quot;yes\n&quot;;}        &quot;password&quot; {send &quot;123456\n&quot;}}interact #interact：允许用户交互</code></pre><h2 id="2、shell-判断一个值bone是否在数组arrayZ-one-two-three-four-five-five-中"><a href="#2、shell-判断一个值bone是否在数组arrayZ-one-two-three-four-five-five-中" class="headerlink" title="2、shell 判断一个值bone是否在数组arrayZ=( one two three four five five )中"></a>2、shell 判断一个值bone是否在数组arrayZ=( one two three four five five )中</h2><pre><code>#!/bin/basharrayz=( &quot;one&quot; &quot;two&quot; &quot;three&quot; &quot;four&quot; &quot;bone&quot; )for i in `seq 0 $[${#arrayz[@]}-1]`;doj=0        if                 [ ${arrayz[$i]} == bone ];then                echo &quot;arrayz in bone&quot;        else                let j++        fidoneecho $j from arrayz is not boneunset arrayz</code></pre><h2 id="3、用命令或者脚本实现-0057AF051EFF-变为-00-57-AF-05-1E-FF-。"><a href="#3、用命令或者脚本实现-0057AF051EFF-变为-00-57-AF-05-1E-FF-。" class="headerlink" title="3、用命令或者脚本实现 0057AF051EFF 变为 00:57:AF:05:1E:FF 。"></a>3、用命令或者脚本实现 0057AF051EFF 变为 00:57:AF:05:1E:FF 。</h2><pre><code>a=0057AF051EFF;echo ${a:0:2}:${a:2:2}:${a:4:2}:${a:6:2}:${a:8:2}:${a:10:2} 字符处理      或#!/bin/basha=0057AF051EFFfor (( i=2;i&lt;${#a};i=i+2 ));do        if [ &quot;$i&quot; -lt &quot;${#a}&quot; ];then #-lt 小于等于                echo -n &quot;${a:$((i-2)):2}:&quot;        else        #       echo &quot;${a:$((i-2)):2}&quot;        exit        fidoneecho -e &quot;\r&quot;</code></pre><h2 id="4、a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z-A-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z-1-2-3-4-5"><a href="#4、a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z-A-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P-Q-R-S-T-U-V-W-X-Y-Z-1-2-3-4-5" class="headerlink" title="4、a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 2 3 4 5"></a>4、a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 2 3 4 5</h2><p>6 7 8 9 0 ! \@ # \$ \% \^ \&amp; * ( ) - _ \= + \ \/ \’ \” \; \: [ ] { } \, . \?<br>用以上字符，结合数组，实现一个随机生成20位密码的脚本</p><pre><code>#!/bin/bashdeclare -a aa=( a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 2 3 4 56 7 8 9 0 \! \@ \# \$ \% \^ \&amp; \* \( \) \- \_ \= \+ \\ \/ \&#39; \&quot; \; \: \[ \] \{ \} \, \. \? )i=`echo ${#a[*]}`for (( j=1;j&lt;=20;j++ ));do        k=$[RANDOM%i]        echo -n &quot;${a[$k]}&quot;doneecho #换行</code></pre><h2 id="5、详细叙述centos7开机流程"><a href="#5、详细叙述centos7开机流程" class="headerlink" title="5、详细叙述centos7开机流程"></a>5、详细叙述centos7开机流程</h2><p>① POST加电自检(BIOS或UEFI进行硬件)<br>② MBR引导(自检没有问题后，BIOS将会直接去找硬盘的第一个扇区，找到前446字节，将MBR加载到内存中，MBR将告诉程序下一阶段去哪里找系统grub引导。此阶段属于grub的第一阶段。)<br>③ GRUB引导：grub的1.5和第2阶段，信息默认存放在扇区中，如果使用grub-install生成的文件是存放在/boot分区中的。为了加载内核系统,需要加载/boot分区，而加载/boot分区，又需要/boot分区的驱动，/boot分区的驱动是放在/boot分区中的，这里就进行了一个死循环。<br>——就grub来说，为了打破在MBR中只有446Bytes用于存放bootloader这一限制，所以这一步的实现是这样的：grub是通过分成三个阶段来实现加载内核这一功能的，这三个阶段分别是：stage1, stage1.5以及stage2。其中：</p><p><font color="red"><i class="fa fa-pencil-square-o fa-1.5x"></i></font>stage1：存放于MBR的前446Bytes，用于加载stage1.5阶段，目的是为了识别并驱动stage2(或者/boot)所在分区的文件系统；</p><p><font color="red"><i class="fa fa-pencil-square-o fa-1.5x"></i></font>stage1.5：存放于MBR之后的扇区，加载stage2所在分区的文件系统驱动，让stage1中的bootloader(引导加载程序)能识别stage2所在分区的文件系统；</p><p><font color="red"><i class="fa fa-pencil-square-o fa-1.5x"></i></font>stage2：存放于磁盘分区之上，具体存放于/boot/grub目录之下，主要用于加载内核文件(vmlinuz-VERSION-RELEASE)以及ramdisk这个临时根文件系统(initrd-VERSION-RELEASE.img或initramfs-VERSION-RELEASE.img)。</p><p><div class="alert alert-success">概述：假如要启动的是硬盘设备，首先我们的硬件平台主板BIOS必须能够识别硬盘，然后BIOS才能加载硬盘中的bootloader，而bootloader自身加载后就能够直接识别当前主机上的硬盘设备了；不过，能够识别硬盘设备不代表能够识别硬盘设备中的文件系统，因为文件系统是额外附加的一层软件组织的文件结构，所以要对接一种文件系统，就必须要有对应的能够识别和理解这种文件系统的驱动，这种驱动就称为文件系统驱动。而stage1.5就是向grub提供文件系统驱动的，这样stage1就能访问stage2及内核所在的分区(/boot)了<br>注意：kernel和initramfs的文件路径均以grub的”根”作为起始目录，且存放于stage2所在分区上；</div><div class="alert alert-warning">需要注意的是，stage2、内核以及ramdisk文件通常放置于一个基本磁盘分区之上，因为grub无法驱动lvm、高级软raid等复杂逻辑设备，除非提供一个复杂的驱动接口，否则如果stage2及内核等文件都存放在lvm等复杂逻辑设备上将无法被stage1所识别，更别说加载了！</div>④Kernel自身初始化<br>Kerenl在得到系统控制权之后，首先要进行自身初始化，而初始化的主要作用是：<br>    (1)探测可识别到的所有硬件设备；<br> bootloader将系统控制权移交给内核就好比如后朝推翻前朝，统治者(内核)当权之后，首先要检查一下有哪些是前朝所留下的，例如有哪些领土、人力、财力、兵力可用等等。<br>    (2)加载硬件驱动程序，即加载真正的根文件系统所在设备的驱动程序（有可能会借助于ramdisk加载驱动）；<br>这就像统治者(内核)在得知底下存在的人力、财力之后，开始将可以“为我所用”的人力纳入麾下，听自己使唤，而不听使唤的杀掉；<br>    (3)以只读方式挂载根文件系统；<br>如果有借助于ramdisk这个临时文件系统（虚根），则在这一步之后会执行根切换；否则不执行根切换。<br>    (4)运行用户空间的第一个应用程序：/sbin/init.<br>到这里内核空间的启动流程就结束了，而接下来是用户空间完成后续的系统启动流程。</p><p><div class="alert alert-danger">注意：<br>ramdisk和内核是由bootloader一同加载到内存当中的，ramdisk是用于实现系统初始化的、基于内存的磁盘设备，即加载至内存（的某一段空间）后把内存当磁盘使用，并在内存中作为临时根文件系统提供给内核使用，帮助内核挂载真正的根文件系统。而之所以能够帮助内核挂载根文件系统是因为在ramdisk这个临时文件系统的/lib/modules目录下有真正的根文件系统所在设备的驱动程序；除此之外，这个临时文件系统也遵循FHS，例如有这些固定目录结构：/bin, /sbin, /lib, /lib64, /etc, /mnt, /media, …<br>因为Linux内核有一个特性就是通过使用缓冲/缓存来达到加速对磁盘上文件的访问的目的，而ramdisk是加载到内存并模拟成磁盘来使用的，所以Linux就会为内存中的“磁盘”再使用一层缓冲/缓存，但是我们的ramdisk本来就是内存，它只不过被当成硬盘来使用罢了，这就造成双缓冲/缓存了，而且不会起到提速效果，甚至影响了访问性能；CentOS 5系列以及之前版本的ramdisk文件为initrd-VERSION-RELEASE.img，就会出现上述所说到的问题；而为了解决一问题，CentOS 6/7系列版本就将其改为initramfs-VERSION-RELEASE.img，使用文件系统的方式就可以避免双缓冲/缓存了，我们可以说这是一种提速机制。<br>需要注意的是，系统发行商为了适应于各个不同的硬件接口，因此将各个不同的硬件接口的驱动组装打包起来，例如在用户第一次使用光盘安装完系统之后，会动态探测当前主机上的硬件设备并调用与之对应的设备驱动再做成ramdisk文件的。所以，ramdisk文件并非必须的，如果只是为了将Linux安装于特定硬件平台上，就可以直接把对应的驱动编译进内核即可，而不需要去使用ramdisk文件了。</div><br>⑤init管理用户空间服务进程<br>init可以理解成是内核派来管理用户空间的使者。虽然CentOS 5、CentOS 6以及CentOS 7的init配置 文件各不相同，但总体的启动流程是不变的。<br>这一步的流程是：/sbin/init –&gt; 根据init配置文件设置默认运行级别 –&gt; 运行系统初始化脚本/etc/rc.d/rc.sysinit，完成系统初始化 –&gt; 关闭或启动用户选定的默认运行级别所对应的服务 –&gt; 启动终端，打印登录提示符<br>grub中默认指定init=/sbin/init程序，可以在grub.conf中kernel行自定义执行程序init=/bin/bash,此时可以绕过下面步骤直接进入bash界面。<br>init启动的顺序，/sbin/init-&gt;/etc/init-&gt;/bin/init-&gt;/bin/sh,<br>(1)根据init配置文件设置默认运行级别<br>对于CentOS 5来说，初始化程序init是SysV init，其配置文件为：/etc/inittab；<br>对于CentOS 6来说，初始化程序init是upstart，其配置文件为：/etc/inittab， /etc/init/*.conf，也就是upstart将配置文件拆分成多个，在/etc/init/目录下以conf结尾的都是upstart风格的配置文件，而/etc/inittab仅用于设置默认运行级别；<br>对于CentOS 7来说，初始化程序init是systemd，其配置文件为：/usr/lib/system/systemd/*, /etc/systemd/system/*；</p><p>详情请见原文：<a href="https://www.cnblogs.com/FengGeBlog/p/10392191.html" target="_blank" rel="noopener">https://www.cnblogs.com/FengGeBlog/p/10392191.html</a><br><a href="https://blog.csdn.net/qq_27754983/article/details/75212666" target="_blank" rel="noopener">https://blog.csdn.net/qq_27754983/article/details/75212666</a></p><h2 id="6、编写Nginx的systemd配置文件，-实现nginx进程开机启动"><a href="#6、编写Nginx的systemd配置文件，-实现nginx进程开机启动" class="headerlink" title="6、编写Nginx的systemd配置文件， 实现nginx进程开机启动"></a>6、编写Nginx的systemd配置文件， 实现nginx进程开机启动</h2><p>1、判断UID是否大于等于500，如果为真就显示为普通用户，如果为假就显示为系统或管理用户<br>2、显示用户id为奇数的用户。<br>3、统计web服务访问日志中的ip访问量<br>4、简述加密类型以及数据加密解密过程<br>5、搭建私有CA并实现证书颁发</p><p><script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/highlight.min.js"></script></p><p><script>hljs.initHighlightingOnLoad();</script></p><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/styles/an-old-hope.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;FZShuTi&quot;&gt;题目归档&lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="write" scheme="http://yoursite.com/categories/write/"/>
    
    
      <category term="note" scheme="http://yoursite.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>style</title>
    <link href="http://yoursite.com/2018/08/28/%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/08/28/样式/</id>
    <published>2018-08-28T09:28:03.000Z</published>
    <updated>2019-09-07T18:20:59.165Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="FZShuTi">本文章写作样式 </font></center><br><a id="more"></a></p><h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><p><font color="red">详情请转下方原文地址</font></p><p id="div-border-left-red">且不问结果如何，尽自己之所能，积极的面对。</p><div class="note default"><p>Content (md partial supported) </p></div><p>default<br>primary<br>success<br>info<br>warning<br>danger</p><p id="div-border-left-red">如果没有安装成功，那可能就是墙的原因。建议下载 <code>Node.js</code> 直接安装。</p><p id="div-border-top-blue">关于更多基本操作和基础知识，请查阅 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 与 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a> 官方文档.</p><h1 id="背景文字"><a href="#背景文字" class="headerlink" title="背景文字"></a>背景文字</h1><div><span id="inline-blue"> 站点配置文件</span></div><br><a><span id="inline-purple"> 主题配置文件 </span></a><br><div><span id="inline-yellow"> 站点配置文件 </span></div><br><div><span id="inline-green"> 主题配置文件 </span></div><h1 id="下载按钮"><a href="#下载按钮" class="headerlink" title="下载按钮"></a>下载按钮</h1><p><a id="download" href="https://git-scm.com/download/win" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span> </a></p><a class="btn" href="https://reishin.me" target="_blank" rel="noopener"><i class="fa fa-home fa-fw"></i>点击访问博客</a><p><a id="tube" href="https://www.youtube.com/watch?v=Gl23T9aOfoE" target="_blank" rel="noopener"><i class="fa fa-youtube-play"></i><span> GA17 </span><a id="tube" href="https://www.youtube.com/watch?v=Gl23T9aOfoE" target="_blank" rel="noopener"><i class="fa fa-bug"></i><span> YouTube </span></a></a></p><p><a id="download" href="https://holyghost.me" target="_blank" rel="noopener"><i class="fa fa-bug"></i><span> ghost.me</span> </a></p><h1 id="文字-字体图标"><a href="#文字-字体图标" class="headerlink" title="文字 字体图标"></a>文字 字体图标</h1><blockquote class="blockquote-center"><p>居中引用</p></blockquote><p><span id="inline-toc">1.数字块定义</span></p><p><i class="fa fa-pencil"></i><br><i class="fa fa-github fa-2x"></i></p><p><i class="fa fa-quora fa-2x"></i></p><h1 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h1><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>5.命令历史相关环境变量</div><br><div class="alert alert-info"><i class="fa fa-info"></i> 本文旨在介绍样式的使用规则。</div><br><div class="alert alert-warning"><i class="fa fa-bell"></i> 本文旨在介绍样式的使用规则。</div><br><div class="alert alert-danger"><i class="fa fa-bug"></i> 本文旨在介绍样式的使用规则。</div><h1 id="文字居中"><a href="#文字居中" class="headerlink" title="文字居中"></a>文字居中</h1><blockquote class="blockquote-center"><p>I heard the echo, <span class="label default">from the valleys and the heart</span><br>Open to the lonely soul of <span class="label info">sickle harvesting</span><br>Repeat outrightly, but also repeat the well-being of<br>Eventually <span class="label warning">swaying in the desert oasis</span><br><span class="label success">I believe</span> I am<br><span class="label primary">Born as the bright summer flowers</span><br>Do not withered undefeated fiery demon rule<br>Heart rate and breathing to bear <span class="label danger">the load of the cumbersome</span><br>Bored</p></blockquote><div class="tabs" id="ga17"><ul class="nav-tabs"><li class="tab active"><a href="#ga17-1">GA17 1</a></li><li class="tab"><a href="#ga17-2">GA17 2</a></li><li class="tab"><a href="#ga17-3">GA17 3</a></li><li class="tab"><a href="#ga17-4">GA17 4</a></li></ul><div class="tab-content"><div class="tab-pane active" id="ga17-1"><p><strong>逝者如斯夫，不舍昼夜</strong></p></div><div class="tab-pane" id="ga17-2"><p><strong>我是一个怪物，<code>来自我也不知道的地方</code></strong></p></div><div class="tab-pane" id="ga17-3"><p><strong><em>f</em></strong></p></div><div class="tab-pane" id="ga17-4"><p><strong>你觉得你死了，还有有人记得你吗</strong></p></div></div></div><p>以上来源原文地址:<a href="https://qianling.pw/style/#TOC%E6%95%B0%E5%AD%97%E5%9D%97" target="_blank" rel="noopener">https://qianling.pw/style/#TOC%E6%95%B0%E5%AD%97%E5%9D%97</a></p><p><script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/highlight.min.js"></script></p><p><script>hljs.initHighlightingOnLoad();</script></p><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/styles/an-old-hope.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;FZShuTi&quot;&gt;本文章写作样式 &lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="write" scheme="http://yoursite.com/categories/write/"/>
    
    
      <category term="note" scheme="http://yoursite.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>two</title>
    <link href="http://yoursite.com/2018/08/28/%E9%A9%AC%E5%93%A5%E6%96%87%E6%A1%A3/"/>
    <id>http://yoursite.com/2018/08/28/马哥文档/</id>
    <published>2018-08-28T09:28:03.000Z</published>
    <updated>2019-08-25T07:46:24.974Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="FZShuTi">linux 培训文档 </font></center><br><a id="more"></a></p><h1 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h1><p><code>08:21:34 up 36 min,  2 users,  load average: 0.00, 0.00, 0.00</code><br>当前服务器时间：    08:21:34<br>当前服务器运行时长  36 min<br>当前用户数          2 users<br>当前的负载均衡      load average  0.00, 0.00, 0.00，分别取1min,5min,15min的均值</p><h1 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h1><p>两种分区方式：MBR，GPT<br>MBR: Master Boot Record，1982年，使用32位表示扇区数，分区不超过2T<br>如何分区：按柱面<br>0磁道0扇区：512bytes<br>　　446bytes: boot loader<br>　　64bytes：分区表，其中每16bytes标识一个分区<br>　　2bytes: 55AA<br>4个主分区；3主分区+1扩展(N个逻辑分区)<br>dos代表MBR分区</p><h1 id="管理分区"><a href="#管理分区" class="headerlink" title="管理分区"></a>管理分区</h1><p>列出块设备<br>•    lsblk<br>创建分区使用：<br>•    fdisk 创建MBR分区<br>•    gdisk 创建GPT分区<br>•    parted 高级分区操作<br>重新设置内存中的内核分区表版本也就是同步分区表<br>•    partprobe<br>或者：<code>ls /dev/sdb*</code> , <code>cat /proc/partitions</code><br><code>blkid /dev/sdb1</code> 查看分区的文件格式和UUID,也可以不跟分区</p><h1 id="同步分区表"><a href="#同步分区表" class="headerlink" title="同步分区表"></a>同步分区表</h1><p>查看内核是否已经识别新的分区<br>cat /proc/partations<br>centos6通知内核重新读取硬盘分区表新增分区用<br>partx -a /dev/DEVICE kpartx -a /dev/DEVICE -f: force<br>删除分区用<br>partx -d –nr M-N /dev/DEVICE<br>CentOS 5，7: 使用partprobe partprobe [/dev/DEVICE]</p><p>centos6: partx -a /dev/sda   -a增加<br>partx -d –nr 6 /dev/sda -d删除第6个分区</p><h1 id="Linux不重启识别硬盘"><a href="#Linux不重启识别硬盘" class="headerlink" title="Linux不重启识别硬盘"></a>Linux不重启识别硬盘</h1><pre><code>[root@centos6 ~]# echo &quot;- - -&quot; &gt; /sys/class/scsi_host/host0/scan [root@centos6 ~]# echo &quot;- - -&quot; &gt; /sys/class/scsi_host/host1/scan  [root@centos6 ~]# echo &quot;- - -&quot; &gt; /sys/class/scsi_host/host2/scan</code></pre><h1 id="parted分区命令"><a href="#parted分区命令" class="headerlink" title="parted分区命令"></a>parted分区命令</h1><p>parted的操作都是实时生效的，小心使用<br>用法：parted [选项]… [设备 [命令 [参数]…]…]<br>　parted /dev/sdb mklabel gpt|msdos<br>　parted /dev/sdb print<br>　parted /dev/sdb mkpart primary 1 200 （默认M）<br>　parted /dev/sdb rm 1<br>　parted –l  列出分区信息</p><h1 id="创建文件系统"><a href="#创建文件系统" class="headerlink" title="创建文件系统"></a>创建文件系统</h1><p>mkfs命令：<br>(1) mkfs.FS_TYPE /dev/DEVICE ext4<br>xfs btrfs vfat<br>(2) mkfs -t FS_TYPE /dev/DEVICE<br>-L ‘LABEL’ 设定卷标<br>　　创建ext文件系统<br>mke2fs：ext系列文件系统专用管理工具<br>-t {ext2|ext3|ext4} 指定文件系统类型<br>-b {1024|2048|4096} 指定块大小<br>-L ‘LABEL’ 设置卷标<br>-j 相当于 -t ext3<br><code>mkfs.ext3 = mkfs -t ext3 = mke2fs -j = mke2fs -t ext3</code><br>-i # 为数据空间中每多少个字节创建一个inode；不应该小于block大小<br>-N # 指定分区中创建多少个inode<br>-I 一个inode记录占用的磁盘空间大小，128—4096<br>-m # 默认5%,为管理人员预留空间占总空间的百分比<br>-O FEATURE[,…]    启用指定特性<br>-O ^FEATURE    关闭指定特性</p><h1 id="文件系统标签"><a href="#文件系统标签" class="headerlink" title="文件系统标签"></a>文件系统标签</h1><p>指向设备的另一种方法<br>与设备无关<br>blkid：块设备属性信息查看 blkid [OPTION]… [DEVICE]<br>-U UUID 根据指定的UUID来查找对应的设备<br>-L LABEL 根据指定的LABEL来查找对应的设备<br>e2label：管理ext系列文件系统的LABEL e2label DEVICE [LABEL]<br>findfs ：查找分区<br>findfs [options] LABEL=<label></label></p><h1 id="tune2fs"><a href="#tune2fs" class="headerlink" title="tune2fs"></a>tune2fs</h1><p>tune2fs：重新设定ext系列文件系统可调整参数的值<br>　　-l 查看指定文件系统超级块信息；super block<br>　　-L ‘LABEL‘ 修改卷标<br>　　-m #  修预留给管理员的空间百分比<br>　　-j    将ext2升级为ext3<br>　　-O    文件系统属性启用或禁用, –O ^has_journal<br>　　-o    调整文件系统的默认挂载选项，–o ^acl<br>　　-U UUID    修改UUID号<br>dumpe2fs：<br>　　块分组管理，32768块<br>　　-h：查看超级块信息，不显示分组信息<br><code>tune2fs -l /dev/sdb1</code> 查看ext文件系统的工具不支持xfs格式<br><code>Filesystem features:      ext_attr resize_inode dir_index filetype sparse_super large_file</code> 这里没有日志功能，如果有会有journal表示日志<br><code>Reserved block count:     13107 保留块，默认5%</code></p><pre><code>Block count:              262144  Reserved block count:     13107  就用13107/262144 大约5%</code></pre><p><code>tune2fs -o has_journal /dev/sdb1</code> 加入日志功能<br><code>tune2fs -o ^acl /dev/sdb1 取消acl权限</code><br><code>tune2fs -o +acl /dev/sdb1 加入acl权限</code></p><p>只查询UUID是哪一个分区</p><pre><code>[root@centos7 ~]# blkid -U `sed -r-n  &#39;s#^UUID=(.*) / .*#\1#p&#39; /etc/fstab` /dev/sda2</code></pre><p><code>e2label -L /mnt/sdb1 /dev/sdb1</code> 加入卷标:/mnt/sdb1,<br>查看卷标：blkid,e2label</p><p><img src="https://s2.ax1x.com/2019/05/12/EhDzU1.png" alt=""></p><h1 id="用mount命令挂载文件系统"><a href="#用mount命令挂载文件系统" class="headerlink" title="用mount命令挂载文件系统 "></a>用mount命令挂载文件系统 <font size="5"></font></h1><p>挂载方法：mount DEVICE MOUNT_POINT<br>mount：通过查看/etc/mtab文件显示当前已挂载的所有设备<br>mount [-fnrsvw] [-t vfstype] [-o options] device dir device：指明要挂载的设备；  </p><p>(1)    设备文件：例如/dev/sda5  </p><p>(2)    卷标：-L ‘LABEL’, 例如 -L ‘MYDATA’</p><p>(3)    UUID, -U ‘UUID’：例如 -U ‘0c50523c-43f1-45e7-85c0-a126711d406e’</p><p>(4)    伪文件系统名称：proc, sysfs, devtmpfs, configfs dir：挂载点</p><p>　　事先存在；建议使用空目录</p><p>　　进程正在使用中的设备无法被卸载<br>补充：<br>用UUID形式挂载目录<br><code>mount -U UUID /mnt/sdb1</code><br>查看某个目录是否有人使用：<code>lsof /data</code> 或者<code>fuser -v /boot</code><br><code>fuser -km /mnt/sdb1</code> 此命令将把使用此目录的人全部杀掉，退出终端。</p><h2 id="mount常用命令选项"><a href="#mount常用命令选项" class="headerlink" title="mount常用命令选项"></a>mount常用命令选项<font size="5"></font></h2><p>-t vsftype指定要挂载的设备上的文件系统类型<br>-r readonly，只读挂载<br>-w read and write, 读写挂载<br>-n 不更新/etc/mtab，mount不可见。可查看这个文件，看的非常全<code>cat /proc/mounts</code><br>-a 自动挂载所有支持自动挂载的设备(定义在了/etc/fstab文件中，且挂载选项中有auto功能)<br>-L ‘LABEL’以卷标指定挂载设备<br>-U ‘UUID’以UUID指定要挂载的设备<br>-B, –bind    绑定目录到另一个目录上<code>mount /boot /mnt/boot --bind 目录挂目录</code><br>查看内核追踪到的已挂载的所有设备 cat /proc/mounts  </p><h2 id="o-options：-挂载文件系统的选项-，多个选项使用逗号分隔"><a href="#o-options：-挂载文件系统的选项-，多个选项使用逗号分隔" class="headerlink" title="-o options：(挂载文件系统的选项)，多个选项使用逗号分隔 "></a>-o options：(挂载文件系统的选项)，多个选项使用逗号分隔 <font size="5"></font></h2><p>async    异步模式<br>sync    同步模式,内存更改时，同时写磁盘<br>atime/noatime  包含目录和文件<br>diratime/nodiratime  目录的访问时间戳<br>auto/noauto 是否支持自动挂载,是否支持-a选项<br>exec/noexec 是否支持将文件系统上运行应用程序<br><code>mount -o noexec /dev/sdb1 /mnt/sdb1 此时可执行权限不可执行</code><br><code>mount -o remount,exec /mnt/sdb1 恢复执行</code><br><code>mount -o remount,acl /mnt/sdb1 加入acl权限</code><br>dev/nodev  是否支持在此文件系统上使用设备文件<br>suid/nosuid  是否支持suid和sgid权限<br>remount  重新挂载<br>ro只读  rw读写<br>user/nouser  是否允许普通用户挂载此设备，/etc/fstab使用<br>acl 启用此文件系统上的acl功能<br>loop 使用loop设备用文件作为 文件系统 然后可以实现挂载  centos6要加<code>mount -o -loop /data/ext4file /mnt/ext4</code> centos 6上面默认只有lop0-lop7,需要更多的就必须修改内核参数：在kernel 这行加上<code>max_loop=100</code><br>defaults：相当于rw, suid, dev, exec, auto, nouser, async</p><h1 id="卸载命令"><a href="#卸载命令" class="headerlink" title="卸载命令"></a>卸载命令</h1><p>查看挂载情况，<br>　　findmnt    MOUNT_POINT|device<br>findmnt /mnt 查看文件夹是否为挂载点<br>查看正在访问指定文件系统的进程<br>　　lsof MOUNT_POINT<br>　　fuser -km MOUNT_POINT<br>终止所有在正访问指定的文件系统的进程<br>卸载<br>　　umount DEVICE<br>　　umount MOUNT_POINT  </p><h1 id="挂载点和-etc-fstab"><a href="#挂载点和-etc-fstab" class="headerlink" title="挂载点和/etc/fstab"></a>挂载点和/etc/fstab</h1><p>配置文件系统体系<br>被mount、fsck和其它程序使用<br>系统重启时保留文件系统体系<br>可以在设备栏使用文件系统卷标<br>使用mount -a 命令挂载/etc/fstab中的所有文件系统<br><img src="https://s2.ax1x.com/2019/05/15/E7WhPf.png" alt=""><br><code>cat /var/log/boot.log</code> 查看内核启动日志</p><h2 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h2><p>swap分区改完相对应的文件系统83以后，<br>mkswap /dev/sdd1<br>然后加到/etc/fstab<br><code>swapon -s查看当前生效的swap设备</code><br><code>swapon -a 让swap设备生效</code>  </p><p><img src="https://s2.ax1x.com/2019/05/16/E77Du8.png" alt=""><br>最后一个表示优先级，数值越大优先级越高，可在/etc/fatab 修改优先级default 这个位置，替换掉<code>pri=10</code><br>swapoff /dev/sdb4 禁用后启用<br>swapon -a 才生效: 自动启动所有SWAP装置 </p><h2 id="用文件来当做swap分区"><a href="#用文件来当做swap分区" class="headerlink" title="用文件来当做swap分区"></a>用文件来当做swap分区</h2><p>dd if=/dev/zero of=/swapfile bs=2G count=1<br>mkswap /swapfile<br>blkid /swapfile<br>swapon -s :-s | –summary 按设备显示交换用途摘要，等价于<code>cat /proc/swaps</code></p><p>如果要移动这个swap文件,要先禁用swapoff /swapfile<br>查看swapon -s<br>移动：mv /swapfile /data/<br>swapon -p 5 /data/swapfile 设置优先级要先禁用swapoff  </p><h1 id="将文件制作成iso文件，注意iso文件是只读的。"><a href="#将文件制作成iso文件，注意iso文件是只读的。" class="headerlink" title="将文件制作成iso文件，注意iso文件是只读的。"></a>将文件制作成iso文件，注意iso文件是只读的。</h1><p><code>mkisofs -r -o /data/etc.iso /etc/</code></p><p>交换分区是系统RAM的补充<br>基本设置包括  　<br>　　创建交换分区或者文件<br>　　使用mkswap写入特殊签名<br>　　在/etc/fstab文件中添加适当的条目<br>　　使用swapon -a 激活交换空间<br>挂载交换分区 　　<br>启用：swapon　　<br> swapon [OPTION]… [DEVICE]　　<br>　　-a：激活所有的交换分区　　<br>　　-p PRIORITY：指定优先级　　<br>　　/etc/fstab:pri=value　　<br>禁用：swapoff [OPTION]… [DEVICE]</p><h1 id="文件系统空间占用等信息的查看工具："><a href="#文件系统空间占用等信息的查看工具：" class="headerlink" title="文件系统空间占用等信息的查看工具："></a>文件系统空间占用等信息的查看工具：</h1><p>df [OPTION]… [FILE]…<br>　　-H 以1000为单位<br>　　-T 文件系统类型<br>　　-h: human-readable<br>　　-i：inodes instead of blocks<br>　　-P: 以Posix兼容的格式输出<br>查看某目录总体空间占用状态:<br>　　du [OPTION]… DIR<br>　　-h: human-readable<br>　　-s: summary –max-depth　  　</p><h1 id="工具dd"><a href="#工具dd" class="headerlink" title="工具dd "></a>工具dd <font size="5"></font></h1><p>dd命令：convert and copy a file<br>用法：<br>dd if=/PATH/FROM/SRC of=/PATH/TO/DEST<br>bs=#：block size, 复制单元大小<br>count=#：复制多少个bs<br>of=file    写到所命名的文件而不是到标准输出<br>if=file    从所命名文件读取而不是从标准输入<br>bs=size    指定块大小（既是是ibs也是obs)<br>ibs=size    一次读size个byte<br>obs=size    一次写size个byte<br>cbs=size    一次转化size个byte<br>skip=blocks 从开头忽略blocks个ibs大小的块 seek=blocks 从开头忽略blocks个obs大小的块<br>count=n    只拷贝n个记录  </p><h2 id="工具dd-1"><a href="#工具dd-1" class="headerlink" title="工具dd"></a>工具dd</h2><p>conv=conversion[,conversion…] 用指定的参数转换文件<br>转换参数:<br>ascii 转换 EBCDIC 为 ASCII<br>ebcdic 转换 ASCII 为 EBCDIC<br>lcase 把大写字符转换为小写字符<br>ucase 把小写字符转换为大写字符<code>dd if=/etc/fstab conv=ucase</code><br>nocreat 不创建输出文件<br>noerror 出错时不停止<br>notrunc 不截短输出文件<br>sync 把每个输入块填充到ibs个字节，不足部分用空(NUL)字符补齐<br>Fdatasync 写完成前，物理写入输出文件  </p><p>skip=3 跳过原文件的前三个<br>读2个<br>seek=跳过f1四个</p><pre><code>[root@centos7 text]# cat f1;cat f2abcefghi123456[root@centos7 text]# dd if=f2 of=f1 bs=1 count=2 skip=3 seek=42+0 records in2+0 records out2 bytes (2 B) copied, 0.000231085 s, 8.7 kB/s[root@centos7 text]# cat f1abce45[root@centos7 text]#</code></pre><pre><code>[root@centos7 text]# cat f1;cat f2abcefghi123456[root@centos7 text]# dd if=f2 of=f1 bs=1 count=2 skip=3 seek=4 conv=notrunc2+0 records in2+0 records out2 bytes (2 B) copied, 0.000266614 s, 7.5 kB/s[root@centos7 text]# cat f1abce45hi[root@centos7 text]# </code></pre><h2 id="工具dd-2"><a href="#工具dd-2" class="headerlink" title="工具dd"></a>工具dd</h2><p>备份MBR<br><code>dd    if=/dev/sda of=/tmp/mbr.bak bs=512 count=1</code><br>破坏MBR中的bootloader<br><code>dd    if=/dev/zero of=/dev/sda bs=64 count=1 seek=446</code><br>有一个大与2K的二进制文件fileA。现在想从第64个字节位置开始读取，需要读取的大小是128Byts。又有fileB, 想把上面读取到的128Bytes写到第32个字节开始的位置，替换128Bytes，实现如下<br><code>dd    if=fileA of=fileB bs=1 count=128 skip=63 seek=31 conv=notrunc</code>  </p><h2 id="备份："><a href="#备份：" class="headerlink" title="备份："></a>备份：<font size="5"></font></h2><p>dd    if=/dev/sdx of=/dev/sdy<br>将本地的/dev/sdx整盘备份到/dev/sdy<br>dd    if=/dev/sdx of=/path/to/image<br>将/dev/sdx全盘数据备份到指定路径的image文件<br>dd    if=/dev/sdx | gzip &gt;/path/to/image.gz</p><p>备份/dev/sdx全盘数据，并利用gzip压缩，保存到指定路径</p><p>恢复：<br>dd    if=/path/to/image of=/dev/sdx<br>将备份文件恢复到指定盘<br>gzip -dc /path/to/image.gz | dd of=/dev/sdx<br>将压缩的备份文件恢复到指定盘</p><p>拷贝内存资料到硬盘</p><p>dd    if=/dev/mem of=/root/mem.bin bs=1024</p><p>将内存里的数据拷贝到root目录下的mem.bin文件</p><p>从光盘拷贝iso镜像</p><p>dd    if=/dev/cdrom of=/root/cd.iso</p><p>拷贝光盘数据到root文件夹下，并保存为cd.iso文件</p><p>销毁磁盘数据</p><p>dd    if=/dev/urandom of=/dev/sda1</p><p>利用随机的数据填充硬盘，在某些必要的场合可以用来销毁数据，执行此操作以后，/dev/sda1将无法挂载，创建和拷贝操作无法执行</p><p>破坏分区<br>dd if=/dev/zero of=/dev/sdc bs=1 count=512</p><p><code>lsblk</code>同步<br><code>partx -d --nr 1-2 /dev/sdb</code> 删除/dev/sdb 1和2分区  </p><h1 id="raid"><a href="#raid" class="headerlink" title="raid"></a>raid</h1><p>比如四个硬盘做raid5每个1G容量，可用的最后只有2G 2/3的利用率就是2G<br>怎样做一个软raid<br><code>mdadm -C -a yes /dev/md0 -l 0 -n 2 /dev/sd{b,c}1</code><br>分区要进行更改类型为fd<br>-C –create　创建阵列；<br>-a –auto　　同意创建设备，如不加此参数时必须先使用mknod 命令来创建一个RAID设备，不过推荐使用-a yes参数一次性创建；<br>-l 阵列模式,raid级别<br>-n 阵列中活动磁盘的数目，该数目加上备用磁盘的数目应该等于阵列中总的磁盘数目；<br>查看raid0 状态</p><pre><code>cat /proc/mdstatmdadm -D /dev/md0</code></pre><p>创建文件系统<code>mkfs.ext4 /dev/md0</code>挂载使用<br><code>mdadm -C -a yes /dev/md1 -l 5 -n 3 -x 1 -c=/dev/sd{b2,c2,d1,e1}</code><br>-x 备用,指定阵列中热备盘个数，写在最后一个为备用盘<br>-c:指定条带大小。单位KB，默认值512KB<br>清除raid信息<br>umount /dev/md0<br>mdadm –zero-superblock /dev/sdc1<br>mdadm –zero-superblock /dev/sdb1<br>blkid 查看<br>破坏分区<code>dd if=/dev/zero of=/dev/sdc bs=1 count=512</code><br>使其同步<code>partx -d --nr 1-2 /dev/sdc</code></p><h1 id="lvm"><a href="#lvm" class="headerlink" title="lvm"></a>lvm</h1><div class="alert alert-success">LVM基本介绍<br>LVM：Logical Volume Manager,逻辑卷管理，是Linux下对磁盘分区进行管理的一种机制<br><span id="inline-toc">传统硬盘管理机制</span>：1.  文件系统是基于分区的<br>　　　　　　　　　2. 不同分区之间相对独立无法互联<font color="blue"><br>　　　　　　　　　3. 空间难以平衡利用，且当一个分区/文件系统已满时无法扩充，只能重分区/重建文件系统，若涉及到数据，则只能备份——&gt; 重分区/重建文件系统——&gt; 恢复数据</font><br><span id="inline-toc">LVM(逻辑卷管理)</span>　1. 硬盘的多个分区由LVM统一管理<br>　　　　　　　　　2. 可以方便的扩大和减小（ Attention ），充分利用磁盘空间<font color="blue"><br>　　　　　　　　　3. 文件系统建立在逻辑卷上，而逻辑卷可以根据需求随时改变大小这是LVM最值钱/最帅的功能</font><br>　　　　　　　　　4. 在大型企业中，使用LVM可以在不停止服务的情况下，实现把用户数据从个旧硬盘转移到新硬盘中<br>: 实际生产环境中，减小磁盘容量的操作十分危险，很容易危及已存在的数据，比起数据的价值，磁盘的价值简直如同草芥,所以几乎不会执行减小操作<br></div><h2 id="PV、VG、LV关系详解"><a href="#PV、VG、LV关系详解" class="headerlink" title="PV、VG、LV关系详解"></a>PV、VG、LV关系详解</h2><p><span id="inline-blue">PV(Physical Volume)</span>: 物理卷设备，基于Block Device（磁盘块设备）创建<br><span id="inline-blue">VG(Volume Group)</span>：卷组，基于已存在的PV（物理卷设备）创建<br><span id="inline-blue">LV（Logical Volume)</span>:逻辑卷，基于已存在的VG（卷组）创建<br><span id="inline-blue">PE(Physical Extent)</span>：物理区域，是物理卷中可用于分配的最小存储单元，可自定义，但确定之后不能更改</p><p><span id="inline-toc">1.</span> PV ：LVM系统中最底层的设备<br>　　　　　　　　　　　　　　<code>基本管理命令：pvscan / pvs / pvdisplay / pvcreate / pvremove</code><br><code>pvscan</code> :在系统中搜索已存在的物理卷<br><code>pvdisplay</code> :物理卷全路径民称(pvdisplay /dev/sdc)，用于显示指定物理卷的属性信息（命令后面不加指定物理卷，默认显示所有物理卷）<br><code>pvcreate</code> :创建物理卷设备（参数位可以跟多个块设备路径，可同时创建多个PV<code>pvcreate /dev/sd{b,a6}</code>)<br><code>pvremvoe</code>:删除物理卷  若此物理卷存在于卷组（PV）和逻辑卷（LV）中，需要先移除LV,再移除VG，最后移除PV<code>pvremove /dev/sdb</code></p><font color="red">创建分区作为逻辑卷时需要将他的ID改为8e</font><p><span id="inline-toc">2.</span> VG :卷组<br>　　　　　　　　　　　　<code>基本管理命令：vgscan / vgs / vgdisplay / vgcreate / vgpremove / vgrename/</code><br><code>vgscan,vgs</code>:都是查看当前已存在的卷组<br><code>vgdisplay</code>:查看卷组信息（默认所有卷组信息）<br><code>vgcreate</code>:创建卷组<code>vgcreate -s 8M vg0 /dev/sdb</code> <font color="red"><br>-s</font>: 指定PE大小(只能是4或者4的倍数)<br>vg0: 指定卷组名称。 后面是指定物理设备<br><code>vgremove</code> : 删除卷组  若此卷组存在于逻辑卷（LV）中，则需要先移除LV，再移除Vg<code>vgremove vg0</code><br><code>vgrename</code>: 更改卷组名称 <code>vgrname vg0 vgvv</code></p><p><span id="inline-toc">3.</span>LV :逻辑卷<br>　　　　　　　　　　　　<code>基本管理命令: lvscan / lvs / lvdisplay / lvcreate / lvrename / lvremove</code><br><code>lvscan,lvs</code>:显示基本的逻辑卷信息<br><code>lvdisplay</code>:显示逻辑卷详细信息（默认所有逻辑卷，也可指定逻辑卷)<br><code>lvcreate</code>:创建逻辑卷（需指定大小<code>-L</code>，名称<code>-n</code>.  <em>若不指定逻辑卷名称，则系统默认定义名称<code>lvo10</code></em><br><code>lvcreate -L 5G -n lv0 vg0</code><br><code>lvrename</code>:修改逻辑卷名称（需要提供完整路径，不能像VG修改一样只提供旧卷组名称和新卷组名称即可）<code>lvrename /dev/testvg/testlv /dev/testvg/ttt</code> 前面旧卷组路径 后面是新路径以及新名称<br><code>lvremove</code>:移除逻辑卷<code>lvremove /dev/vg0/lv0 -y</code> <font color="red">-y 代表默认yes，不加此选项则会提示”是否真的想要移除逻辑卷”</font></p><p><span id="inline-toc">4.</span>在逻辑卷上创建文件系统 <div class="alert alert-warning">当PV/VG/LV都创建完成之后，就可以在LV上创建文件系统，就可以挂载使用了，当然，这个创建的过程再赘述一下：这个过程可以理解为有三块豆腐，你想把这三块豆腐分成2块，传统的办法就是把一块切成两半，然后每一半分给余下的两块，LVM则是把三块豆拼成一大块豆腐，然后切成两半，比起之前的两块豆腐，显然更完整。格式化磁盘创建文件系统、挂载使用</div>创建文件系统（格式化LVM）以ext4为例子:<code>mkfs.ext4 /dev/vg0/lv0</code><br>挂载文件系统: <code>mount /dev/vg0/</code></p><p><span id="inline-toc">5.</span>扩展整个系统的步骤概括如下：创建新PV——&gt;扩展VG——&gt;扩展LV<br>PV涉及不到扩展或者缩小，因为是LVM系统中最小组成单位，所以只需要再创建即可<br>VG扩展：vgextend(若原有的文件系统正在使用则需要先卸载，再执行扩展操作)<code>vgexted vg0 /dev/sdc</code> vg0是原有卷组;/dev/sdc是新添加的pv<br>LV扩展:<code>lvextend</code> <code>lvextend /dev/vg0/lv0 /dev/sdc</code> 前面是扩展的目标逻辑卷，后面是新pv</p><p><span id="inline-toc">6.</span>快照 <div class="alert alert-danger"><font size="3">快照的概念：LVM中快照创建的时候，仅拷贝原始卷里数据的元数据；创建的时候，并不会有数据的物理拷贝，因此快照的创建几乎是瞬间完成的，当原始卷上有写操作执行时，快照跟踪原始卷块的改变，这个时候原始卷上将要改变的数据在改变之前被拷贝到快照预留的空间</font></div> <code>lvcreate -L 200M -n kuaizhoa -s /dev/vg0/lv0</code><br>-l 后面跟快照包含多少个PE的数量<br>-L 后面跟快照的大小<br>-n 快照名称<br>-s 创建快照<br>/dev/vg0/lv0 目标源LV<br>-p r:只读权限<br>命令最后记得加创建的快照的原始lv名称</p><p></p><p id="div-border-top-blue">现在的文件只要有变动就可以用快照恢复<br>先卸载源:<code>umount /lvm</code><br>恢复快照功能:<code>lvconvert --merge /dev/vg0/kuaizhao</code><br>重新挂载源:<code>mount /dev/vg0/lv0 /lvm</code><br>此时/lvm目录下只有创建快照之前的文件。</p><p></p><marquee><font color="red"><font size="3">LVM笔记来自51CTO博客作者奔跑小电驴的原创作品，<a href="https://blog.51cto.com/11742700/2082820" target="_blank" rel="noopener">https://blog.51cto.com/11742700/2082820</a></font></font></marquee><h1 id="网咯"><a href="#网咯" class="headerlink" title="网咯"></a>网咯</h1><p>七层模型<br>application<br>persention<br>session<br>transport<br>network<br>data link<br>physical<br>集线器 物理层<br>交换机 数据链路<br>路由器 网络层</p><h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h2><p>TCP/IP是一个协议栈:传输控制协议/因特网互联协议<br><img src="https://s2.ax1x.com/2019/06/04/Vtz37T.png" alt=""><br>传输层：TCP可靠性 and UDP不可靠<br><img src="https://s2.ax1x.com/2019/06/05/VU70JI.png" alt=""><br>窗口大小：表示现在允许对方发送的数据量，也就是告诉对方，从本报文段的确认号开始允许对方发送的数据量，达到此值，需要ACK确认后才能再继续传送后面数据，由Window size value * Window size scaling factor<br>（此值在三次握手阶段TCP选项Window scale协商得到）得出此值<br>校验和：提供额外的可靠性<br>紧急指针：标记紧急数据在数据字段中的位置<br>选项部分：其最大长度可根据TCP首部长度进行推算。TCP首部长度用4位表示，选项部分最长为：(2^4-1)*4-20=40字节<br>常见选项：<br>最大报文段长度：Maxium Segment Size，MSS，通常1460字节<br>窗口扩大：Window Scale<br>时间戳： Timestamps</p><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>.<font color="red"><i class="fa fa-blind" aria-hidden="true"></i></font>TCP DNS:53 FTP:21 Telnet:23 Http:80 ssh:22 mysql-tcp:1521<font color="red"><br><i class="fa fa-blind" aria-hidden="true"></i></font>UDP DNS:53 TFTP:69 SNMP:161 QQ-UDP:8000 <div class="alert alert-warning"> 0-1023：系统端口或特权端口(仅管理员可用) ，众所周知，永久的分配给固定的系统应用使用。<br>1024-49151：用户端口或注册端口，但要求并不严格，分配给程序注册为某应用使用。<br>49152-65535：动态端口或私有端口，客户端程序随机使用的端口,其默认的端口范围的定义：<code>/proc/sys/net/ipv4/ip_local_port_range</code></div>Linux中记录应用程序的端口号文件:<code>cat /etc/services</code><br>客户端的端口是随机的<br><img src="https://s2.ax1x.com/2019/06/05/VNsoct.png" alt=""></p><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>IP地址由两部分组成:<br>　网络ID:标识网络 每个网段分配一个网络ID<br>　主机ID:标识单个主机 由组织分配给各个设备</p><h2 id="公式："><a href="#公式：" class="headerlink" title="公式："></a>公式：</h2><p>一个网络中主机最大数=2^主机ID位数(32-网络ID位数)-2=2^(32-网络ID位数)-2<br>网络数=2^可变网络ID位<br>子网号(网络号)=ip地址与子网掩码相与得到<br>子网数目:在默认掩码的基础上，网络位向主机位借的位数借了几位，就是2的几次方。<br>有效IP地址:网络号+1——广播地址减1<br>主机号:ip地址的二进制和子网掩码的二进制的反码(之前的0变成1,1变成0)进行与运算<br>广播地址:在网络号的基础上，将主机号全部变为1</p><div class="alert alert-success"><br>A<br>1-126.X.Y.Z<br>1600万<br>网络ID位为高8位，主机ID位为24 可变网络位2^7=128-2=126<br>0xxxxxxx.X.Y.Z<br>00000000 0<br>01111111 127<br><br>B<br>128-191.x.y.z<br>网络ID位为高16位，主机ID位为16 可变网络位2^14<br>10xxxxxx.X.Y.Z<br>10000000. 128<br>10111111. 191<br>65534<br><br>C<br>192-223.x.y.z<br>网络ID位为高24位，主机ID位为8<br>110xxxxx.x.y.z<br>11000000 192<br>11011111 223<br>254</div><p>无类域间路由CIDR:网络id位数不确定<br>254 252 248 242 224 192 128<br>netmask子网掩码: 32bit 二进制,对应于网络ID位为1，对应于主机ID位为0<br>255.255.224.0 主机数：2^13-2</p><font color="red">网络ID相同就是在同一个网络,    网络ID就是IP地址和本地的子网掩码进行与计算得到的值，是与本机的子网掩码进行的与运算，因为查看与本机的网络是否相同。重点记住与本机的掩码进行的与运算。有坑</font><p>CIDR表示法: IP/网络ID位数 10.0.0.100/19 255.255.224.0 有19个1</p><pre><code>题目：203.110.200.199/22  1 主机数?1022    2^(32-22)-22 netmask?255.255.252.03 网络ID值?</code></pre><p>11111111 11111111 11111100 00000000 /22二进制表示<br>255.255.252.0</p><p>网络ID值<br>203.110.200.199:二进制。网络ID为前22位，主机ID位后10位</p><pre><code>11001011 01101110 110010 00 11000111 203.110.200.19911111111 11111111 111111 00 00000000 255.255.252.011001011 01101110 110010 00 00000000 203.110.200.0/22</code></pre><div class="note primary"><br>网络ID具体值=IP 与运算 子网掩码<br>192.168.34.6<br>255.255.255.0<br>192.168.34.0/24 </div><br><div class="alert alert-warning">题目：求 100.123.199.124/20<br>主机数：<br>01100100 01010011 1100 0111 01111100 ip二进制<br>11111111 11111111 1111 0000 00000000 /20<br>2^12-2=4096-2=4064<br><br>子网掩码：<br>255.255.240.0<br><br>网络ID：100.123.192.0/20<br>                  1100 0111<br>                  1111 0000<br>01100100 10000100 1100 0000 00000000<br>100.123.192.0/20<br><br>最小和最大IP：100.123.192.1 ➜ 100.123.207.254<br>通过网络ID 100.123.192.0/20,又前20位为网络位，所以只能是后面的从小到大<br>100.123.1100 0000.00000001 ➜ 100.123.192.1<br>100.123.1100 1111.11111110 ➜ 100.123.207.254<br></div><h2 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h2><p>一个子网划分成多少个小网。网络ID位变多，主机ID位才变少，网络ID向主机ID借位。分成2^N个小子网<br>10.0.0.1–10.255.255.254<br>划分两个子网<br>10.00 000000.0.0 </p><p>10.00 000000.0.0 10.0.0.0/10<br>10.01 000000.0.0 10.64.0.0/10<br>10.10 000000.0.0 10.128.0.0/10<br>10.11 000000.0.0 10.192.0.0/10</p><div class="alert alert-danger">题目:<br>10.0.0.0/8 给32省份划分各自子网<br>1.子网子网掩码 255.248.0.0<br>2.最小子网，最大子网的网络ID<br>3.每个子网主机数？2^19-2<br>4.第20个子网分给河南使用，最小ip，最大IP范围? 10.152.0.1 ➜ 10.159.255.254<br><center> 1. 根据公式2^n=子网数<br>    2^n=32 也就是借5位 8+5=13 网络位是13<br>掩码: 255.11111000.0.0 ➜ 255.248.0.0<br><br>2. 10.00000 000.0.0 10.0.0.0/13<br>   10.11111 000.0.0 10.248.0.0/13<br><br>3. 主机数: 2^(32-13)-2=<br><br>4. 0表示第一个子网，那么19就表示第20个子网也就是”10011”(这里加起来是19)<br>10.10011 000.0.1 ➜ 10.152.0.1<br>10.10011 111.255.254 ➜ 10.159.255.254<br></center><br></div><div class="alert alert-warning"><br>题目:河南省10.152.0.0/13 给15个市，划分各自子网<br><br>1. 子网子网掩码：<br>2^n&gt;=15 n&gt;=4 13+4=17位<br>11111111.11111111.1 0000000.00000000<br>255.255.128.0<br><br>2. 最小子网，最大子网的网络ID:<br>原：10.10011 000.0.0 10.152.0.0/13<br>现：10.10011 <font color="red">000.0</font> .0 借了4位<br>    10.10011 000.00000000.0 ➜ 10.152.0.0/17<br>    10.10011 111.10000000.0 ➜ 10.159.128.0/17<br><br>3. 每个子网主机数？<br>2^(32-17)-2<br><br>4. 最大子网的最小IP,最大IP范围<br>10.10011 111.10000000.0 最大子网<br>10.10011 111.1 0000000.1 ➜ 10.159.128.1<br>10.10011 111.1 1111111.254 ➜ 10.159.255.254<br></div><h2 id="合并超网"><a href="#合并超网" class="headerlink" title="合并超网"></a>合并超网</h2><p>多个小网合并成一个大网，主机ID向网络ID借位<br>220.78.10101 000.0<br>220.78.10101 001.0<br>220.78.10101 111.0<br>这几个IP前面都一样直接写 220.78.168.0/21<br>route -n 查看路由表 <table><tr><td bgcolor="ff4d40"><font size="4">路由表:<br>　　目标网络ID:目标网络所在网络ID<br>　　接口:本设备要发送数据包到目标，从哪个接口发送出来，才能到达<br>　　网关:到达目标网络，需要将数据交给下一个路口哪个接口的对应IP<br>路由的分类优先级排列：<br>　　主机路由<br>　　网络路由<br>　　默认路由<br>优先级:精度越高，优先级越高</font></td></tr></table>.</p><font color="red">DNS解析优先级： vim /etc/nsswitch.conf</font><h2 id="网络基本配置"><a href="#网络基本配置" class="headerlink" title="网络基本配置"></a>网络基本配置</h2><p>CentOS 6网卡名称<br>接口命名方式：CentOS 6 以太网：eth[0,1,2,…] ppp：ppp[0,1,2,…]<br>　　网络接口识别并命名相关的udev配置文件：<br>/etc/udev/rules.d/70-persistent-net.rules<br>　　查看网卡：<br>dmesg |grep –i eth<br>ethtool -i eth0<br>　　卸载网卡驱动：<br>modprobe -r e1000 rmmod e1000<br>　　装载网卡驱动：<br>modprobe e1000</p><h2 id="route命令"><a href="#route命令" class="headerlink" title="route命令"></a>route命令</h2><p>　　路由管理命令<br>　　查看：route -n<br>　　添加：route add<br>route add    [-net|-host]    target [netmask Nm] [gw Gw] [[dev] If]<br>　　目标：192.168.1.3    网关：172.16.0.1<br>route add -host 192.168.1.3 gw 172.16.0.1 dev eth0<br>　　目标：192.168.0.0 网关：172.16.0.1<br>route add -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1 dev eth0<br>route add -net 192.168.0.0/24 gw 172.16.0.1 dev eth0</p><p>route命令<br>　　默认路由，网关：172.16.0.1<br>route add -net 0.0.0.0 netmask 0.0.0.0 gw 172.16.0.1<br>route add default gw 172.16.0.1<br>　　删除：route del<br>route del [-net|-host] target [gw Gw] [netmask Nm] [[dev] If]<br>　　目标：192.168.1.3    网关：172.16.0.1<br>route del -host 192.168.1.3<br>　　目标：192.168.0.0 网关：172.16.0.1<br>route del -net 192.168.0.0 netmask 255.255.255.0</p><p><code>netstat -ntau | sed -nr &#39;/^tcp/s/.* ([^ ]+) ?/\1/p&#39; | sort | unip -c</code></p><h2 id="ip设置网卡状态"><a href="#ip设置网卡状态" class="headerlink" title="ip设置网卡状态"></a>ip设置网卡状态</h2><p>ip link set eth1 down<br>ip link set eth1 up<br>ip addr add 1.1.1.1/24 dev ens37<br>ip addr del 1.1.1.1/24 dev ens37<br>ip addr flush dev eth1 清空地址</p><p>ip route - routing table management<br>添加路由：ip route add<br>ip route add TARGET via GW dev IFACE src SOURCE_IP TARGET:<br>主机路由：IP<br>网络路由：NETWORK/MASK<br>ip route add 192.168.0.0/24 via 172.16.0.1 ip route add 192.168.1.13 via 172.16.0.1<br>添 加 网 关 ：ip route add default via GW dev IFACE ip route add    default via 172.16.0.1<br>删除路由：ip route del TARGET 显示路由：ip route show|list<br>清空路由表：ip route flush    [dev IFACE]    [via PREFIX]<br>ip route flush dev eth0</p><p>网络配置文件<br>　　/etc/sysconfig/network-scripts/route-IFACE<br>•    注意：需service network restart生效<br>•    两种风格：<br>(1)    TARGET via GW<br>如 ：10.0.0.0/8 via 172.16.0.1<br>(2)    每三行定义一条路由 ADDRESS#=TARGET NETMASK#=mask GATEWAY#=GW</p><p>创建bonding设备的配置文件<br>/etc/sysconfig/network-scripts/ifcfg-bond0 </p><p>DEVICE=bond0<br>BOOTPROTO=none<br>BONDING_OPTS=”mode=1,miimon=100” 工作模式为1，后面指两个机子之间间隔100毫秒进行通讯</p><p>/etc/sysconfig/network-scripts/ifcfg-eth0<br>DEVICE=eth0<br>BOOTPROTO=none<br>MASTER=bond0<br>SLAVE=yes</p><p>查看bond0状态：/proc/net/bonding/bond0</p><h1 id="进程优先级"><a href="#进程优先级" class="headerlink" title="进程优先级"></a>进程优先级</h1><p>进程优先级：<br>系统优先级：数字越小，优先级越高<br>0-139（CentOS4,5）<br>各有140个运行队列和过期队列<br>0-98，99（CentOS6）<br>实时优先级:  99-0  值最大优先级最高<br>nice值：-20到19，对应系统优先级100-139或99<br>　　Big O：时间复杂度，用时和规模的关系<br>O(1), O(logn), O(n)线性, O(n^2)抛物线, O(2^n)</p><h2 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h2><p>　　Linux内核：抢占式多任务<br>　　进程类型：<br>守护进程: daemon,在系统引导过程中启动的进程，和终端无关进程<br>前台进程：跟终端相关，通过终端启动的进程注意：两者可相互转化<br>　　进程状态：<br>运行态：running<br>就绪态：ready<br>睡眠态：<br>可中断：interruptable<br>不可中断：uninterruptable<br>停止态：stopped,暂停于内存，但不会被调度，除非手动启动<br>僵死态：zombie，结束进程，父进程结束前，子进程不关闭</p><h2 id="系统管理工具"><a href="#系统管理工具" class="headerlink" title="系统管理工具"></a>系统管理工具</h2><p>进程的分类：<br>CPU-Bound：CPU密集型，非交互<br>IO-Bound：IO密集型，交互<br>　　Linux系统状态的查看及管理工具：pstree, ps, pidof, pgrep, top, htop, glance, pmap, vmstat, dstat, kill, pkill, job, bg,<br>fg, nohup<br>　　pstree命令：显示树状的进程关系<br>　　里面花括号代表的是线程<br>　　pstree -p 以树状图显示进程，还显示进程PID。<br>pstree    display a tree of processes<br>　　ps: process state<br>ps    report a snapshot of the current processes<br>ps能看到当前进程的状态快照<br>Linux系统各进程的相关信息均保存在/proc/PID目录下的各文件中</p><h2 id="ps查看进程进程"><a href="#ps查看进程进程" class="headerlink" title="ps查看进程进程"></a>ps查看进程进程</h2><p>ps [OPTION]…<br>支持三种选项：<br>UNIX选项   如-A   -e<br>BSD选项    如a<br>GNU选项    如–help<br>•    选项：默认显示当前终端中的进程<br>•    a  选项包括所有终端中的进程<br>•    x  选项包括不链接终端的进程<br>•    u  选项显示进程所有者的信息<br>•    f  选项显示进程树,相当于 –forest<br>•    k|–sort 属性 对属性排序,属性前加- 表示倒序<br>•    o  属性… 选项显示定制的信息<code>ps axo pid,%cpu,%mem,cmd</code> 显示选定的选项<br>•    L 显示支持的属性列表</p><p>ps常见选项<br>-C cmdlist 指定命令，多个命令用，分隔<br>-L 显示线程<br>-e: 显示所有进程，相当于-A<br>-f: 显示完整格式程序信息<br>-F: 显示更完整格式的进程信息<br>-H: 以进程层级格式显示进程相关信息<br>-u userlist 指定有效的用户ID或名称<br>-U userlist 指定真正的用户ID或名称<br>-g gid或groupname 指定有效的gid或组名称<br>-G gid或groupname 指定真正的gid或组名称<br>-p pid 显示指pid的进程<br>–ppid pid 显示属于pid的子进程<br>-M 显示SELinux信息，相当于Z</p><p>ps输出属性<br>VSZ: Virtual memory SiZe，虚拟内存集，线性内存<br>RSS: ReSident Size, 常驻内存集<br>STAT：进程状态<br>S:    interruptable sleeping 可中断休眠<br>D:    uninterruptable sleeping<br>T:    stopped<br>Z:    zombie<br>+: 前台进程<br>l: 多线程进程<br>L：内存分页并带锁<br>N：低优先级进程 &lt;: 高优先级进程<br>s: session leader，会话（子进程）发起者</p><p>ps<br>　　ni: nice值<br>　　pri: priority 优先级<br>　　psr: processor CPU编号<br>　　rtprio: 实时优先级<br>示例：<br>ps axo pid,cmd,psr,ni,pri,rtprio<br>　　常用组合：<br>aux<br>-ef<br>-eFH<br>-eo pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,comm<br>axo stat,euid,ruid,tty,tpgid,sess,pgrp,ppid,pid,pcpu,comm</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h2><p>查询你拥有的所有进程 ps -x<br>显示指定用户名(RUID)或用户ID的进程 ps -fU apache<br>ps -fU 48<br>显示指定用户名(EUID)或用户ID的进程 ps -fu wang<br>ps -fu 1000<br>查看以root用户权限（实际和有效ID）运行的每个进程 ps -U root -u root<br>列出某个组拥有的所有进程（实际组ID：RGID或名称） ps -fG nginx</p><p>列出有效组名称（或会话）所拥有的所有进程 ps -fg mysql<br>ps -fg 27<br>显示指定的进程ID对应的进程<br>ps -fp 1234<br>以父进程ID来显示其下所有的进程，如显示父进程为1234的所有进程 ps -f –ppid 1234<br>显示指定PID的多个进程<br>ps -fp 1204,1239,1263<br>要按tty显示所属进程 ps -ft pts/0</p><p>以进程树显示系统中的进程如何相互链接 ps -e –forest<br>以进程树显示指定的进程<br>ps -f –forest -C sshd<br>ps -ef –forest | grep -v grep | grep sshd<br>要显示一个进程的所有线程,将显示LWP（轻量级进程）以及NLWP（轻量级进程数）列<br>ps -fL -C nginx<br>要列出所有格式说明符<br>ps L<br>查看进程的PID，PPID，用户名和命令 ps -eo pid,ppid,user,cmd</p><p>自定义格式显示文件系统组,ni值开始时间和进程的时间 ps -p 1234 -o pid,ppid,fgroup,ni,lstart,etime<br>使用其PID查找进程名称：<br>ps -p 1244 -o comm=<br>要以其名称选择特定进程，显示其所有子进程 ps -C sshd,bash<br>查找指定进程名所有的所属PID，在编写需要从std输出或文件读取PID的脚本时这个参数很有用<br>ps -C httpd,sshd -o pid=<br>检查一个进程的执行时间<br>ps -eo comm,etime,user | grep nginx</p><p>查找占用最多内存和CPU的进程<br>ps -eo pid,ppid,cmd,%mem,%cpu –sort=-%mem | head ps -eo pid,ppid,cmd,%mem,%cpu –sort=-%cpu | head<br>显示安全信息 ps -eM<br>ps –context<br>使用以下命令以用户定义的格式显示安全信息 ps -eo euser,ruser,suser,fuser,f,comm,label<br>使用watch实用程序执行重复的输出以实现对就程进行实时的监视，如下面的命令显示每秒钟的监视<br>watch -n 1 ‘ps -eo pid,ppid,cmd,%mem,%cpu –sort=-%mem | head’</p><h2 id="进程优先级-1"><a href="#进程优先级-1" class="headerlink" title="进程优先级"></a>进程优先级</h2><p>进程优先级调整<br>静态优先级：100-139<br>进程默认启动时的nice值为0，优先级为120只有根用户才能降低nice值（提高优先性）<br>nice命令<br>nice [OPTION] [COMMAND [ARG]…]<br>renice命令<br>renice [-n] priority pid…<br>查看<br>ps axo pid,comm,ni</p><h2 id="搜索进程"><a href="#搜索进程" class="headerlink" title="搜索进程"></a>搜索进程</h2><p>最灵活：ps 选项  | 其它命令<br>按预定义的模式：pgrep pgrep [options] pattern<br>-u uid: effective user，生效者<br>-U uid: real user，真正发起运行命令者<br>-t terminal: 与指定终端相关的进程 搜索终端运行的相关进程 <code>pgrep -t pts/0</code><br>-l: 显示进程名<br>-a: 显示完整格式的进程名<br>-P pid: 显示指定进程的子进程 <code>pgrep -P 5297</code><br>按确切的程序名称：/sbin/pidof<br>pidof bash 查询某个进程对应的进程编号</p><h2 id="uptime-1"><a href="#uptime-1" class="headerlink" title="uptime"></a>uptime</h2><p>显示当前时间，系统已启动的时间、当前上线人数，系统平均负载（1、5、10分钟的平均负载，一般不会超过1）<br>系统平均负载:<br>指在特定时间间隔内运行队列中的平均进程数<br>通常每个CPU内核的当前活动进程数不大于3，那么系统的性能良好。如果每个CPU内核的任务数大于5，那么此主机的性能有严重问题<br>如果linux主机是1个双核CPU，当Load Average 为6的时候说明机器已经被充分使用</p><h2 id="top：有许多内置命令排序："><a href="#top：有许多内置命令排序：" class="headerlink" title="top：有许多内置命令排序："></a>top：有许多内置命令排序：</h2><p>P：以占据的CPU百分比,%CPU<br>M：占据内存百分比,%MEM<br>T：累积占据CPU时长,TIME+<br>首部信息显示：<br>uptime信息：l命令<br>tasks及cpu信息：t命令<br>cpu分别显示：1 (数字)<br>memory信息：m命令<br>退出命令：q<br>修改刷新时间间隔：s<br>终止指定进程：k<br>保存文件:W<br>栏位信息简介<br>us：用户空间<br>sy：内核空间<br>ni：调整<br>nice时间<br>id：空闲<br>wa：等待<br>IO时间<br>hi：硬中断<br>si：软中断（模式切换）<br>st：虚拟机偷走的时间</p><h2 id="内存工具"><a href="#内存工具" class="headerlink" title="内存工具"></a>内存工具</h2><p>内存工具<br><i class="fa fa-eercast" aria-hidden="true"></i>vmstat命令：虚拟内存信息<br>vmstat [options] [delay [count]]<br>vmstat 2 5<br><i class="fa fa-eercast" aria-hidden="true"></i>procs:<br>r：可运行（正运行或等待运行）进程的个数，和核心数有关b：处于不可中断睡眠态的进程个数(被阻塞的队列的长度)<br><i class="fa fa-eercast" aria-hidden="true"></i>memory：<br>swpd: 交换内存的使用总量<br>free：空闲物理内存总量<br>buffer：用于buffer的内存总量<br>cache：用于cache的内存总量<br><i class="fa fa-eercast" aria-hidden="true"></i>swap:<br>si：从磁盘交换进内存的数据速率(kb/s)<br>so：从内存交换至磁盘的数据速率(kb/s)<br><i class="fa fa-eercast" aria-hidden="true"></i>io：<br>bi：从块设备读入数据到系统的速率(kb/s)<br>bo: 保存数据至块设备的速率</p><h2 id="iostat-统计CPU和设备IO信息示例："><a href="#iostat-统计CPU和设备IO信息示例：" class="headerlink" title="iostat:统计CPU和设备IO信息示例："></a>iostat:统计CPU和设备IO信息示例：</h2><p>iostat 1 10 每秒显示一次，显示10次<br>pmap命令：进程对应的内存映射<br>pmap [options] pid […]<br>-x: 显示详细格式的信息<br>示例：pmap 1<br>另外一种实现<br>cat /proc/PID/maps</p><h2 id="dstat-系统资源统计-代替vmstat-iostat"><a href="#dstat-系统资源统计-代替vmstat-iostat" class="headerlink" title="dstat 系统资源统计,代替vmstat,iostat"></a>dstat 系统资源统计,代替vmstat,iostat</h2><p>-g 显示page相关统计数据<br>-m 显示memory相关统计数据<br>-n 显示network相关统计数据<br>-p 显示process相关统计数据<br>-r 显示io请求相关的统计数据<br>-c 显示cpu相关信息<br>-s 显示swapped相关的统计数据<br>–top-cpu：显示最占用CPU的进程<br>–top-io: 显示最占用io的进程<br>–top-mem: 显示最占用内存的进程<br>–top-latency: 显示延迟最大的进程</p><p>　</p><h2 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h2><p>向进程发送控制信号，以实现对进程管理,每个信号对应一个数字，信号名称以SIG开头（可省略），不区分大小写<br>显示当前系统可用信号： kill –l  或者 trap -l<br>常用信号：man 7 signal<br>1)SIGHUP 无须关闭进程而让其重读配置文件<br>2) SIGINT    中止正在运行的进程；相当于Ctrl+c<br>3)    SIGQUIT    相当于<code>ctrl+\</code><br>9)    SIGKILL    强制杀死正在运行的进程<br>15)    SIGTERM  终止正在运行的进程<br>18)    SIGCONT  继续运行<br>19)    SIGSTOP   后台休眠<br>　　　指定信号的方法 : (1) 信号的数字标识：1, 2, 9<br>　　　　　　　　　　　(2)信号完整名称：SIGHUP<br>　　　　　　　　　　　(3)信号的简写名称：HUP <div class="alert alert-danger">[root@centos7 ~]# pidof httpd　　<code>pidof</code> 查看应用程序的进程编号<br>20108 20107 20106 20105 20104 19310　　理论上应该是最小的进程标号<br>kill -1 19310 无须关闭进程而让其重读配置文件<br>kill 进程编号 杀死进程</div><br>kill -n pid -n可加可不加<code>kill -n 15 93808</code><br><code>kill -0 1</code> -0表示进程的错误检查，然后查看返回值echo $?<br>按名称：killall httpd killall后面跟程序名称<br>按模式: pkill [选项] command<br>-u uid: effective user，生效者<br>-U uid: real user，真正发起运行命令者<br>-t terminal: 与指定终端相关的进程<br>-l: 显示进程名（pgrep可用）<br>-a: 显示完整格式的进程名（pgrep可用）<br>-P pid: 显示指定进程的子进程</p><font color="red">ss -ntl 查看启动的服务端口</font><h1 id="linux-作业控制"><a href="#linux-作业控制" class="headerlink" title="linux 作业控制"></a>linux 作业控制</h1><p>ping 127.0.0.1<br>ctrl z 调到后台停止<br>jobs 查看当前终端所有作业<br>bg 1 将指定进程号的程序放到后端执行<br>fg 1 调到前台来运行<br>后端运行到后端停止 killall -19 ping<br>后端停止到后端运行 killall -18 ping<br>ping 127.0.0.1 &amp; 直接调到后台运行</p><p>后台作业虽然被送往后台运行，但其依然与终端相关；退出终端，将关闭后台作业。如果希望送往后台后，剥离与终端的关系<br>nohup COMMAND &amp;&gt;/dev/null 因为nohup会默认有一个命令输出记录，所以不想看就指定路径为垃圾箱<br>screen；COMMAND 相当于在screen这个容器里面运行，即使终端断开也不会停止。screen -ls 查看</p><h2 id="同时运行"><a href="#同时运行" class="headerlink" title="同时运行"></a>同时运行</h2><pre><code>[root@centos7 ~]# cat a.shping 127.0.0.1 &amp;ping 127.0.0.2 &amp;ping 127.0.0.3 &amp;</code></pre><p><code>{ ping 127.0.0.1 &amp; ping 127.0.0.2 &amp; ping 127.0.0.3 &amp;}</code><br><code>(ping 127.1&amp;);(ping 127.2&amp;);(ping 127.3&amp;)</code></p><h3 id="两组命令同时执行"><a href="#两组命令同时执行" class="headerlink" title="两组命令同时执行"></a>两组命令同时执行</h3><p><code>{ { ping -c3 127.1;ping 127.2; }&amp; { ping -c3 127.3;ping 127.4; }&amp; };</code> </p><pre><code>{ping -c2 127.0.0.1ping 127.0.0.2}&amp;{ping -c2 127.0.0.3ping 127.0.0.4}&amp;</code></pre><h1 id="任务计划"><a href="#任务计划" class="headerlink" title="任务计划"></a>任务计划</h1><h2 id="at"><a href="#at" class="headerlink" title="at"></a>at</h2><p>指定时间点，执行一次性任务<br>at命令:at [option] TIME <font color="red"><br>-V </font>显示版本信息 <font color="red"><br>-t </font>time 时间格式 [[CC]YY]MMDDhhmm[.ss] <font color="red"><br>-l </font>列出指定队列中等待运行的作业；相当于atq <font color="red"><br>-d </font>删除指定的作业；相当于atrm <font color="red"><br>-c </font>查看具体作业任务 at -c 加作业序号<font color="red"><br>-f </font>/path/file 指定的文件中读取任务 <font color="red"><br>-m </font>当任务被完成之后，将给用户发送邮件，即使没有标准输出 <font color="red"><br>注意：作业执行命令的结果中的标准输出和错误以邮件通知给相关用户 </font> </p><pre><code>[root@centos7 \~]# at 18:00 2018-10-31at&gt; poweroffctrl d 结束</code></pre><p>任务存放的路径: cat /var/spool/at/</p><p><font color="red">计划任务不要有标准输出，因为他不会在屏幕显示</font><br><code>echo -e &#39;poweroff\ntouch /data/at.log&#39; | at 18:00</code> 也支持这种格式<br><code>echo &#39;poweroff;ntouch /data/at.log&#39; | at 18:00</code></p><div class="alert alert-warning"><i class="fa fa-clock-o"></i> at 定义时间格式<br><code>at now+10minutes</code> 表示现在的10分钟以后执行<br><code>touch /test</code><br><code>ctrl d 结束</code><br><font size="3"><br>HH:MM 02:00 <font color="2f4f4f"><br>在今日的 HH:MM 进行，若该时刻已过，则明天此时执行任务</font><br>HH:MM YYYY-MM-DD  02:00 2016-09-20 <font color="2f4f4f"><br>规定在某年某月的某一天的特殊时刻进行该项任务</font><br>HH:MM[am|pm] [Month] [Date]<br>04pm March 17<br>17:20 tomorrow<br>HH:MM[am|pm] + number [minutes|hours|days|weeks]<br>在某个时间点再加几个时间后才进行该项任务 now + 5 min<br>02pm + 3 days </font></div><p>执行方式<br>1.交互式 2.输入重定向 3.at –f 文件</p><table><tr><td bgcolor="#FFF0F5"><font size="4">at队列存放在/var/spool/at目录中<br>/etc/at.{allow,deny}控制用户是否能执行at任务 <font color="ff00"><br><i class="fa fa-bookmark-o"></i></font> 白名单：/etc/at.allow 默认不存在，只有该文件中的用户才能执行at命令 <font color="ff00"><br><i class="fa fa-bookmark-o"></i></font> 黑名单：/etc/at.deny 默认存在，拒绝该文件中用户执行at命令，而没有在 at.deny 文件中的使用者则可执行 <font color="009AFF"><br>当一个用户去指定计划任务，系统会先看有没有白名单文件，如果白名单文件中有这个用户就可以执行。如果有白名单文件但是里面没有这个用户，那么这个用户也不能创建查看计划任务。如果没有这个白名单文件就继续看黑名单文件，有用户就会被拒绝,没有则允许创建。</font><br>如果两个文件都不存在，则只有root可以执行at命令<br></font></td></tr></table><h2 id="cron周期性任务计划"><a href="#cron周期性任务计划" class="headerlink" title="cron周期性任务计划"></a>cron周期性任务计划</h2><p>相关的程序包：<font color="ff00"><br><i class="fa fa-bookmark-o"></i></font> cronie：主程序包，提供crond守护进程及相关辅助工具 <font color="ff00"><br><i class="fa fa-bookmark-o"></i></font> cronie-anacron：cronie的补充程序，用于监控cronie任务执行状况，如cronie中的任务在过去该运行的时间点未能正常运行，则anacron会随后启动一次此任务 <font color="ff00"><br><i class="fa fa-bookmark-o"></i></font> crontabs：包含CentOS提供系统维护任务<br>确保crond守护处于运行状态：<br>CentOS 7:<br>　　<code>systemctl status crond</code><br>CentOS 6:<br>　　<code>service crond status</code><br>计划周期性执行的任务提交给crond，到指定时间会自动运行<br>　系统cron任务：系统维护作业<br>　　/etc/crontab<br>用户cron任务：<br>　　crontab命令<br>日志：/var/log/cron<br><img src="https://s2.ax1x.com/2019/06/17/V7Dy79.png" alt=""> </p><p id="div-border-left-red">@yearly   <code>0 0 1 1 * 每年</code>  　　特定的字符<br>@annually <code>0 0 1 1 * 每年</code><br>@monthly  <code>0 0 1 * * 每月</code><br>@weekly   <code>0 0 * * 0 每周</code><br>@daily    <code>0 0 * * * 每日</code><br>@hourly   <code>0 * * * * 每小时</code><br>@reboot   <code>重启后</code></p> <font color="dc143c">*表示任何时候都匹配；<br>可以用<code>A,B,C</code>表示A或者B或者C时执行命令<br>可以用<code>A-B</code>表示A到B之间时执行命令<br>可以用<code>*/A</code>表示每A分钟(小时等)执行一次命令</font>.<br>vim /etc/crontab 只给root账户使用（上图的路径是另外保存的文件）<br>普通用户用<code>vim crontab</code> 因为他调用的vi所有没有颜色<br><code>export EDITOR=vim</code> 使他调用vim<br>普通用户和root里面的格式一样，只不用写用户名。创建好后文件在/var/spool/cron<br>每个用户都有专用的cron任务文件：/var/spool/cron/USERNAME<br><code>crontab -e -u pan</code> 指定以pan用户的计划身份去更改(谁创建的就指定谁去更改，只有创建者才能看到创建的内容) <font color="red"><br>-l</font> 列出所有任务 <font color="red"><br>-e</font> 编辑任务 <font color="red"><br>-r</font> 移除所有任务 <font color="red"><br>-i同-r</font> 一同使用，以交互式模式移除指定任务,询问<font color="red"><br>-u user</font> 仅root可运行，指定用户管理cron任务<br>控制用户执行计划任务:/etc/cron.{allow,deny}<br>没有被重定向的输出会被邮寄给用户<br>root能够修改其它用户的作业 <div class="alert alert-info">注意：运行结果的标准输出和错误以邮件通知给相关用户<br>(1)    COMMAND &gt; /dev/null<br>(2)    COMMAND &amp;&gt; /dev/null<br>对于cron任务来讲，%有特殊用途；如果在命令中要使用%，则需要转义，将%放置于单引号中，则可不用转义</div><p></p><p><script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/highlight.min.js"></script></p><p><script>hljs.initHighlightingOnLoad();</script></p><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/styles/an-old-hope.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;FZShuTi&quot;&gt;linux 培训文档 &lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="Document" scheme="http://yoursite.com/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>ghost</title>
    <link href="http://yoursite.com/2018/08/28/%E5%89%8D%E8%A8%80/"/>
    <id>http://yoursite.com/2018/08/28/前言/</id>
    <published>2018-08-28T09:28:03.000Z</published>
    <updated>2019-08-18T10:10:40.979Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="FZShuTi"><font size="5">As long as it starts it will not end！</font></font></center><br><a id="more"></a></p><style type="text/css"> body{background-image:url(https://ws1.sinaimg.cn/large/005RRiqRly1fvw1bz9he2j33dc28w4qu.jpg);background-position:center;           background-repeat:repeat-y；}</style><h1 id="魔术"><a href="#魔术" class="headerlink" title="魔术"></a>魔术</h1><p><center><font size="2">剪辑届 “巫男” 的创意新作《魔术》本文作分享，请勿用于商业用途。</font></center><video playsinline="" webkit-playsinline="" preload="auto" controls src="https://cdn-video.xinpianchang.com/5bbebf46c2b87.mp4 " width="100%"></video></p><h1 id="【派大星的独白】一个关于正常人的故事"><a href="#【派大星的独白】一个关于正常人的故事" class="headerlink" title="【派大星的独白】一个关于正常人的故事"></a>【派大星的独白】一个关于正常人的故事</h1><div class="aspect-ratio"><br>    <iframe src="//player.bilibili.com/player.html?aid=60731116&cid=106015992&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;FZShuTi&quot;&gt;&lt;font size=&quot;5&quot;&gt;As long as it starts it will not end！&lt;/font&gt;&lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>command</title>
    <link href="http://yoursite.com/2018/08/28/linux%20command/"/>
    <id>http://yoursite.com/2018/08/28/linux command/</id>
    <published>2018-08-28T09:28:03.000Z</published>
    <updated>2019-08-01T10:50:17.752Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="FZShuTi">linux 常用命令集合:</font></center><br><a id="more"></a></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><pre><strong><font color="lime">[root@pan ~]#</font> root:登录的用户　@分隔符　  pan主机名　<font color="blue">~</font>当前路径</strong><br><strong><font color="red">\</font>:newline</strong></pre>  <code>echo $PATH</code><br>ctrl+r:在历史命令中搜索。   ctrl+s:暂停屏幕输出。    ctrl+q:恢复屏幕输出。<br><code>&quot;&amp;&quot; &quot;||&quot; &quot;!&quot;</code><br>只用普通用户登录Shell是<code>/bin/bash</code></p><h1 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h1><p>cat  由第一行开始显示文件内容<br>tac  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！  <font color="red"><br>-n</font> 显示的时候，顺道输出行号！  <font color="red"><br>-A</font>:查询所有的内容包括隐藏字符</p><h1 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h1><p><font color="red">-F</font>:在每个输出项后追加文件的类型标识符，具体含义：<br><strong>“*“</strong>表示具有可执行权限的普通文件<br><strong>“/“</strong>表示目录  <strong>“@”</strong>表示符号链接<br><strong>“|”</strong>表示命令管道FIFO<br><strong>“=”</strong>表示sockets套接字<br>当文件为普通文件时，不输出任何标识符<br><code>drwxr-xr-x. 3 root root   24 May 11 23:29 Music</code><br>这里的3: 如果是普通文件就表示链接次数，如果是目录文件就表示目录下的一级子目录数。<br>ls -s:表示在每个文件前面显示出大小</p><h1 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h1><p><font color="lime">#</font>echo [选项][输出内容] <font color="blue"><br><strong><code>echo -e &quot;\e[1;31m abcd \e[0m&quot;</code></strong></font> 输出颜色<br>=30m 黑色，=31m 红色，=32m 绿色，<br>=33m 黄色，=34m 蓝色，=35m 洋红，<br>=36m 青色，=37m 白色。<br><strong><code>&quot;echo -e ab\bc&quot;</code></strong> <font color="red"> 控制字符在末尾可能不执行。<br>-e</font>:支持反斜线控制的字符转换</p><table><thead><tr><th>控制字符</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>\</td><td style="text-align:center">输出\本身</td></tr><tr><td>\a</td><td style="text-align:center">输出警告音</td></tr><tr><td>\b</td><td style="text-align:center">\退格键，也就是向左删除键</td></tr><tr><td>\c</td><td style="text-align:center">取消输出行末的换行符，和“-n”选项一致</td></tr><tr><td>\e</td><td style="text-align:center">ESCAPE键</td></tr><tr><td>\f</td><td style="text-align:center">换页符</td></tr><tr><td>\n</td><td style="text-align:center">换行符</td></tr><tr><td>\r</td><td style="text-align:center">回车键</td></tr><tr><td>\t</td><td style="text-align:center">制表符，也就是Tab键</td></tr><tr><td>\v</td><td style="text-align:center">垂直制表符</td></tr><tr><td>\0nm</td><td style="text-align:center">按照八进制ASCII码输出字符，其中0为数字零，nnn是三位八进制数</td></tr><tr><td>\xhh</td><td style="text-align:center">按照十六进制ASCII码表输出字符。其中hh是两位十六进制数。</td></tr></tbody></table><h1 id="I-o-redirection"><a href="#I-o-redirection" class="headerlink" title="I/o redirection"></a>I/o redirection</h1><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向:"></a>输出重定向:</h2><p>命令 <strong><code>&gt; 文件 2&gt;&amp;1</code></strong> :以覆盖的方式，把正确输出和错误输出都保存在一个文件当中。<br>命令 <strong><code>&amp;&gt;文件</code></strong> :以覆盖的方式，把正确输出和错误输出都保存到同一个文件当中。</p><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/05/EB9uMq.md.jpg)"><font color="#FFD700">&amp; 是一个描述符，如果1或2前不加&amp;，会被当成一个普通文件。<br>1&gt;&amp;2 意思是把标准输出重定向到标准错误.<br>2&gt;&amp;1 意思是把标准错误输出重定向到标准输出<br>&amp;&gt;filename 意思是把标准输出和标准错误输出都重定向到文件filename中</font></td></tr></table>  </p><h2 id="输入重定向：命令-lt-文件"><a href="#输入重定向：命令-lt-文件" class="headerlink" title="输入重定向：命令 &lt;文件"></a>输入重定向：命令 &lt;文件</h2><p>wc [选项] [文件名]<br>默认行，单词，字节数<br>选项：  <font color="red"><br>-c</font> :统计字节数  <font color="red"><br>-w</font> :统计单词数  <font color="red"><br>-l</font> :统计行数<br><strong><code>wc &lt; filename</code></strong></p><pre><code>wc &lt;&lt; filename     wc &lt;&lt; a.txt            注意a.txt &gt; dshi  &gt; jdiosjfh        &gt; diosjfiojd        &gt; fdiojsoifj        &gt; hello      4  4 36</code></pre><h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><p>sort将文件/文本的每一行作为一个单位，相互比较，比较原则是从首字符向后，<strong>不加参数时</strong>依次按ASCII码值进行比较，最后将他们按升序输出  <font color="red"><br>-n </font>:依照数值的从小到大排序;  <font color="red"><br>-f </font>：忽略大小写 <font color="red"><br>-r </font>:以相反的顺序来排序;   <font color="red"><br>-u </font>:忽略相同行使用-u选项或者uniq 文件名  <font color="red"><br>-t &lt;分隔符&gt;</font>：指定排序时所用的栏位分隔字符；  <font color="red"><br>-k n[,m]</font>是按照指定的字段范围排序，从第n字段开始，m字段结束(默认到行尾)（字母按ASCII排序，数字按从小到大。先数字后字母）  <font color="blue"><font color="lime"><br>[root@mail text]#</font> sort -nrk 3 -t: sort.txt　　<br>将CC列数字从大到小顺序排列：<br>eee:40:5.4<br>eee:60:5.1<br>ddd:20:4.2<br>ccc:50:3.3<br>bbb:10:2.5<br>aaa:30:1.6<br>AAA:BB:CC 列         </font><br><img src="https://s2.ax1x.com/2019/05/09/Eg0jte.png" alt=""><br>指定分隔符是<code>:</code>，用第三字段开头，第三字段结尾排序，就是只用第三字段排序</p><pre><code>[root@Tiger data]# sort -n -t &quot;:&quot; -k 3,3 /etc/passwd   </code></pre><p>但是这样排序会以字符串排序需要以数字排序  </p><pre><code>sort -n -t &quot;:&quot; -k 3,3 /etc/passwd</code></pre><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><ol><li><strong><code>awk &#39;{print $1}&#39; 文件名</code></strong>　  $1第一列，$2第二列，$NF最后一列.$(NF-1)倒数第二列）。<blockquote><p>现在是以文件的空格为分隔符这样打印</p></blockquote></li><li><p><strong><code>awk</code></strong><font color="red">-F</font><strong><code>&quot;:&quot;&#39;{print $1}&#39; /etc/passwd</code></strong></p><blockquote><p><font color="red">-F</font>指定分隔符，并打印文件第一列</p></blockquote></li><li><p>多列打印<font color="lime">#</font><strong><code>awk -F &quot;:&quot; &#39;{print $2 $3}&#39; /etc/passwd</code></strong> 这样打印$2 $3之间是没有分隔符　</p><blockquote><p>要加分隔符就是 <code>awk -F &quot;:&quot; &#39;{print $2 &quot;\t&quot; $3}&#39; /etc/passwd</code> $0表示整个文件</p></blockquote></li></ol><h1 id="df"><a href="#df" class="headerlink" title="df"></a>df</h1><p>文件系统查看命令  <font color="red"><br>-a</font>:显示所有的文件系统信息信息，包括特殊文件系统，如，<font color="blue">/proc</font>,<font color="blue">/sysfs</font>  <font color="red"><br>-h</font>:使用习惯单位显示容量，如KB,MB或GB等。  <font color="red"><br>-T</font>:显示文件系统类型  <font color="red"><br>-m</font>: 以MB为单位显示容量。  <font color="red"><br>-k</font>:以KB为单位显示容量，默认就是以KB为单位显示容量。</p><p><table><tr><td style="background-image:url(https://ws1.sinaimg.cn/large/005RRiqRly1fupcqlu5qoj309s0biq3p.jpg)"><font color="red"><strong>du命令和df命令的区别</strong></font><font color="#ff1493"><br>df:</font><font color="black"><font size="4"><strong>命令是从文件系统考虑的，不光要考虑文件占用的空间，还要统计被命令或程序占用的空间(最常见的就是文件已经删除，但是程序并没有释放空间)</strong>  </font>  <font color="#ff1493"><br>du:</font> <font color="black"><font size="4"><strong>命令是面向文件的，只会计算计算机文件或目录占用的空间.</strong> </font></font></font></td></tr></table></p><h1 id="du"><a href="#du" class="headerlink" title="du"></a>du</h1><p>是通过搜索文件来计算每个文件的大小然后累加，du能看到的文件只是一些当前存在<br>的，没有被删除的。他计算的大小就是当前他认为存在的所有文件大小的累加和     <font color="red"><br>-h </font>: 以K，M，G为单位，提高信息的可读性。  <font color="red"><br>-s </font>: 统计总占用量，而不列出子目录和子文件的占用量。<br><strong><em>ls -h是目录下文件名占用大小　　　du -h 是目录下所有文件的大小</em></strong>  <font color="red"><br>-k </font>: 以KB(1024bytes)为单位输出。  <font color="red"><br>-m </font>: 以MB为单位输出。  <font color="red"><br>-a</font>显示每个子文件的磁盘占用量。默认只统计子目录的磁盘占用量。</p><h1 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h1><p>dd(磁盘对拷命令)命令用于复制文件并对原文件的内容进行转换和格式化处理  </p><p><font color="lime">[root@localhost]#</font> dd if=输入文件  of=输出文件 bs=字节数 count=个数<br>选项：<br>if=输入文件 指定源文件或源设备<br>of=输出文件 指定目标文件或目标设备<br>bs=字节数　指定一次输入/输出多少字节，即把这些字节看做一个数据块<br>count=个数 指定输入/输出多少个数据块  <strong><code>date ; dd if=/dev/zero of=/root/testfile bs=1k count=100000(100M) ; data</code></strong>。</p><h1 id="fsck"><a href="#fsck" class="headerlink" title="fsck"></a>fsck</h1><p>文件系统修复命令<br>fsck [选项] 分区设备文件名  <font color="red"><br>-a</font>:不显示用户提示，自动修复文件系统  <font color="red"><br>-y</font>:自动修复。和-a作用一致，不过有些文件系统只支持<strong>-y</strong></p><h1 id="dumpe2fs"><a href="#dumpe2fs" class="headerlink" title="dumpe2fs"></a>dumpe2fs</h1><p>显示磁盘状态命令  <font color="lime"><br>#</font>dumpe2fs 分区设备名</p><h1 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h1><p>rpm是Linux标准基础（LSB）兼容发行版所使用的一种软件包管理器，用来对软件包进行低级处理rpm可以查询、安装、检验、升级和卸载软件包，它多数用于基于Fedora的系统，比如RHEL和CentOS  </p><p><marquee> <font color="red">只有安装和升级要加包全名。</font>  </marquee><font color="red"><br>-ivh:</font> -i:安装，-v:显示详细信息，-h:显示进度，–nodeps：不检测依赖性。  <font color="red"><br>-Uvh</font>包全名：RPM包升级.   <font color="red"><br>-q </font>:接软件包名字 #查询软件是否已经安装  -q(查询query)  <font color="red"><br>-qa </font>:#查询所有已经安装的RPM包。-a(所有all)  <font color="red"><br>-qi </font>:包名字#查询软件包详细信息   -i :显示软件包的相关信息  <font color="red"><br>-ql 包名</font>:查询软件包安装位置   -l :显示套件的文件列表。  <font color="red"><br>-qf </font>+系统文件名。查看一个文件是由哪个包安装的  <font color="red"><br>-qip 包全名</font>:查询未安装软件包信息，必须在软件包目录进行查询。  <font color="red"><br>-qR </font>:查询软件包的依赖性。  <font color="red"><br>-qRp </font>:查询未安装软件包的依赖性必须在<font color="red">Packages</font>目录查询。  <font color="red"><br>-e 包名</font>:卸载软件。<br><!-- more --><br><strong><pre><font color="#FF1493">rpm -qf `which 程序名`　　#返回软件包的全名<font color="red">　　　已安装的软件包</font><br>rpm -qif `which 程序名`　　#返回软件包的有关信息<br>rpm -qlf `which 程序名`　　#返回软件包的文件列表</font></pre></strong></p><h2 id="RPM校验"><a href="#RPM校验" class="headerlink" title="RPM校验"></a>RPM校验</h2><p><font color="lime"><br>#</font>rpm -V 已安装的包名<br>选项：-V 校验指定RPM包中的文件。(verify)  <font color="lime"><br>[root@Tiger ~]#</font>rpm -V httpd<br><strong>S.5….T.  c /etc/httpd/conf/httpd.conf</strong><br>验证内容中的8个信息的具体内容如下：  <font color="red"><br>S</font>：文件大小是否改变；  <font color="red"><br>M</font>：文件的类型或文件的权限(r w x)是否被改变；  <font color="red"><br>5</font>：文件MD5校验和是否改变(可以看成文件的内容是否改变)；  <font color="red"><br>D</font>：设备的主，从设备号是否改变；  <font color="red"><br>L</font>：文件路径是否改变；  <font color="red"><br>U</font>：文件的属主(所有者)是否改变；  <font color="red"><br>G</font>：文件的属组是否改变；  <font color="red"><br>T</font>：文件的修改时间是否改变；<br><strong>文件类型：</strong> <font color="red"><br>c</font> :配置文件(config file)  <font color="red"><br>d</font> :普通文档(documentation)  <font color="red"><br>g</font> :”鬼”文件(ghost file),很少见，就是该文件不应该被这个RPM包包含  <font color="red"><br>l</font> :授权文件(license file)  <font color="red"><br>r</font> :描述文件(read me)  </p><h2 id="RPM包中文件提取"><a href="#RPM包中文件提取" class="headerlink" title="RPM包中文件提取"></a>RPM包中文件提取</h2><p><font color="lime">#</font><font color="red"><strong><code>rpm2cpio 包全名 | \ cpio -idv .文件绝对路径</code></strong></font> 反斜杠：换行的作用。<br>rpm2cpio:将rpm包转换为cpio格式的命令。<br>cpio:是一个标准工具，他用于创建软件档案文件和从档案文件中提取文件。  <font color="lime"><br>#</font>cpio 选项 &lt; [文件|设备]<br>选项： -i:copy-in模式，还原<br>　　　-d:还原时自动新建目录<br>　　　-v：显示还原过程       <font color="blue"><br>rpm -qf /bin/ls 查询ls命令属于哪个软件包<br>mv /bin/ls /tmp 造成ls命令误删除的假象<br><strong><code>rpm2cpio /mnt/Packages/coreutils-8.4-37.el6.x86_64.rpm | cpio -idv ./bin/ls</code></strong><br>提取RPM包中ls命令到当前目录的/bin/ls下 </font><br><strong><code>cp /root/bin/ls /bin 把ls命令复制到/bin目录，修复文件丢失。</code></strong></p><h2 id="源码包与RPM包的区别"><a href="#源码包与RPM包的区别" class="headerlink" title="源码包与RPM包的区别"></a>源码包与RPM包的区别</h2><p>安装在指定位置当中，一般是/usr/local/软件名/。<br>RPM包安装的服务可以使用系统服务管理命令(service)来管理，例如RPM包安装apache的启动方法是:<font color="blue"><br>/etc/rc.d/init.d/httpd</font> start: 绝对路径启动服务。<br>service httpd start<br>源代码保存位置：<font color="blue">/usr/local/src/</font><br>软件安装位置：<font color="blue">/usr/local/</font><br>如何确定安装过程报错：安装过程停止；并出现<font color="red">error</font>、<font color="red">warning</font>或<font color="red">no</font>的提示。<br>源码包安装过程：<br>下载源码包；解压缩下载的源码包；进入解压缩目录。<table><tr><td bgcolor="#778899"> <font color="black"> CRT中sftp里面要设置远程的路径和本地的路径:<br>cd 1 进入远程连接到的Linux的1目录<br>lcd \text 本地的c盘<font color="blue">text</font>目录<br>get abc.c 从远程目录得到文件abc.c放入本地目录<font color="blue">text</font><br>put a11.txt 从Windows上将文件a11.txt传入linux </font></td></tr></table> </p><h2 id="源码包配置"><a href="#源码包配置" class="headerlink" title="源码包配置"></a>源码包配置</h2><p><strong>./configure</strong>软件配置与检查  </p><ol><li>定义需要的功能选择。  </li><li>检测系统环境是否符合安装需求。  </li><li>把定义好的功能选项和检测系统环境的信息都写入Makefile文件，用于后续的编辑。<br><strong>./configure –prefix=/usr/local/apache2</strong>安装路径<br>详情参考<font color="blue">INSTALL</font>  <h2 id="源码包的卸载："><a href="#源码包的卸载：" class="headerlink" title="源码包的卸载："></a>源码包的卸载：</h2>不需要卸载命令，直接删除安装目录即可，不会遗留任何垃圾文件。  <h3 id="脚本安装包："><a href="#脚本安装包：" class="headerlink" title="脚本安装包："></a>脚本安装包：</h3>脚本安装包并不是独立的软件包类型，常见安装的是源码包。<br>是人们把安装过程写成了自动安装的脚本，只要执行脚本，定义简单的参数，就可以完成安装。<br>非常类似于Windows下软件的安装方式。</li></ol><h1 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h1><p>能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。<font color="red"><br>remove </font>:删除指定的rpm软件包；  yum -y remove 软件包名<br>yum update +包名 :<font color="red">升级。</font><font color="red">       <strong>禁用</strong></font><br>yum grouplist:列出所有可用的软件组列表；<br>yum groupinstall 软件组名:安装指定的软件组，组名可以由goruplist查询出来；<br>yum groupremove:卸载指定软件组；  </p><p><pre><font size="4">配置yum仓库:<br>  [base]<br>  name=centos<br>  baseurl=file:///mnt/<br>  enabled=1<br>  gpgcheck=0 </font></pre><br><code>yum clean all</code> 清除缓存，使最新的yum配置生效。<br><code>yum list</code> 列出所有可安装的软件包列表，包含已安装和未安装的</p><h1 id="head"><a href="#head" class="headerlink" title="head"></a>head</h1><p>head 用来显示档案的开头至标准输出中,默认head命令打印其相应文件的开头10行 <font color="red"><br>-n</font>:显示文件的前n行 <code>head -n 5 a.txt 显示文件的前5行</code>  <font color="red"><br>-c</font>显示文件前n个字节 <code>&gt;head -c 20 a.txt</code> <font color="blue"><br>head -c <font color="red">-32</font> log2014.log文件的除了最后n个字节以外的内容<br>head -n <font color="red">-6</font> log2014.log 输出文件除了最后n行的全部内容 </font>.</p><h1 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h1><p>主要用来从指定点开始将文件写到标准输出。很多人喜欢使用tail -f 来监控日志文件。  <font color="red"><br>-f</font>该参数用于监视文件的增长  <code>tail -f filename</code><br>监视filename文件的尾部内容（默认10行，相当于增加参数 -n 10），刷新显示在屏幕上。退出，按下CTRL+C。  <font color="red"><br>-n</font>从指定行位置读取指定文件。 <code>tail -n 20 filename 显示filename最后20行</code>  <font color="red"><br>-c</font>显示文件最后n个字节 <code>tail -c 20 a.txt</code></p><h1 id="chmod"><a href="#chmod" class="headerlink" title="chmod 　　"></a>chmod 　　</h1><p>chmod命令用来变更文件或目录的权限，文件或目录权限的控制分别以读取、写入、执行3种一般权限来区分，另有3种特殊权限可供运用，设置方式采用文字或数字代号皆可。符号连接的权限无法变更，如果用户对符号连接修改权限，其改变会作用在被连接的原始文件  <font color="red"><br>-f </font>:若该文件权限无法被更改也不要显示错误讯息  <font color="red"><br>-R </font>:对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)<br>r=读取属性 值＝4　　w=写入属性 值＝2　　x=执行属性 值＝1 </p><h1 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h1><p>改变某个文件或目录的所有者和所属的组<br><code>chown USER:GROUP 对象</code><br><code>chown USER 对象</code>　<code>chown :group 对象</code></p><h1 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h1><p>systemctl命令是系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起<br><img src="https://s2.ax1x.com/2019/05/09/Eg0T61.png" alt=""></p><h1 id="chkconfig"><a href="#chkconfig" class="headerlink" title="chkconfig"></a>chkconfig</h1><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/09/Eg04fJ.png)"><font color="#F0FFFF"><font face="KaiTi">1.服务概述:<br>在linux操作系统下，经常需要创建一些服务，这些服务被做成shell脚本，这些服务需要在系统启动的时候自动启动，关闭的时候自动关闭。<br>将需要自动启动的脚本/etc/rc.d/init.d目录下，然后用命令chkconfig –add filename将自动注册开机启动和关机关闭。实质就是在rc0.d-rc6.d目录下生成一些文件连接，这些链接连接到/etc/rc.d /init.d目录下指定文件的shell脚本。</font></font></td></tr></table>  <font color="red"> --list </font>:列出所有系统服务  <font color="red"><br>--add <font color="blue">httpd</font></font>:增加httpd服务。  <font color="red"><br>--del</font> <font color="blue">httpd</font>:删除httpd服务。  <font color="red"><br>--list <font color="blue">mysqld</font></font>:列出mysqld服务设置情况  <font color="red"><br>--level 35 <font color="blue">mysqld</font> on</font>:设定mysqld在等级3和5为开机运行服务，–level 35表示操作只在等级3和5执行，on表示启动，off表示关闭。  <font color="red"><br>chkconfig mysqld on</font>:设定mysqld在各等级为on，“各等级”包括2、3、4、5等级。  </p><p><table><tr><td bgcolor="RED"><font color="black">chkconfig  <em>设置是当前不生效，linux重启后才生效.</em><br>service <em>设置是即时生效，linux关机重启后设置失效</em></font></td></tr></table>.</p><h1 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h1><p>查询与自动挂载(Auto Mount)<br><img src="https://s2.ax1x.com/2019/05/09/Eg0hY4.png" alt=""> <strong><code>mount [-l]</code></strong> 查询系统中已经挂载的设备，-l会显示卷标名称<br><strong><code>mount -a</code></strong> 依据配置文件/etc/fstab的内容，自动挂载  </p><h2 id="挂载命令格式-mount-t-文件系统-L卷标名-o特殊选项-设备文件名-挂载点"><a href="#挂载命令格式-mount-t-文件系统-L卷标名-o特殊选项-设备文件名-挂载点" class="headerlink" title="挂载命令格式 mount [-t 文件系统] [-L卷标名] [-o特殊选项] 设备文件名 挂载点"></a>挂载命令格式 <code>mount [-t 文件系统] [-L卷标名] [-o特殊选项] 设备文件名 挂载点</code></h2><p><font color="red">-t 文件系统</font>:加入文件系统类型来指定挂载的类型，可以ext3、ext4、iso9660等文件系统  <font color="red"><br>-L 卷标名</font>:挂载指定卷标的分区，而不是安装设备文件名挂载  <font color="red"><br>-o 特殊选项</font>:可以指定挂载的额外选项。<br><img src="https://s2.ax1x.com/2019/05/09/Eg0fkF.png" alt="">  <font color="blue"></font><strong><code>mount -o remount,noexec /home</code></strong><font color="red">这里的/home是df可以查看到的分区</font>重新挂载/home分区，并使用noexec权限  <font color="lime"><br>#</font>cd /home      <font color="lime"><br>#</font>vi hello.sh<table><tr><td bgcolor="black"><font color="lime">#!/bin/bash<br>echo “i love you”</font></td></tr></table><font color="lime">#</font>chmod 755   <font color="lime"><br>#</font>./hello.sh 会显示没有权限执行   <font color="lime"><br>#</font>mount -o remount,exec /home 记得改回来，要不然会影响系统启动的。    </p><h2 id="挂载光盘"><a href="#挂载光盘" class="headerlink" title="挂载光盘"></a>挂载光盘</h2><p><code>mkdir /mnt/cdrom 建立挂载点</code><br><code>mount -t iso9660 /dev/cdrom /mnt/cdrom 挂载光盘</code><br><code>mount /dev/sr0 /mnt/cdrom</code></p><h2 id="卸载光盘"><a href="#卸载光盘" class="headerlink" title="卸载光盘"></a>卸载光盘</h2><p><font color="lime">#</font>umount设备文件名或挂载点<br><code>umount /mnt/cdrom</code> </p><h2 id="挂载U盘"><a href="#挂载U盘" class="headerlink" title="挂载U盘"></a>挂载U盘</h2><p><table><tr><td style="background-image:url(https://ws1.sinaimg.cn/large/005RRiqRly1fttgf25sjxj31hc0xctbq.jpg)"><font color="#FF4500">fat32格式:fdisk -l 查看U盘设备文件名<br>mount -t vfat /dev/sdb1 /mnt/usb/<br>注意：fat16分区识别为fat,fat32分区识别为vft。linux默认是不支持NTFS文件系统的</font></td></tr></table>. </p><h2 id="NTFS-u盘支持"><a href="#NTFS-u盘支持" class="headerlink" title="NTFS u盘支持"></a>NTFS u盘支持</h2><p>下载NTFS-3G插件<a href="https://www.tuxera.com/community/open-source-ntfs-3g/" target="_blank" rel="noopener">https://www.tuxera.com/community/open-source-ntfs-3g/</a>   <font color="red"><br>解压</font> <strong><code>tar -zxvf filename</code></strong>  <font color="red"><br>安装</font> <strong><code>./configure &amp;&amp; make &amp;&amp; make install</code></strong><br>fdisk -l查看linux的U盘分区：sdc1<br><code>mount -t ntfs-3g /dev/sdc1 /mnt/usb/</code><br><code>mkfs -t ext4 /dev/sdb1/ 格式化分区,扩展分区不可格式</code><br><code>mkdir /disk1 建立挂载点</code><br><code>mount /dev/sdb1 /disk1 挂载</code></p><h1 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h1><p>新增swap空间:<font color="red">free</font>查看swap大小<br>新增一个分区，改分区号82，保存退出<br>格式化：<font color="red">mkswap /dev/sdb6 </font><br>加入swap分区：<font color="red">swapon /dev/sdb6</font><br>取消swap分区：<font color="red">swapoff /dev/sdb6 </font><br>但是每次开机都要手动挂载一遍，可以写入fatab开机自动挂载<br><strong><code>vi /etc/fstab</code></strong><br><strong><code>/dev/sdb6 swap swap defaults 0 0</code></strong></p><h1 id="free"><a href="#free" class="headerlink" title="free"></a>free</h1><p>显示当前系统未使用的和已使用的内存数目，还可以显示被内核使用的内存缓冲区。   <font color="red"><br>-b </font>：以Byte为单位显示内存使用情况；  <font color="red"><br>-k </font>：以KB为单位显示内存使用情况；  <font color="red"><br>-m </font>：以MB为单位显示内存使用情况；<br><img src="https://s2.ax1x.com/2019/05/09/Eg0yyq.png" alt="">   <font color="red"><code>total</code></font>:去掉为硬件和操作系统保留的内存后剩余的内存总量。许多人奇怪自己的电脑安装了一共8G的内存，但是显示总共只有七点几G的，现在应该没什么疑惑了把，不管Linux还是Windows都会有部分内存是保留给硬件和操作系统的！  <font color="red"><br><code>userd</code></font>：当前已使用的内存总量。  <font color="red"><br><code>free</code></font>：空闲的或可以使用的内存总量  <font color="red"><br><code>shared</code></font>：共享内存大小，主要用于进程间通信  <font color="red"><br><code>buff</code>(buffers)</font>:缓冲，主要用于块设备数据缓冲(磁盘缓存大小)，例如记录文件系统的metadata（目录、权限等等信息）。是指在写入数据时，先把分散的写入操作保存到内存当中，当达到一定程度再集中写入硬盘，减小了磁盘碎片和硬盘反复寻道，加速了数据的写入过程。  <font color="red"><br><code>cache</code></font>:缓存，主要用于文件内容缓冲,是指把读取出来的数据保存在内存当中，当再次读取时，不用读取硬盘而直接从内存当中读取，加速了数据的读取过程。  <font color="red"><br><code>available</code></font>:可以使用的内存总量.</p><h1 id="Compression-压缩-command"><a href="#Compression-压缩-command" class="headerlink" title="Compression 压缩  command"></a>Compression <sub>压缩</sub>  command</h1><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p>gzip <font color="blue">filename</font>压缩　*.gz :”后缀名”<br>gzip <font color="red">-d</font> filename.gz　gunzip <font color="blue">filename</font>.gz 解压缩<br>不解压查看：zcat filename.gz  </p><h2 id="bz2"><a href="#bz2" class="headerlink" title="bz2"></a>bz2</h2><p>bzip2 <font color="blue">filename</font>压缩　*.bzip2:”后缀名”<br>bzip2 <font color="red">-k</font> <font color="blue">filename</font> 保存源文件<font color="red">压缩</font><br>bzip2 <font color="red">-d</font> <font color="blue">filename.bz2</font>　bunzip2 <font color="blue">filename.bz2</font>解压缩<br>不解压查看：bcat <font color="blue">filename.bz2</font>  </p><h2 id="xz"><a href="#xz" class="headerlink" title="xz"></a>xz</h2><p>xz <font color="blue">filename</font>压缩　.xz:”后缀名”<br>xz <font color="red">-d</font> <font color="blue">filename.xz</font> 解压缩<br>unxz <font color="red">-k</font><font color="blue"> filename.xz</font> 保存源文件<font color="red">解压</font><br>-J：使用xz归档压缩</p><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>zip默认保存源文件，可以压缩目录<br>解压：unzip FileName.zip<br>压缩：zip FileName.zip DirName  <font color="red"><br>-r </font>：递归处理，将指定目录下的所有文件和子目录一并处理；</p><h1 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h1><p><font color="red">-c</font>: 建立压缩档案　  <font color="red"><br>-x</font>：解压  <font color="red"><br>-t</font>：查看内容  <font color="red"><br>-r</font>：向压缩归档文件末尾追加文件  <font color="red"><br>-u</font>：更新原压缩包中的文件  </p><p><pre>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的</pre>  <font color="blue">tar <font color="red">cf</font> file.tar files 将一个或多个文件、目录打包到tar包。<br>tar <font color="red">rf</font> file.tar file 将文件file添加到tar包中。<br>tar <font color="red">uf</font> file.tar file 将文件file更新tar包中相应的文件。<br>tar <font color="red">tf</font> file.tar 查看tar内容。<br>tar <font color="red">xf</font> file.tar 解压tar包。  </font>   <font color="red"><br>-z</font>:有gzip属性,即需要用 gzip 压缩  <font color="red"><br>-j</font>:有bz2属性,即需要用 bzip2 压缩   <font color="red"><br>-v</font>:显示处理过程   <font color="red"><br>-C</font>:指定解压输出目录 <font color="blue">tar zxvf test.tar.gz -C test</font><br><strong><font color="red">-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名</font></strong>  <font color="red"><br>-Z</font>：有compress属性的  <font color="red"><br>-O</font>：将文件解开到标准输出   <font color="blue"><br>格式：tar Zcf file.tar.Z files  将一个或多个文件、目录压缩到file.tar.Z中。需要安装了ncompress软件包才行。<br>解压.tar.Z文件。格式：tar Zxf file.tar.Z　  </font><br>归档并压缩：使用时间格式打包数据：<br><code>tar zcf etc-$(date +%F).tar.gz /etc</code>  　　tar zcf etc-`date +%F`.tar.gz /etc </p><h2 id="tar-gz"><a href="#tar-gz" class="headerlink" title="*.tar.gz"></a>*.tar.gz</h2><p>归档并调用gzip压缩　tar <font color="red">-zcf</font> 新文件名.tar.gz /etc/passwd /var/log/messagages<br>调用gzip解压缩并展开归档　tar <font color="red">-zxvf</font> filename.tar.gz </p><h2 id="tar-bz2"><a href="#tar-bz2" class="headerlink" title="*.tar.bz2"></a>*.tar.bz2</h2><p>归档并调用bzip2压缩　tar <font color="red">-jcf</font> 新文件名.tar.bz2 /etc/passwd /var/log/messages<br>调用bzip解压缩并展开归档　tar <font color="red">-jxf</font> filename.tar.bz2<br>不解压缩查看：<code>tar -tvf home_2018-10-14.tar.gz</code>  </p><h1 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h1><p>其方法是先建立一个包括系统内所有档案名称及路径的数据库，之后当寻找时就只需查询这个数据库，而不必实际深入档案系统之中了。 所以你要知道：  <font color="#00BFFF"><br>locate的速度比find快，因为它并不是真的查找文件，而是查数据库<br>locate的查找并不是实时的，而是以数据库的更新为准，一般是系统自己维护<br>升级数据库命令：<code>locate -- u</code> </font><br>CentOS系统找不到locate命令，原因是系统中没有安装<font color="red"> mlocate </font>这个包，然后更新数据库:<font color="red"> updatedb </font>   <font color="red"><br>-c </font>:只显示找到条目的号码  <font color="red"><br>-b </font>:匹配唯一的路径名称的基本文件名  <font color="red"><br>-r </font>:基于基本正则表达式进行匹配操作</p><h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1><p><pre>实时查找工具，通过遍历指定起始路径下文件系统层级结构完成文件查找：</pre></p><h2 id="根据文件名查找："><a href="#根据文件名查找：" class="headerlink" title="根据文件名查找："></a>根据文件名查找：</h2><p><font color="red"> -name </font> “pattern”  <font color="red"><br>-iname </font> “pattern” 支持glob风格的通配符: <code>\*,?,[],[^]</code> i忽略大小写  <font color="red"><br>-regex pattern </font>:基于正则表达式查找文件，匹配整个路径而非其名；  </p><h2 id="根据文件从属关系查找："><a href="#根据文件从属关系查找：" class="headerlink" title="根据文件从属关系查找："></a>根据文件从属关系查找：</h2><pre><code>-user USERNAME:查找属主指定用户的所有文件；   -goup GROUPNAME:查找属组指定组的所有文件；   -uid  UID:查找属主指定的UID的所有文件；   -gid  GID:查找属组指定的GID的所有文件；   -nouser :查找没有属主的文件；   -nogroup :查找没有属组的文件；</code></pre><h2 id="根据文件的类型查找："><a href="#根据文件的类型查找：" class="headerlink" title="根据文件的类型查找："></a>根据文件的类型查找：</h2><p><code>-type TYPE</code> :按type查找<br><strong>f:普通文件</strong>　<font color="blue"> <strong>d:目录</strong> </font>　<font color="skyblue"> <strong>l:符号链接文件</strong> </font> 　<font color="yellow"> <strong>b:块设备文件</strong> </font> 　　c:字符设备文件<br>p:管道文件　s：套接字文件  　　【<font color="red"> <strong>./可执行文件</strong> </font>】<br>组合测试：</p><pre><code>与：-a,默认组合逻辑而且的意思; 　　-o 是或者的意思； 　　-not,!：非(相反)find ./ -size -1M -a -type f#寻找当前目录下文件大于1M的文件或者是目录。find ./ -size +1M -o -type d#寻找当前目录下文件小于1M并且文件类型是一般文件的文件。</code></pre><p><font color="red"> <strong>!A -a !B =!(A -o B) 　　　!A -o !B =!(A -a B)</strong></font>   　<br><code>查找tmp目录下不包含“fstab”的字符文件 find /tmp -not -iname &quot;*fstab\*&quot;</code></p><h2 id="根据文件的大小查找："><a href="#根据文件的大小查找：" class="headerlink" title="根据文件的大小查找："></a>根据文件的大小查找：</h2><p><font color="red"> -size </font> [+|-]#UNIT 常用单位：K,M,G</p><pre><code>size 10K filename,大小表示 (#-1,#] 　　9K&lt;filename&lt;10K;    size -10K filename,大小表示[0-UNIT-1];　   size +10K filename,大小表示(#,∞);</code></pre><h2 id="根据时间戳查找"><a href="#根据时间戳查找" class="headerlink" title="根据时间戳查找"></a>根据时间戳查找</h2><p>以“天”为单位：   </p><p><div class="note primary"><p># [#,#-1]距现在为止过去几天<strong>前</strong>访问过文件。<br>-#:(0,#) 几天<strong>内</strong>访问过文件。<br>+#(oo, #-1] 几天前至-oo访问过的所有文件 </p></div></p> <p></p><p><div class="note warning"><p>-atime:显示的是文件中的数据最后被访问的时间，比如系统的进程直接使用或通过一些命令和脚本间接使用。</p></div></p><p><div class="note warning"><p>-mtime:显示的是文件内容被修改的最后时间，比如用vi编辑就会发生改变。</p></div></p><p><div class="note warning"><p>-ctime:显示的是文件的权限、拥有者、所属的组、链接数发生改变时的时间。当然当内容改变时也会随之改变。</p></div><br>以“分钟”为单位:  </p><p><font color="red"> -amin　　-mmin　　-cmin  </font> 同上</p><h2 id="根据权限来查找"><a href="#根据权限来查找" class="headerlink" title="根据权限来查找"></a>根据权限来查找</h2><p><font color="red"> -perm [/|-]mode </font> <code>find ./ -perm 644</code><br>mode:精确权限匹配； <font color="red"><br>/mode </font> :任何一类用户(u,g,o)的权限中的任何一位(r,w,x)符合条件即满足   9位权限之间存在“或”关系；  <font color="red"><br>-mode </font> :每一类用户(u,g,o)的权限中的每一位(r,w,x)同时符合条件即满足  9位权限之间存在”与”关系；<br><code>440属于/666有读的权限 find./ -perm /666  符合这一查找</code></p><h2 id="处理动作："><a href="#处理动作：" class="headerlink" title="处理动作："></a>处理动作：</h2><p><pre><br>-print:输出至标准输出:默认的动作;<br>-ls:类似于对查找到的文件执行“ls -l”命令，输出文件的详细信息<br>-delete:删除找到的文件<br>-fls:/PATH/TO/SOMEFILE:把查找到的所有文件的长格式信息保存至指定文件中；<br>-ok COMMAND {} \; :对查找到的每个文件执行由COMMAND表示的命令；每次操作都由用户进行确认；<br>-exec COMMAND {} \; :对查找到的每个文件执行由COMMAND表示的命令；<br></pre></p><ol><li><p>查找/var目录下属主为root，且属组为mail的所有文件或目录；<br><code>find /var -user root -a -group mail -ls</code></p></li><li><p>查找/usr目录下不属于root,bin或hadoop的所有文件或目录；用两种方法<br><code>find /usr -not -user root -a -not -user bin -a -not -user hadoop</code><br><code>find /usr -not \( -user root -o -user bin -o -user hadoop \) -ls</code>  </p></li><li>查找/etc目录下最近一周内其内容修改过，且属主不是root也不是hadoop用户的文件或目录；<br><code>find /etc -mtime -7 -a -not -user root -a -not -user hadoop</code><br><code>find /etc -mtime -7 -a -not \(-user root -o -user hadoop\) -ls</code></li><li>查找当前系统上没有属主或属组，且最近一周内曾今被访问过的文件或目录；<br><code>find ./ -nouser -o -nogroup -ls</code> 如果有文件属于可查找项，但是加ls选项最后会无法输出显示　加了-o（或条件）和ls后只会对后一半生效。 需要<br><code>find ./ \( -nouser -o -nogroup\) -atime -7 -ls</code></li><li>查找/etc目录下大于1M且类型为普通文件的所有文件；<br><code>find /etc -size +1M -ls</code><br><code>find /etc -size +1M -type f -exec ls -lh {} \;</code>   </li><li>查找/etc目录下所有用户都没有写权限的文件；<br><code>find /etc -not -perm /222 -type f -ls　至少有一个用户 有</code></li><li>查找/etc目录至少有一类用户没有执行权限的文件；<br><code>find /etc -not -perm -type f -111</code>  </li><li>查找/etc/init.d目录下，所有用户都有执行权限，且其他用户有写权限的所有文件；<br><code>find /etc -perm -111 -a -perm -002 -ls</code><br><code>find /etc -perm -113 -ls -type f</code></li></ol><h1 id="history"><a href="#history" class="headerlink" title="history"></a>history</h1><p>history [选项][历史命令保存文件]<font color="red"><br>-c</font>:清空历史命令  <font color="red"><br>-w</font>:把缓存中的历史命令写入历史命令保存文件 ~/.bash_history <table><tr><td bgcolor="#778899"><font color="black">历史命令默认保存1000条，可以在环境变量配置文件/etc/profile中修改</font></td></tr></table>历史命令的调用： </p><ol><li>使用上、下箭头调用以前的历史命令  </li><li>使用”!n”重复执行第n条历史命令  </li><li>使用”!!”重复执行上一条命令  </li><li>使用”!字符串”重复执行最后一条以该字符串开头的命令。</li><li>使用ctrl+r 搜索历史命令</li></ol><h1 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h1><p>命令别名<font color="lime">#</font><font color="red">alias</font> 别名=<code>&#39;原命令&#39;</code> </p><p><font color="red">alias</font>:查询命令别名。</p><p><div class="note warning"><p></p><p><center>命令执行时顺序：</center></p><ol><li>第一顺位执行时用绝对路径或相对路径执行的命令。  </li><li>第二顺位执行别名。  </li><li>第三顺位执行Bash的内部命令。  </li><li>第四顺位执行按照$PATH环境变量定义的目录查找顺序找到的第一个命令。<br>让别名永久生效：<code>vim /root/.bashrc</code><br>删除别名：<code>unalias 别名</code><br></li></ol></div></p>.<h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><p><strong><code>:.,$y</code></strong>复制当前行到末尾行<br><strong><code>:!</code></strong> 调用系统命令，可临时执行 <table><tr><td> 使vim设置永久生效:vim /etc/vimrc   把设置写到这个文件的最后，对所有账户生效<br>set nu 显示行号 　　set nonu 取消行号<br>set ic 不区分大小写　set noic 取消不区分大小写<br>set ts=4    设置tab键长度<br>set sw=4    设置自动缩进的tab键长度 </td></tr></table>   <code>vim  /root/.vimrc    也可以把设置写到此文件，只对root生效</code> </p><h2 id="vim字符替换"><a href="#vim字符替换" class="headerlink" title="vim字符替换"></a>vim字符替换</h2><p><table><tr><td bgcolor="#FFF0F5"><font size="4">:%s/this/that 每一行的第一个this被替换成that<br>:%s/this/that/g 将文本中所有的this替换成that %从每一行的开头到结尾   s表示替换<br>:1,5 s/old/new/g  #替换第一行到第5行中所有匹配的内容</font></td></tr></table>.</p><h2 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h2><p>u撤销上一步<br>i当前插入，I行首插入。<br>a当前字符插入(光标后一位插入)，A行尾插入。<br>o表示：本行回车到下一行插入，O上一行插入。<br>x删除光标所在字符，X向前删除一个字符。<br>dd删除光标所在的行，dG删除光标所在开始行到文件尾的所有字符。<br>J合并两行。<font color="#FF6437"><br>行操作：</font>home 键或^键行首，$或end行尾<br>dd删除一行Ndd(删除本行与下一行)。<br>yy复制一行，Nyy复制n行，p将复制行粘贴，p向光标下一行粘。(N表示数字) <font color="#FF6437"><br>词操作</font>:dw删除一个词，y+$复制至行尾。y+^复制至行首。yw复制一个词。<strong><font color="red">:.,$y</font></strong>  复制当前行到末尾  <table><tr><td bgcolor="#778899">v模式:编程的时候需要进行多行注释：         （删除是要将光标移到这个词的行首，如果光标不在行首则删除光标之后的字母。）<br>块操作：D或d+$删除至行尾  d+^删除至行首<br>1、注释：ctrl+v进入列编辑模式<br>2、向下或向上移动光标 （ctrl L 向下全部选中）<br>3、把需要注释的行开头的开头标记起来<br>4、然后按大写的I<br>5、再插入注释符，比如“#”<br>6、再按Esc，就会全部注释了<br>删除多行注释：按ctrl+v进入列编辑模式;向下或向上移动光标；选中注释部  分然后按d,就会删除注释符号。</td></tr></table>  </p><p><table><tr><td bgcolor="#FFF0F5">vim编辑器： :wq 可以保存外 :w +路径+文件名直接保存在某个位置和重命名<font color="blue">:w 路径/文件名</font><br>ZZ 保存退出　　:x 保存退出　　:!命令<font color="blue">:!ifconfig</font><br>vi的行定位功能:<br>ctrl+f 向前卷动一个屏幕<br>ctrl+b 向后卷动一个屏幕<br>G     到文件最后一行行首<br>:$    到文件最后一行行尾<br>mG    到指定行，m为目标行数 或者mgg<br>set nu  显示行号<br>/内容   查找指定内容<br>n   查找下一个<br>N   回到前一个<br>？  寻找上一个 </td></tr></table> <table><tr><td bgcolor="#4682B4"><font color="#FFF8DC"><font size="4">/^字符串  查找以字符串开始的行<br>/字符串$  查找以字符串结尾的行<br>/a.b      查找字符串a任意字符b   vim替换<br>r              替换当前光标字符<br>:r 文件名      在光标当前位置载入另一个文件</font></font></td></tr></table>. </p><h1 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h1><p>useradd命令用来建立用户帐号和创建用户的起始目录，使用权限是终极用户.  <font color="red"><br>-u</font> :uid指定用户ID  <font color="red"><br>-d</font>:指定用户登入时的启始目录。  <font color="red"><br>-g</font>:指定用户所属的群组     <font color="red"><br>-G</font>:指定用户所属的附加群组。<br><code>tom 用户的登陆 shell 为非交互式 shell useradd –s /sbin/nologin tom</code>  </p><p><font color="red"> -e </font>:指定账号的有效期限，缺省表示永久有效  </p><p><font color="blue"> useradd user1——创建用户user1;<br>useradd –e 12/30/2009 user2——创建user2,指定有效期2009-12-30到期</font>  </p><p><font color="red">-c</font>:用户说明，手工指定用户的说明，添加说明有Spacebar时要加<font color="red"><strong>“ “</strong></font>。</p><p><table><tr><td bgcolor="#778899">用户默认值文件：<font color="blue">/etc/defalut/useradd</font><br>1.GROUP=100 :用户默认组ID (公有模式)<br>2.HOME=/home :用户家目录<br>3.INACTIVE=-1 :密码过期宽限天数(shadow文件7字段)<br>4.EXPIRE=<font color="red">no value</font> :密码失效时间(8字段)<br>5.SHELL=/bin/bash :默认的shell<br>6.SKEL=/etc/skel :模板目录<br>7.CREATE_MAIL_SPOOL=yes :是否建立邮箱 <font color="blue"><br>/etc/login.defs</font><br>PASS_MAX_DAYS 999 :密码有效期(5字段)<br>PASS_MIN_DAYS 0 :密码修改间隔(4字段)<br>PASS_MIN_LEN 5 :密码最小5位(PAM)<br>PASS_WARN_AGE 7 :密码到期警告(6)<br>UID_MIN 500 :最小和最大UID范围<br>GID_MIX 60000<br>ENCRYPT_METHOD SHA512 :加密模式</td></tr></table>.  </p><h1 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h1><p>删除用户userdel [-r] 用户名  <font color="red"><br>-r</font>:删除用户的同时删除用户家目录</p><h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><p>查看用户id：<font color="lime">#</font>id 用户名<br>查询用户的UID,初始组ID,附加群组ID </p><h1 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h1><p>usermod命令用于修改用户的基本信息。usermod命令不允许你改变正在线上的使用者帐号名称。当usermod命令用来改变user id，必须确认这名user没在电脑上执行任何程序.  <font color="red"><br>-g &lt;群组&gt; </font> 修改用户所属的<font color="red">原始群组</font>。<br><code>usermod -g root username</code>  <font color="#FF1493"><br>-G &lt;群组&gt;</font> 修改户所属的<strong><em>附加群</em></strong>组  <font color="red"><br>-a -G </font> 无限增加到附加组，可拥有多个附加组.<br><code>将a1添加附加组user3 usermod -a -G user3 a1</code><font color="red"><br>-c</font>:修改用户的说明<code>usermod -c &quot;test user&quot; username</code>    </p><p><pre><font size="4">当某一用户拥有多个附加组之后，使用usemod -G会修改附加组，则多个组消失掉变成唯一当前修改的附加组</font></pre><br>1.将 newuser2 添加到附加组 staff <code>usermod -G staff newuser2</code>   <font color="red"><br>-l &lt;帐号名称&gt; </font> 修改用户帐号名称。<br>2.修改 newuser 的用户名为 newuser1 <code>usermod -l newuser1 newuser</code><font color="red"><br>-L 锁定用户密码，使密码无效。</font>  <font color="red"><br>-U 解除密码锁定。</font><br>3.锁定账号 newuser1 <code>usermod -L newuser1</code><br>4.解除对 newuser1 的锁定 <code>usermod -U newuser1</code> <font color="red"><br>-d </font>改变用户家目录,常与<font color="red">-m</font>结合使用       <font color="red"><br>-m </font>将主目录的内容移动到新目录<br><code>usermod -m -d /home/user2 -uid username</code>若使用报错使用以下命令：<br><code>cat /dev/null &gt; /var/run/utmp</code>   </p><p><table><tr><td bgcolor="#778899"><font size="3">清空此文件。utmp是一个文件，除了utmp程序你不能编辑这个文件，删掉他的话，当前登陆信息都会丢失。它就好比系统开启后它会把系统成员的信息迅速的记录下来，过一段时间它就不再记录，确认系统的用户配置就是这样了，这个文件在每次机器reboot起来后都会重新创建。</font></td></tr></table>.</p><h1 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h1><p><font color="red">-g</font> GID: 修改组ID  <font color="red"><br>-n</font> 新组名: 修改组名  </p><h1 id="su"><a href="#su" class="headerlink" title="su"></a>su</h1><p>su: [选项] 用户名  </p><p><font color="red"><strong>-</strong></font>:选项只使用”-“代表连带用户的环境变量一起切换。<table><tr><td bgcolor="red">可使用<strong>env</strong>命令查看</td></tr></table><font color="red">-c</font>:仅执行一次命令，而不切换用户身份<br><code>su - root -c &quot;useradd user3&quot;</code>不切换成root,但是执行useradd命令添加user1用户。   </p><h1 id="chage"><a href="#chage" class="headerlink" title="chage"></a>chage</h1><p>修改用户密码状态chage<br>chage [选项] 用户名   <font color="red"><br>-l</font>:列出用户的详细密码状态  <strong><font color="red"><br>-d 日期:修改密码最后一次更改日期(shadow3字段)</font></strong>  <font color="red"><br>-m 天数</font>:两次密码修改间隔(4字段)  <font color="red"><br>-M 天数</font>:密码有效期(5字段)  <font color="red"><br>-W 天数</font>:密码过期前警告天数(7字段)  <font color="red"><br>-I 天数</font>:密码过后宽限天数(7字段)  <font color="red"><br>-E 日期</font>:账号失效时间(8字段)<br><code>chage -d 0 username</code><center><font size="2">这个命令其实是把密码修改日期归0了(shadow第3字段)，这样用户只要一登录就要修改密码。第三字段是指密码最后一次修改时间的日期。1970年1月1号到现在修改密码的时间戳。如果第3字段改为0，系统会认为用户没有修改过操作密码，那么当此用户一旦登录系统就会提示要修改密码，才可正常使用。</font></center>.</p><h1 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h1><p><font color="red">-S</font>:查询用户密码的密码状态，仅root用户可用。  <font color="red"><br>-l</font>:暂时锁定用户。仅root用户可用。  <font color="red"><br>-u</font>:解锁用户。仅root用户可用。  <font color="red"><br>–stdin</font>:可以通过管道符输出的数据作为用户的密码。<code>echo &quot;123&quot; | passwd --stdin user</code></p><h1 id="gpasswd"><a href="#gpasswd" class="headerlink" title="gpasswd"></a>gpasswd</h1><p><font color="red"> -d </font>:从组删除用户 <code>gpasswd -d username groupadd</code> <font color="red"><br>-a </font>:添加用户到组(附加组),同时保留以前的组  </p><p><table><tr><td bgcolor="#FF8DC"><font size="3">添加用户到某一个组可以使用  usermod -G groupB userA 这个命令可以添加一个用户到指定的组，但是以前添加的组就会清空掉.<br>所以想要添加一个用户到一个组，同时保留以前添加的组时，请使用gpasswd这个命令来添加操作用户 </font></td></tr></table><font color="red"> -A </font>:指定组内管理员 <code>gpasswd -A username groupname</code></p><h1 id="groups"><a href="#groups" class="headerlink" title="groups"></a>groups</h1><p><font color="red"> groups username </font>显示linux用户所属的组</p><h1 id="date"><a href="#date" class="headerlink" title="date"></a>date</h1><p>date 根据给定格式显示日期或设置系统日期时间。<font face="Monotype Corsiva">print or set the system date and time</font>　<br>指令所在路径：/bin/date  <code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code> <font color="red"><br>-d</font>:显示字符串所指的日期与时间。字符串前后必须加上双引号</p><pre><code>date -d now  date -d &#39;next monday&#39;　   date -d yesterday +%Y-%m-%d  </code></pre><p><font color="red">-r</font>:显示文件最后修改时间  <font color="red"><br>-s</font>:设置系统时间 <code>date -s &quot;2018-11-11 00 00 00&quot;</code> </p><p><table><tr><td border="100%" width="100%" bgcolor="#E0FFFF">在使用date -s这个命令修改时间后，系统重启后就失效了，因此为了将这个时间永久生效，需要将修改的时间写入CMOS，查看CMOS的时间:<code>clock –r</code><br>将当前系统时间写入CMOS中去<code>clock –w</code> </td></tr></table> 在生产环境中常使用时间格式打包数据：<pre>tar zcvf etc-$(date +%F).tar.gz /etc<br>tar zcvf etc-`date +%F`.tar.gz /etc</pre></p><p><pre><br><img src="https://s2.ax1x.com/2019/05/09/Egwxs0.png" alt=""> date:2018/9/23<pre></pre></pre></p><h1 id="hwclock"><a href="#hwclock" class="headerlink" title="hwclock"></a>hwclock</h1><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/09/Eg0FJJ.png)"><font color="FFFFFF">查看硬件时间<br>设置硬件时间<code>hwclock --set --date=&quot;07/07/06 10:19&quot; （月/日/年 时:分:秒）</code><br>硬件时间和系统时间的同步：重新启动系统，硬件时间会读取系统时间，实现同步，但是在不重新启动的时候，需要用hwclock命令实现同步。<br>硬件时钟与系统时钟同步：<code>hwclock --hctosys</code>（hc代表硬件时间，sys代表系统时间）<br>系统时钟和硬件时钟同步:（让系统的时间同步到硬件时钟)<code>hwclock –-systohc</code></font></td></tr></table>.</p><h1 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h1><p>ln：链接命令<br>硬链接：复制并同步    ln /etc/passwd /tmp/password  <font color="red"><br>软链接：类似windows下的快捷方式　ln -s  /etc/passwd /tmp password</font><br>软链接和硬链接的区别:<br>1.创建命令不同:<font color="red"><br>ln -s /root/ruan.txt /root/桌面/</font>　ln /root/ying.txt /root/桌面/<br>2.<font color="red">软链接创建时必须使用绝对路径(链接和源文件在同一目录下,可以相对路径)</font>硬链接创建时可以绝对路径也可相对路径<br>3.<font color="red">软链接的源文件不可以剪切,重命名,删除 </font>硬链接的源文件可以剪切,重命名,删除<br>4.<font color="red">软链接的链接文件权限永远是777，即使将链接文件的权限进行了修改，也不会发生变化，变得是源文件的权限 </font><br>硬链接的链接文件权限永远和源文件相同<br>5.<font color="red">软链接的链接文件的inode号和源文件不同</font><br>硬链接的链接文件的inode号和源文件相同<br>6.<font color="red">软链接可以对目录操作</font><br>硬链接不支持对目录操作，是针对于上层来说，底层是可以针对于目录做硬链接的，通过代码就可以实现<br>7.<font color="red">软链接可以跨文件系统</font><br>硬链接不可以跨文件系统，因为硬链接是存放在源文件的同一个block上面的</p><h1 id="SElinux"><a href="#SElinux" class="headerlink" title="SElinux"></a>SElinux</h1><p>安全增强型 Linux（Security-Enhanced Linux）简称 SELinux，它是一个 Linux 内核模块，也是 Linux 的一个安全子系统。SELinux 主要作用就是最大限度地减小系统中服务进程可访问的资源（最小权限原则）  </p><p><font color="red">DAC</font><a href="http://blog.51cto.com/zhaotianyu/1795178" target="_blank" rel="noopener">http://blog.51cto.com/zhaotianyu/1795178</a>：在没有使用 SELinux 的操作系统中，决定一个资源是否能被访问的因素是：某个资源是否拥有对应用户的权限（读、写、执行）。<br>只要访问这个资源的进程符合以上的条件就可以被访问。<br>而最致命问题是，root 用户不受任何管制，系统上任何资源都可以无限制地访问。这种权限管理机制的主体是用户，也称为<font color="red">自主访问控制（DAC）。</font>  </p><p><font color="red">MAC</font><a href="http://baijiahao.baidu.com/s?id=1590170088632157084&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">http://baijiahao.baidu.com/s?id=1590170088632157084&amp;wfr=spider&amp;for=pc</a>：在使用了 SELinux 的操作系统中，决定一个资源是否能被访问的因素除了上述因素之外，还需要判断每一类进程是否拥有对某一类资源的访问权限。<br>这样一来，即使进程是以 root 身份运行的，也需要判断这个进程的类型以及允许访问的资源类型才能决定是否允许访问某个资源。进程的活动空间也可以被压缩到最小。<br>即使是以 root 身份运行的服务进程，一般也只能访问到它所需要的资源。即使程序出了漏洞，影响范围也只有在其允许访问的资源范围内。安全性大大增加。<br>这种权限管理机制的主体是进程，也称为<font color="red">强制访问控制（MAC）。</font><br><code>getenforce</code>命令是单词get（获取）和enforce(执行)连写，可查看selinux状态<br><code>setenforce</code> 命令则是单词set（设置）和enforce(执行)连写，用于设置selinux防火墙状态，如： setenforce 0用于关闭selinux防火墙，但重启后失效。<br><img src="https://s2.ax1x.com/2019/05/09/Eg0Zsx.png" alt=""> SELinux status：selinux防火墙的状态，enabled表示启用selinux防火墙<br>关闭SElinux:<br>临时关闭 :<code>setenforce 0</code>用于关闭selinux防火墙，但重启后失效<br>永久关闭：修改selinux的配置文件：<code>vim /etc/selinux/config</code><br>将SELINUX=enforcing改为SELINUX=disabled，保存后退出，此时获取当前selinux防火墙的安全策略仍为Enforcing，配置文件并未生效。重启后验证。<br>SELinux 有三种工作模式，分别是：<br>1.enforcing：强制模式。违反 SELinux 规则的行为将被阻止并记录到日志中。<br>2.permissive：宽容模式。违反 SELinux 规则的行为只会记录到日志中。一般为调试用。<br>3.disabled：关闭 SELinux </p><h1 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h1><p>1.Crontab是一个用于设置周期性执行任务的工具；<br>2.周期性执行的任务我们称为Cron Job；<br>3.周期性执行的任务列表我们称为Cron Table<br>crontab文件的含义：用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下:    </p><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/09/Eg0neK.md.png)"><pre>* * * * * command　minute　hour　day　month　week　command 顺序:分 时 日 月 周</pre><font color="#000BFFF"><strong> minute： 表示分钟，可以是从0到59之间的任何整数。<br>hour：表示小时，可以是从0到23之间的任何整数。<br>day：表示日期，可以是从1到31之间的任何整数。<br>month：表示月份，可以是从1到12之间的任何整数。<br>week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。　<br>command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件</strong></font></td></tr></table> <font color="red">-u</font>:编辑某个用户的cron，只用root可以使用此参数为别的用户设置cron服务。也可用于给用户指定crontab文件。  <font color="red"><br>-l</font>: 列出当前用户的crontab。  <font color="red"><br>-r</font>: 删除当前用户的crontab。  <font color="red"><br>-e</font>: 编辑当前用户的crontab，默认使用vi，或者是由 VISUAL或EDITOR环境变量指定的编辑器。  <font color="red"><br>-i与-r</font> 一起使用，用来询问用户是否直接删除crontab<br>安装cron<div class="note primary"><p></p>yum install vixie-cron<br>yum install crontabs<br>检查crontab工具是否安装：crontab -l<br>检查crond服务是否启动：service crond status<br>检查crontab服务状态：service crond status</div> <img src="https://s2.ax1x.com/2019/05/09/Eg0lJH.png" alt=""></p><ol><li>每晚的21:30重启apache<br><code>30 21 * * * service httpd restart</code>  </li><li>每月1,10,22日的4:45重启apache<br><code>45 4 1,10,22 * * service httpd restart</code></li><li>每月1-10日的4:45重启apache<br><code>45 4 1-10 * * service httpd restart</code> </li><li>每天18:00-23:00之间每隔30分钟重启apache<br><code>0,30 18-23 * * * service httpd restart</code><br><code>0-59/30 18-23 * * * service httpd restart</code></li><li>每晚11-早上7点之间，每隔一个小时重启apache<br><code>* 23-7/1 * * * service httpd restart</code></li><li>每隔两分钟重启apache <pre><code>*/2 * * * * service httpd restart  1-59/2 * * * * service httpd restart(奇数分钟重启)  0-58/2 * * * * service httpd restart(偶数分钟重启)</code></pre><table>小结：<br>*表示任何时候都匹配；<br>可以用”A,B,C”表示A或者B或者C时执行命令<br>可以用”A-B”表示A到B之间时执行命令<br>可以用”*/A”表示每A分钟(小时等)执行一次命令<br><pre>*/1 * * * * /usr/sbin/ntpdate us.pool.ntp.org | logger -t NTP</pre><br>时间同步:<br><img src="https://s2.ax1x.com/2019/05/09/Eg0GQI.png" alt=""></table></li></ol><h1 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h1><p>fdisk命令操作磁盘详解–添加、删除、转换分区等<br>主分区和扩展分区(扩展分区不能直接使用)(1-4),扩展分区下面再分逻辑分区(5开始)。 <code>fdisk /dev/sda</code><br><img src="https://s2.ax1x.com/2019/05/09/Eg0aTS.png" alt="">  分区保存报错需要重启时，强制读取分区表信息<br><code>#partprobe</code><br>yum install -y parted </p><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>grep [选项] “搜索内容” 文件名  <font color="red"><br>-i</font> 忽略大小写  <font color="red"><br>-n</font> 输出行号  <font color="red"><br>-v</font> 反向查找  <font color="red"><br>--color=auto</font>把搜索出的关键字用颜色显示</p><p><script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/highlight.min.js"></script></p><p><script>hljs.initHighlightingOnLoad();</script></p><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/styles/an-old-hope.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;FZShuTi&quot;&gt;linux 常用命令集合:&lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="command" scheme="http://yoursite.com/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>document</title>
    <link href="http://yoursite.com/2018/08/28/document/"/>
    <id>http://yoursite.com/2018/08/28/document/</id>
    <published>2018-08-28T09:28:03.000Z</published>
    <updated>2019-07-25T11:44:58.786Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="FZShuTi">Linux 文档</font></center><br><a id="more"></a></p><h1 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h1><h2 id="etc-passwd-用户信息文件"><a href="#etc-passwd-用户信息文件" class="headerlink" title="/etc/passwd:用户信息文件"></a>/etc/passwd:用户信息文件</h2><p><strong><code>user1:x:500:500::/home/user1:/bin/bash</code></strong><br>第一字段:用户名称；<br>第二字段:密码标志；<br>第三字段:UID(用户ID)；<br>　0：超级用户；<br>　1-499：系统用户(伪用户)；<br>　500-65535:普通用户；<br>第4字段：GID(用户初始组ID)<br>第5字段：用户说明<br>第6字段：家目录<br>　普通用户：/home/用户名/<br>　超级用户：/root/<br>第7字段：登录之后的Shell  </p><h2 id="影子文件-etc-shadow"><a href="#影子文件-etc-shadow" class="headerlink" title="影子文件:/etc/shadow"></a>影子文件:<font color="blue">/etc/shadow</font></h2><p>第1字段：用户名<br>第2字符：加密密码<br>　加密算法升级为SHA512散列加密算法<br>　如果密码位是“ ！”或“ * ”代表没有密码，不能登录。<br>第3字段：密码最后一次修改日期：使用1970年1月1号作为标准时间，每过一天时间戳加1。<br>第4字段：两次密码的修改间隔时间(和第3字段相比)间隔多少时间后才可以修改密码。<br>第5字段：密码有效期(和第3字段相比)<br>第6字段：密码修改到期前的警告天数(和第5字段相比)<br>第7字段：密码过期后的宽限天数(和第5字段相比)<br>　0：代表密码过期后立即失效。<br>　-1：则代表密码永远不会失效。<br>第8字段：账号失效时间，要用时间戳表示<br>第9字段：保留<br>把时间戳换算为日期：<br><code>date -d &quot;1970-01-01 17740 days&quot;</code><br>把日期换算为时间戳：<br><code>echo $(($(date --date=&quot;2018/07/28&quot; +%s)/86400+1))</code></p><h2 id="组信息文件-etc-group"><a href="#组信息文件-etc-group" class="headerlink" title="组信息文件/etc/group"></a>组信息文件/etc/group</h2><p>第一字段：组名<br>第二字段：组密码标志<br>第三字段：GID<br>第四字段：组中附加用户  </p><h2 id="组密码文件-etc-gshadow"><a href="#组密码文件-etc-gshadow" class="headerlink" title="组密码文件/etc/gshadow"></a>组密码文件/etc/gshadow</h2><p>第一字段：组名<br>第二字段：组密码<br>第三字段：组管理员用户名<br>第四字段：组中附加用户  </p><h2 id="用户的家目录"><a href="#用户的家目录" class="headerlink" title="用户的家目录"></a>用户的家目录</h2><ol><li>普通用户：/home/用户名/,所有者和所属者都是此用户，权限是700  </li><li>超级用户：/root/,所有者和所属者都是root用户，权限是550。  </li><li>用户的邮箱：/var/spool/mail/用户名/  </li><li>用户模板目录：/etc/skel:创建用户时，用户的家目录会自动创建一些隐藏文件，这些文件是从<font color="blue">/etc/skel/</font> 过去的。想要每个新添加用户时家目录自动出现共享文件可在此目录添加。</li></ol><h1 id="linux的特殊权限"><a href="#linux的特殊权限" class="headerlink" title="linux的特殊权限"></a>linux的特殊权限</h1><p>特殊权限：<font color="red"> SUID,SGID,STICKY </font><br>1.进程以某用户的身份运行；进程是发起此进程用户的代理，因此以此用户的身份和权限完成所有操作；<br>2.权限匹配模型：<br>(1)判断进程的属主，是否为被访问的文件属<font color="red"> 主 </font>；如果是，则应用属主的权限；否则进入第2步；<br>(2)判断进程的属主，是否属于被访问的文件属<font color="red"> 组 </font>；如果是，则应用属组的权限；否则进入第3步;<br>(3)应用other的权限；</p><h2 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h2><p>SetUID的功能:<table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/09/Eg04fJ.png)"><font color="red"><br><strong>1、只有可以执行的二进制程序才能设定SUID权限。<br>2、命令执行者要对该程序拥有X(执行)权限<br>3、命令执行者在执行该程序时获得该程序文件属主的身份<br>4、SetUID权限只在该程序执行过程中有效，也就是说身份改变只在程序执行过程中有效。</strong></font></td></tr></table>  <font color="red"><br>SUID </font>:默认情况下:用户发起的进程，进程的属主是其发起者；因此，其以发起者的身份运行；  <font color="red"><br>SUID </font>的功用：用户运行某程序时，如果此程序拥有SUID的权限，那么程序运行为进程时，进程的属主不是发起者，而程序文件自己的属主;<br>管理文件的SUID权限：   <font color="red"><br>chmod u+|-s FILe </font><br>展示位置：属主的执行权限位。  <font color="blue"><font color="lime"><br>#</font>chomod <strong><font color="red">4</font></strong></font>644 filename<br>取消suid权限：<font color="lime">#</font>chmod 644 filename<font color="red"> 大写S为报错,检查是否有x权限</font>.</p><h2 id="SGID"><a href="#SGID" class="headerlink" title="SGID"></a>SGID</h2><p><table><tr><td bgcolor="#778899"><font color="red">用户在执行程序时候，组身份变为该程序文件的属组与SUID类似。</font><br></td></tr></table> 管理文件的<font color="#FF1493"> SGID </font> 的权限：    <font color="red"><br>chmod g+|-s FILE </font> <font color="#FF1493"><br>SGID </font>:  功用：当目录属组有写的权限，且SGID权限时，当你给一个目录添加了sgid之后，后面不管谁来这个目录下创建文件，文件的所属组都会继承目录的所属组<br>展示位置：属组的执行权限位<br>如果属组原本有执行权限，则显示为小写s;否则，显示为大写S;    <font size="5">  <font color="blue"><font color="lime"><br>#</font>ll /usr/bin/locate  <font color="lime"><br>#</font>ll /var/lib/mlocate/mlocate.db</font><br><img src="https://s2.ax1x.com/2019/05/12/E4Afy9.png" alt=""></font></p><h2 id="STICKY"><a href="#STICKY" class="headerlink" title="STICKY"></a>STICKY</h2><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/09/Eg04fJ.png)"><br> <img src="https://ws1.sinaimg.cn/large/005RRiqRly1fu6b4yptk4j30mv0dn0uq.jpg" alt=""><br> <font color="red"> <strong>sticky</strong> </font><font color="white">:t权限只能给目录添加，当你给一个目录添加了t权限之后，后面所有人在这个目录下不能删除其他人的文件,只能删除自己的文件；<br> 管理文件的Sticky权限：<font color="red"> chmod o+|-t FILE</font><br> 展示位置：其他用户的执行权限位<br> 如果其他用户原本有执行权限，显示为小写t;否则为大写T。<br> 系统上的/tmp和/var/tmp目录下默认均有Sticky权限<br> <img src="https://ws1.sinaimg.cn/large/005RRiqRly1fvpljquenhj30fh0gz3zp.jpg" alt="">基于八进制方式赋权时，可于默认的三位八进制数字左侧再加一位八进制数字；  <font color="blue"><br><code>chmod 1777 中的 1 表示特殊权限</code> </font></font><br> </td></tr></table>.</p><h1 id="facl"><a href="#facl" class="headerlink" title="facl"></a>facl</h1><p>facl:file access control lists 文件访问控制列表<br>文件的额外赋权机制：在原有的u,g,o之外，另一层让普通用户控制赋权给另外的用户或组的赋权机制；<br>查看分区ACL权限是否开启<br><code>dumpe2fs -h /dev/sda3</code><br>dumpe2fs命令是查询指定分区详细文件系统信息的命令.选项：  <font color="red"><br>-h</font> 仅显示超级块中的信息，而不显示磁盘块组的详细信息  <font color="#FF6347"><br>临时开启分区ACL权限：</font>  <code>mount -o remount,acl /</code> 重新挂载根分区，并挂载加入acl权限。  <font color="#FF6347"><br>永久开启分区ACL权限</font><font color="lime">#</font>vi /etc/fstab<br><strong><pre>  UUID=c2ca6f57-b15c-43ea-bca0-f239083d8bd2 / ext4 dufaults,acl 1 1  　      加入ACL</pre></strong><br><code>mount -o remount /</code>:重新挂载文件系统或重启动系统，使修改生效。<br><code>getfacl filename</code>:查看文件额外的权限<br>setfacl命令：<font color="blue"> setfacl -m u:username:rw filename </font><br>赋权给用户：<font color="red"> setfacl -m u:USERNAME:MODE file </font><br>赋权给组：<font color="red"> serfacl -m g:GROUPNAME:MODE file </font>   <font color="#FF1493"><br>    撤销赋权:serfacl -x u:USERNAME file<br>　　　　serfacl -x g:USERNAME file  </font><br>递归ACL权限：<font color="lime">#</font>setfacl -m u:用户名:权限 -R 目录名  <table><tr><td bgcolor="#20B2AA"><font color="black">默认ACL权限:默认acl权限的作用是如果给父目录设定了默认的ACL权限，那么父目录中所有新建的子文件都会继承父目录ACL的权限。<font color="red"><font color="lime">#</font>setfacl -m d:u:用户名:权限 文件名</font></font></td></tr></table><img src="https://s2.ax1x.com/2019/05/12/E4A5e1.png" alt="">  setfacl 选项 文件名<br>选项：   <font color="red"><br>-m</font> :设定ACL权限  <font color="red"><br>-x</font> :删除指定的ACL权限  <font color="red"><br>-b</font> :删除文件<font color="red">所有</font>的ACL权限  <font color="red"><br>-d</font> :设定默认ACL权限  <font color="red"><br>-k</font> :删除默认ACL权限  <font color="red"><br>-R</font> :递归设定ACL权限  <font color="#FF6347">最大有效权限mask</font><br>mask是用来指定最大有效权限的。如果我给用户赋予了ACL权限，是需要和mask的权限”相与”才能得到用户的真正权限。  </p><table><thead><tr><th>A</th><th style="text-align:center">B</th><th>and</th></tr></thead><tbody><tr><td><strong>r</strong></td><td style="text-align:center"><strong>r</strong></td><td><strong>r</strong></td></tr><tr><td><strong>r</strong></td><td style="text-align:center"><strong>-</strong></td><td><strong>-</strong></td></tr><tr><td><strong>-</strong></td><td style="text-align:center"><strong>r</strong></td><td><strong>-</strong></td></tr><tr><td><strong>-</strong></td><td style="text-align:center"><strong>-</strong></td><td><strong>-</strong></td></tr></tbody></table><p>修改最大有效权限：<font color="lime">#</font>setfacl -m m:rx filename 设定mask权限为r-x。使用“m:权限”格式。</p><p><table><tr><td bgcolor="RED"><font color="black">  mask值只能添加ACL权限之后后期更改，当更改mask值以后再添加ACL权限，mask值就会变为777</font></td></tr></table>.  </p><h1 id="文件系统属性chattr权限"><a href="#文件系统属性chattr权限" class="headerlink" title="文件系统属性chattr权限"></a>文件系统属性chattr权限</h1><p><font color="lime">#</font>chattr [+-=] [选项] 文件或目录名<br>+：增加权限<br>-：删除权限<br>=：等于权限<br> 选项：<table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/12/E4A7FK.png)"><font color="red">-i:</font><font color="#008B8B">如果对文件设置i属性，那么不允许对文件进行删除、改名，也不能添加和修改数据；如果对目录设置i属性，那么只能修改目录下文件的数据还可以cp，但不允许建立和删除文件  <font color="red"><br> -a:</font>如果对文件设置a属性，那么只能在文件中增加数据(只能用echo增加数据，不能用vim)，但是不能删除也不能修改数据；如果对目录设置a属性，那么只允许在目录中建立和修改文件，但是不允许删除。</font></td></tr></table><code>chattr +i a.txt</code><br><code>lsattr -a a.txt</code><br><code>----i--------e- a.txt</code>　　 e:代表此文件在ext4文件系统下建立的。<br>查看文件系统属性：<br>lsattr 选项 文件名  <font color="red"><br>-a</font>显示所有文件和目录  <font color="red"><br>-d</font>若目标是目录，仅列出目录本身的属性，而不是子文件。</p><h1 id="sudo权限"><a href="#sudo权限" class="headerlink" title="sudo权限"></a>sudo权限</h1><p>root把本来只能超级用户执行的命令赋予普通用户执行。<br>sudo的操作对象是系统命令  <font color=""><br>whereis 命令 查看命令的绝对路径<br><code>visudo</code>  实际修改的是/etc/sudoers文件<br>root 　ALL=(ALL)　　　ALL<br>用户名　 被管理主机的地址=(可使用的身份)　 授权命令(绝对路径)  <font color="red"><br>被管理的主机地址可写成主机ip和ALL</font><br>%wheel　 ALL=(ALL) 　ALL<br>组名　 　被管理的主机地址=(可使用的身份) 　授权命令(绝对路径)   <font color="blue"><br>root　 ALL=(ALL) 　　ALL<br>st　　192.168.81.137=/sbin/shutdown -r now  添加内容  <font color="red"><strike><br>st　　 ALL=/usr/bin/vim 危险操作</strike></font><br><code>su - st</code>:切换用户<br><code>sudo -l</code>:查看可用的sudo命令<br><code>sudo /sbin/shutdown -r now</code> 普通用户执行sudo赋予的命令</font></font></p><h1 id="linux下查看帮助命令"><a href="#linux下查看帮助命令" class="headerlink" title="linux下查看帮助命令"></a>linux下查看帮助命令</h1><p><font color="red"> whatis </font> :用于查询一个命令执行什么功能，并将查询结果打印到终端上<br><code>whatis ls</code>  <font color="red"><br>man</font> :Linux提供了丰富的帮助手册，当你需要查看某个命令的参数时不必到处上网查找，只要man一下即可 man command</p><h1 id="linux根目录结构和文件系统"><a href="#linux根目录结构和文件系统" class="headerlink" title="linux根目录结构和文件系统"></a>linux根目录结构和文件系统</h1><p>进程的类型：<br>　　终端:硬件设备，关联一个用户接口。<br>　　与终端相关:通过终端启动。<br>　　与终端无关:操作引导启动过程中自动启动<br>操作系统的组成:<br>　　静态:kernel,application<br>　　文件系统:层级结构<br>FHS:　　Filesystem Hierarchy Standard  <font color="blue"><br>　/bin</font>:所有用户可用的基本命令程序文件；  <font color="blue"><br>　/sbin</font>:供系统管理使用的工具程序；  <font color="blue"><br>　/boot</font>:引导加载器必须用到的各种静态文件：Kernel,initramfs(initrd),grub等；  <font color="blue"><br>　/dev</font>:存储特殊文件或设备文件；<br>　　　设备有两种类型：字符设备(线性设备)、块设备(随机设备)；  <font color="blue"><br>　/etc</font>:系统程序的配置文件，只能为静态：  <font color="blue"><br>　/home</font>：普通的家目录的集中位置：一般每个普通用户的家目录默认为此目录下与用户名同名的子目录，/home/USERNAME；  <font color="blue"><br>　/lib</font>:为系统启动或根文件系统上的应用程序（/bin,/sbin）等提供共享库，以及为内核提供内核模块  <font color="red"><br>　　<strong>libc.so.*</strong></font>:动态链接的C库；  <font color="red"><br>　　<strong>ld*</strong></font>:运行时链接器/加载器；<br>　　　modules:用于存储内核模块的目录；  <font color="blue"><br>　/lib64</font>:64位系统特有的存放64位共享的路径；  <font color="blue"><br>　/media</font>:便携式设备挂载点，cdrom,floppy等；  <font color="blue"><br>　/mnt</font>:其他文件系统的临时挂载点；  <font color="blue"><br>　/opt</font>：附加应用程序的安装位置：可选路径；  <font color="blue"><br>　/srv</font>:当前主机为服务提供的数据；  <font color="blue"><br>　/tmp</font>:为那些会产生临时文件的程序提供的用于临时文件的目录：可供所用户执行写入操作：有特殊权限；  <font color="blue"><br>　/usr</font>:usr Hierarchy,全局共享的只读数据路径：<br>　　　bin,lib64<br>　　　include:C程序头文件；<br>　　　share:命令手册页和自带文档等架构特有的文件的存储位置<br>　　　local:另一个层级目录；<br>　　　X11R6:X-widow程序的安装位置<br>　　　src:程序源代码文件的存储位置</p><h1 id="多命令顺序执行"><a href="#多命令顺序执行" class="headerlink" title="多命令顺序执行"></a>多命令顺序执行</h1><p><table><tr><th>多命令执行符</th><th>格式</th><th>作用</th></tr><tr><td><strong>&amp;&amp;</strong></td><td>命令1 &amp;&amp; 命令2</td><td>逻辑与,当命令1正确执行,则命令2才会执行。当命令1执行不正确,则命令2不会执行</td></tr><tr><td><strong>||</strong></td><td>命令1 || 命令2</td><td>逻辑或,当命令1执行不正确,则命令才会执行。当命令1正确执行,则命令2不会执行</td></tr></table></p><h1 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h1><p><table><tr><th>通配符</th><th>作用</th></tr><tr><td><strong>?</strong></td><td>匹配一个任意字符</td></tr><tr><td><strong>*</strong></td><td>匹配0个或任意多个字符，也就是可以匹配任何内容</td></tr><tr><td>[]</td><td>匹配括号中任意一个字符。例如：[abc]代表一定匹配一个字符，或者a,或者b,或者c。</td></tr><tr><td>[^]</td><td>逻辑非，表示不匹配中括号内的任意一个字符。例如:[^0-9]代表匹配一个不是数字的字符。</td></tr></table></p><h2 id="Bash中其他特殊符号"><a href="#Bash中其他特殊符号" class="headerlink" title="Bash中其他特殊符号"></a>Bash中其他特殊符号</h2><p> <table><tr><th>符号</th><th>作用</th></tr><tr><td><code>&#39;&#39;</code></td><td>单引号。在单引号中所有的特殊符号，如<code>$</code>,<font color="red"><font size="5"><strong>`</strong>(反引号)</font></font>都没有特殊含义。</td></tr><tr><td><code>&quot;&quot;</code></td><td>双引号。在双引号中特殊符号都没有特殊含义，但是<code>$</code>,和<code>\</code>是例外,拥有<code>&quot;调用变量的值&quot;</code> <font color="red"><font size="5">`反引号</font></font>引用命令,和<code>&quot;转义符&quot;的特殊含义&quot;</code></td></tr><tr><td><font color="red"><font size="5">``</font></font></td><td>反引号。反引号括起来的内容是系统命令，在Bash中会先执行它。和$()作用一样，不过推荐使用$()，因为反引号非常容易看错。</td></tr><tr><td><code>$()</code></td><td>和反引号作用一样，用来引用系统命令。</td></tr><tr><td><code>#</code></td><td>在shell脚本中，#开头的行代表注释。</td></tr><tr><td><code>$</code></td><td>用于调用变量的值,如需要调用变量name的值时，需要用$name的方式得到变量的值时，需要用$name的方式得到变量的值。</td></tr><tr><td><code>\</code></td><td>转义符,跟在\之后的特殊符号将失去特殊含义，变为普通字符。如\$将输出<code>$</code>符号，而不当做是变量引用。</td></tr></table>.</p><pre><code>[root@Tiger ~]# name=test  [root@Tiger ~]# echo &#39;$name&#39;  $name  [root@Tiger ~]# echo &quot;$name&quot;  test    </code></pre><pre><code>[root@Tiger ~]# abc=`date`  [root@Tiger ~]# echo `date`  2018年 09月 09日 星期日 13:10:57 CST  [root@Tiger ~]# echo $abc  2018年 09月 09日 星期日 13:10:49 CST </code></pre><pre><code>[root@Tiger ~]# abc=$(date)   [root@Tiger ~]# echo $abc  2018年 09月 09日 星期日 13:12:44 CST  [root@Tiger ~]# echo &quot;abc&quot;  abc</code></pre><pre><code>[root@Tiger ~]# echo &quot;$abc&quot;  2018年 09月 09日 星期日 13:12:44 CST  反引号和$ #echo `ls`   #echo $(date)</code></pre><h1 id="Bash-变量"><a href="#Bash-变量" class="headerlink" title="Bash 变量"></a>Bash 变量</h1><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/12/E4AOQH.png)"><font size="3"><font face="FZYaoti">什么是变量：变量是计算机内存单元，其中存放的值可以改变。当Shell脚本需要保存一些信息时，如一个文件名或一个数字,就把它存放在一个变量中，每个变量有一个名字，所以很容易引用它，使用变量可以保存有用信息，使系统获知用户相关设置，变量也可以用于保存暂时信息。</font></font></td></tr></table>变量设置规则：<br>explanation  </p><ol><li>变量名称可以由字母、数字和下划线组成，但是不能以数字开头。如果变量名是”2name”则是错误的。  </li><li>在Bash中，变量的默认类型都是字符串型，如果要进行数值运算，则必修指定变量类型为数值型。  </li><li>变量用等号连接值，等号左右两侧不能有空格。  </li><li>变量的值如果有空格，需要使用单引号或双引号包括。  </li><li>在变量的值中，可以使用”\”转义符。  </li><li>如果需要增加变量的值，那么可以进行变量值的叠加，不过变量需要用双引号包含”$变量名”或用${变量名}包含。  </li><li>如果是把命令的结果作为变量值赋予变量，则需要使用反引号或$()包含命令。  </li><li>环境变量名建议大写，便于区分。<h2 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h2></li><li>用户自定义变量  </li><li>环境变量:这种变量中主要保存的是和系统操作环境相关的数据。 </li><li>位置参数变量:这种变量主要是用来向脚本当中传递参数或数据的，变量名不能自定义，变量作用是固定的。  </li><li>预定义变量:是Bash中已经定义好的变量，变量名不能自定义，变量作用也是固定好的。</li></ol><h2 id="本地变量"><a href="#本地变量" class="headerlink" title="本地变量"></a>本地变量</h2><p>变量定义：<font color="lime">#</font>name=<code>&quot;bianliang&quot;</code><br>变量叠加：  <font color="lime"><br>#</font>aa=123  <font color="lime"><br>#</font>aa=$aa456  <font color="lime"><br>#</font>aa=${aa}789<br>变量调用：<code>echo $name</code><br>变量查看：<code>set</code><br>变量删除：<code>&gt;unset name</code></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p><table><tr><td bgcolor="2f4f4f"><font color="ff4d40">环境变量是什么:用户自定义变量只在当前的Shell中生效，而环境变量会在当前Shell和这个Shell的所有子Shell当中生效。如果把环境变量写入相应的配置文件,那么这个环境变量就会在所有Shell中生效。</font></td></tr></table>  <font color="red"> pstree:查看进程数,查看当前shell</font><br>设置环境变量：export 变量名=变量值<br>申明变量:<br><code>env</code> :查询变量,专门查看环境变量。<code>set</code>:查看所有变量<br><code>unset 变量名</code> #删除变量  <font color="blue"><br>name=sc 本地变量<br>export age=18  环境变量<br>sex=man 本地变量。把已经定义好的本地变量变成环境变量，只需要：export sex<br></font></p><h2 id="系统常见环境变量"><a href="#系统常见环境变量" class="headerlink" title="系统常见环境变量"></a>系统常见环境变量</h2><p>PATH:系统查找命令的路径  <font color="lime"><br>#</font>echo $PATH<br>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin<br><strong>PATH变量叠加：<code>PATH=&quot;$PATH&quot;:/root/sh(脚本保存目录)</code></strong>  </p><h2 id="ps1-定义系统提示符的变量："><a href="#ps1-定义系统提示符的变量：" class="headerlink" title="ps1:定义系统提示符的变量："></a>ps1:定义系统提示符的变量：</h2><p>\d:显示日期，格式为”星期 月 日”<br>\h:显示简写主机名。如默认主机名”localhost”<br>\t:显示24小时制时间，格式为”HH:MM:SS”<br>\T:显示12小时制时间，格式为”HH:MM:SS”<br>\A:显示12小时制时间，格式为”HH:MM”<br>\u:显示当前用户名<br>\w:显示当前所在目录的完整名称<br>\W:显示当前所在目录的最后一个目录<br>#:执行的第几个命令<br>\$:提示符。如果为root用户会显示提示符为”#”,如果普通用户会显示提示符为”$”。<br>\@:时间 上下午 <font color="blue"><br><code>echo $PS1</code> :查看提示符<br>[root@Tiger ~]# <code>PS1=&#39;[\u@\t \w]\$ &#39;</code><font color="red">这里的空格生成以后,提示符后会有一个SPACE的距离。</font><br>[root@16:10:52 ~]#<code>cd /usr/local/src/</code><br>[root@16:11:08 /usr/local/src]#<br>　　　　　　　　　#PS1=<code>&#39;[\u@\@]\$&#39;</code><br>[root@04:13 下午]#PS1=<code>&#39;[\u@\@ \h]\$&#39;</code><br>[root@04:17 下午 Tiger]#PS1=<code>&#39;[\u \@@]\$&#39;</code><br>[root 04:18 下午@]#^<br></font></p><h2 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h2><p><table><tr><th>位置参数变量</th><th>作用</th></tr><tr><td>$n</td><td>n为数字,$0代表命令本身,$1-$9代表第一到第九个参数,十以上的参数需要用大括号包含,如${10}</td></tr><tr><td>$<em></em></td><td>这个变量代表命令行中所有的参数,$把所有的参数看成一个整体</td></tr><tr><td>$@</td><td>这个变量也代表命令行中所有的参数,不过$@把每个参数区别对待</td></tr><tr><td>$#</td><td>这个变量代表命令行中所有参数的个数</td></tr></table>位置参数变量的名称和作用是固定的，他是为了接受用户向程序传入不同的值。</p><pre><code>vim ceshi.sh    #!/bin/bash  echo $0echo $1echo $2echo $3 :wqchmod 755 ceshi.sh./ceshi.sh./ceshi.sh 输出结果是本身./ceshi.sh 11 22 33./ceshi.sh   输11   出22   接33   果</code></pre><pre><code>#!/bin/bashnum1=$1num2=$2sum=$(($num1 + $num2)) //变量sum的和是num1加num2echo $sum //打印sum的值chmod 755 ceshi.sh./ceshi.sh 11 22</code></pre><pre><code>#!/bin/bashecho $#echo $*echo $@chmod 755 ceshi.sh./ceshi.sh 11 22 33 44 55 66   6 11 22 33 44 55 6611 22 33 44 55 66</code></pre><p><img src="https://ws1.sinaimg.cn/large/005RRiqRly1fvw5je76t1j30te0h9acq.jpg" alt=""></p><h2 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h2><p><table><tr><th>预定义变量</th><th>作用</th></tr><tr><td>$?</td><td>最后一次执行的命令的返回状态，如果这个变量的值为0，证明上一个命令正确执行;如果这个变量的值非0(具体是哪个数，由命令自己来决定)，则证明上一个命令执行不正确了。</td></tr><tr><td>$$</td><td>当前进程的进程号(PID)</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的进程号(PID)/td&gt;</td></tr></table><br>在Linux里面输入一条命令正确执行以后，输入<font color="red">echo $?</font> ，默认输出<font color="red"> 0</font><br>当输出一条错误的命令以后，会系统报错，输入<font color="red">echo $?</font> ，默认输出 127</p><pre><code>#!/bin/bashecho &quot;$$&quot;find /root -name hello.sh $    // $符号的作用是把程序放在后台echo &quot;$!&quot;chmod 755 ceshi.sh./ceshi.sh2788827888</code></pre><h2 id="接受键盘输入"><a href="#接受键盘输入" class="headerlink" title="接受键盘输入"></a>接受键盘输入</h2><p><code>read [选项][变量名]</code>  <font color="red"><br>-p<code>&quot;提示信息&quot;</code></font>:在等待read输入时,输出提示信息  <font color="red"><br>-t 秒数</font>:read命令会一直等待用户输入，使用此选项可以指定等待时间。  <font color="red"><br>-n 字符数</font>:read命令只接受指定的字符数，就会执行  <font color="red"><br>-s</font>:隐藏输入的数据，适用于机密信息输入。 <font color="blue"><br><img src="https://s2.ax1x.com/2019/05/12/E4Azwt.png" alt=""> </font></p><h1 id="数值运算与运算符"><a href="#数值运算与运算符" class="headerlink" title="数值运算与运算符"></a>数值运算与运算符</h1><p>declare声明变量类型<br><code>declare [+/-][选项] 变量名</code>  <font color="red"><br><strong>-</strong></font>:给变量设定类型属性  <font color="red"><br><strong>+</strong></font>取消变量的类型属性  <font color="red"><br><strong>-i</strong></font>:将变量声明为整数型(integer)  <font color="red"><br><strong>-x</strong></font>:将变量声明为环境变量  <font color="red"><br><strong>-p</strong></font>:显示指定变量的被声明的类型<br>数值运算方法1:  <font color="lime"><br>[root@Tiger data]#</font>aa=11  <font color="lime"><br>[root@Tiger data]#</font>bb=22<br>给变量aa和bb赋值  <font color="lime"><br>[root@Tiger data]#</font>declare -i cc=$aa+$bb<br>方法2:expr或let数值运算工具  <font color="lime"><br>[root@Tiger data]#</font>aa=11<font color="lime"><br>[root@Tiger data]#</font>bb=22<br>给变量aa和变量bb赋值  <font color="lime"><br>[root@Tiger data]#</font>dd=$(expr $aa + $bb)<br>$dd的值是aa和bb的和,注意”+”号左右两侧必须有空格<br><strong>方法3:<code>$((运算式))</code>或<code>$[运算式]</code></strong>  <font color="blue"><br>aa=11<br>bb=22<br>gg=$(($aa+$bb))<br>ff=$[$aa+$bb]</font></p><h2 id="运算优先级-优先级从上到下"><a href="#运算优先级-优先级从上到下" class="headerlink" title="运算优先级 优先级从上到下"></a>运算优先级 优先级从上到下</h2><p><table><tr><th>优先级</th><th>运算符</th><th>说明</th></tr><tr><td>13</td><td>-，+</td><td>单目负,单目正</td></tr><tr><td>12</td><td>!，~</td><td>逻辑非，按位取反或补码</td></tr><tr><th>11</th><th>*，/，%</th><th>乘、除、取余</th></tr><tr><th>10</th><th>+，-</th><th>加、减</th></tr><tr><th>9</th><th>&lt;&lt;，&gt;&gt;</th><th>按位左移、按位右移</th></tr><tr><th>8</th><th>&lt;=，&gt;=，&lt;，&gt;</th><th>小于或等于、大于或等于、小于、大于</th></tr><tr><th>7</th><th>==，!==</th><th>等于、不等于</th></tr><tr><td>6</td><td>&amp;</td><td>按位与</td></tr><tr><th>5</th><th>^</th><th>按位异或</th></tr><tr><th>4</th><th>|</th><th>按位或</th></tr><tr><th>3</th><th>&amp;&amp;</th><th>逻辑与</th></tr><tr><th>2</th><th>||</th><th>逻辑或</th></tr><td>1</td><td>=，+=，-=， ，*=，/=，%=，&amp;=，^=，|=，&lt;&lt;=，&gt;&gt;=</td><td>赋值、运算且赋值</td></table>.</p><h2 id="变量测试与内容替换"><a href="#变量测试与内容替换" class="headerlink" title="变量测试与内容替换"></a>变量测试与内容替换</h2><p><img src="https://s2.ax1x.com/2019/05/12/E4ESTP.png" alt=""></p><pre><code>[root@Tiger ~]# unset y[root@Tiger ~]# x=${y-new}[root@Tiger ~]# echo $y[root@Tiger ~]# echo $xnew[root@Tiger ~]# y=&quot;&quot;[root@Tiger ~]# x=${y-new}[root@Tiger ~]# echo $x[root@Tiger ~]# y=old[root@Tiger ~]# x=${y-new}[root@Tiger ~]# echo $xold[root@Tiger ~]#</code></pre><h1 id="环境变量配置文件"><a href="#环境变量配置文件" class="headerlink" title="环境变量配置文件"></a>环境变量配置文件</h1><pre><code>source 配置文件　　</code></pre><p>或　　　　调用文件的命令</p><pre><code>. 配置文件</code></pre><p>环境变量配置文件简介：<table><tr><td bgcolor="black"><font color="white">环境变量配置文件中主要是定义对系统的操作环境生效的系统默认环境变量，比如PATH,HISTSIZE,PS1,HOSTNAME等默认环境变量。</font></td></tr></table>环境变量配置文件:<br>①/etc/profile<br>②/etc/profile.d/*.sh   *是通配符，代表这个目录下所有以.sh结尾的文件。<br>③~/.bash_profile<br>④~/.bashrc<br>⑤/etc/bashrc<br>其中3个在/etc/下面的变量配置文件是对所有登录Linux用户生效。另外两个是用户家目录下的隐藏文件只对当前用户生效。<br><img src="https://s2.ax1x.com/2019/05/12/E4EPfS.png" alt=""></p><h2 id="其他的配置文件和登录信息"><a href="#其他的配置文件和登录信息" class="headerlink" title="其他的配置文件和登录信息"></a>其他的配置文件和登录信息</h2><ol><li>注销时生效的环境变量配置文件：<br>~/.bash_logout :这个文件默认是空的，如果想要每次登录比如清空历史命令或者把自己的环境变量清空等，写入后，注销时他会自动执行</li><li>~/bash_history :保存的历史命令，但是有一些他还保存在内存当中，除非是手工写入<code>history -w</code>或者注销登录才会把内存中的命令转移到这个文件中去。</li><li>Shell登录信息 本地终端欢迎信息:<code>/etc/issue</code>只对本地登录有显示效果</li></ol><p><table><tr><th>转义符</th><th>作用</th></tr><tr><td>\d</td><td>显示当前系统日期</td></tr><tr><td>\s</td><td>显示操作系统名称</td></tr><tr><td>\l</td><td>显示登录的终端号,这个比较常用</td></tr><tr><td>\m</td><td>显示硬件体系结构,如i386、i686等</td></tr><tr><td>\n</td><td>显示主机名</td></tr><tr><td>\o</td><td>显示域名</td></tr><tr><td>\r</td><td>显示内核版本</td></tr><tr><td>\t</td><td>显示当前系统时间</td></tr><tr><td>\u</td><td>显示当前登录用户的序列号</td></tr></table><img src="https://s2.ax1x.com/2019/05/12/E4EmT0.png" alt=""> <img src="https://s2.ax1x.com/2019/05/12/E4E8X9.png" alt=""><font color="red">远程终端欢迎信息:</font> /etc/issue.net (上图的转义符本文件不能使用,只能使用纯文本信息)<br>转义符在/etc/issue.net文件中不能使用<br>是否显示此欢迎信息,由ssh的配置文件 /etc/ssh/sshd_config决定，加入<code>&quot;Banner /etc/issue.net&quot;</code>行才能显示(记得重启SSH服务) <img src="https://s2.ax1x.com/2019/05/12/E4EUk6.png" alt=""> <img src="https://s2.ax1x.com/2019/05/12/E4EatK.png" alt=""></p><p><table><tr><td bgcolor="red"><strong>登录后显示</strong> 欢迎信息:</td></tr></table> <code>/etc/motd</code> 不管是本地登录,还是远程登录,都可以显示此欢迎信息.直接写入此文件即可</p><h1 id="正则表达式与通配符"><a href="#正则表达式与通配符" class="headerlink" title="正则表达式与通配符"></a>正则表达式与通配符</h1><p><li img="" src="lower-roman">正则表达式用来在文件中匹配符合条件的字符串,正则是<font color="red">包含匹配</font>。grep、awk、sed等命令可以支持正则表达式。</li></p><p><li img="" src="lower-roman">通配符用来匹配符合条件的文件名，通配符是<font color="red">完全匹配</font>。ls、find、cp这些命令不支持正则表达式，所以只能使用shell自己的通配符来进行匹配。</li></p><p><table><tr><th>元字符　　　</th><th>作用</th></tr><tr><td>*</td><td>前一个字符匹配0次或任意多次</td></tr><tr><td>.</td><td>匹配除了换行字符外任意一个字符</td></tr><tr><td>^</td><td>匹配行首。例如：^hello 会匹配以hello开头的行。</td></tr><tr><td>$</td><td>匹配行尾。例如：hello$ 会匹配以hello结尾的行</td></tr><tr><td>[]</td><td>匹配中括号中指定的任意一个字符，只匹配一个字符。例如：[aeiou]匹配任意一个元音字母，[0-9]匹配任意一位数字，[a-z][0-9]匹配小写字母和一位数字构成的两位字符</td></tr><tr><td>[^]</td><td>匹配除中括号的字符以外的任意一个字符。例如：[^0-9]匹配任意一位非数字字符，[^a-z]表示任意一位非小写字母。</td></tr><tr><td>\</td><td>转义符。用于取消将特殊符号的含义取消。</td></tr><tr><td>\{n\}</td><td>表示其前面的字符恰好出现n次。例如：[0-9]\{4\}匹配4为数字，[1][3-8][0-9]\{9\}匹配手机号码</td></tr><tr><td>\{n,\}</td><td>表示其前面的字符出现不小于n次。例如：[0-9]\{2,\}表示两位及以上的数字</td></tr><tr><td>\{n,m\}</td><td>表示其前面的字符至少出现n次，最多出现m次。例如：[a-z]\{6,8\}匹配6到8位的小写字母</td></tr></table></p><p><table><tr><td bgcolor="#003153"><font color="36bf36"><code>*</code>前一个字符匹配0次，或任意多次<br><code>grep &quot;a*&quot; ceshi.txt</code> 匹配所有内容，包括空白行<br><code>grep &quot;aa*&quot; ceshi.txt</code> 匹配至少包含有一个a的行<br><code>grep &quot;aaa*&quot; ceshi.txt</code> 匹配最少包含两个连续a的字符串<br><code>grep &quot;aaaaa&quot; a.txt</code> 则会匹配最少包含四个连续的a的字符串</font><font color="00a15c"><br><code>.</code> 匹配除了换行符外任意一个字符<br><code>grep &quot;s..d&quot; a.txt</code> <code>s..d</code>会匹配s和d这两个字符之间一定有两个字符的单词<br><code>grep &quot;s.*d&quot; a.txt</code> 匹配在s和d字母之间有<strong>任意字符</strong><br><code>grep &quot;.*&quot; a.txt</code> <font color="red"><strong>匹配所有内容</strong></font></font><font color="8ce600"><br><code>^</code> 匹配行首，<code>$</code>匹配行尾<br><code>grep &quot;^M&quot; a.txt</code> 匹配以大写M开头的行<br><code>grep &quot;n$&quot; a.txt</code> 匹配以小写n结尾的行<br><code>grep -n &quot;^$&quot; a.txt</code> 会匹配空白行,-n 显示行号</font><font color="66ff59"><br><code>[]</code> 匹配中括号中指定的任意一个字符，只匹配一个字符<br><code>grep &quot;s[ao]id&quot; a.txt</code> 匹配s和i字母中，要么是a要么是o<br><code>gep &quot;[0-9]&quot; a.txt</code> 匹配任意一个数字<br><code>grep &quot;^[a-z] a.txt</code> 匹配用小写字母开头的行<br><code>grep &quot;^[a-z]&quot; a.txt</code> 匹配用小写字母开头的行 </font><font color="4de680"><br><code>^</code> 匹配除中括号的字符以外的任意一个字符<br><code>grep &quot;^[^a-z]&quot; a.txt</code> 匹配不用小写字母开头的行<br><code>grep &quot;^[^a-zA-Z]&quot; a.txt</code> 匹配不多字母开头的行</font><font color="de3163"><br><code>\</code> 转义符<br><code>grep &quot;\.$&quot; a.txt</code> 匹配使用<code>.</code>结尾的行</font><font color="ff8033"><br><code>\{n\}</code> 表示其前面的字符恰好出现n次<br><code>grep &quot;a\{3\}&quot; a.txt</code> 匹配a字母连续出现三次的字符串<br><code>grep &quot;[0-9]\{3\}&quot; a.txt</code> 匹配包含连续的三个数字的字符串</font><font color="dc143c"><br><code>{n,\}</code> 表示其前面的字符出现不小于n次<br><code>grep &quot;^[0-9]\{3,\}&quot; a.txt</code> 匹配最少用连续三个数字开头的行</font><font color="dda0dd"><br><code>\{n,m}</code> 匹配其前面的字符至少出现n次，最多出现m次<br><code>grep &quot;sa\{1,3\}i&quot; a.txt</code> 匹配在字母s和字母i之前有最少一个a,最多三个a</font><br></td></tr></table></p><h1 id="字符截取命令"><a href="#字符截取命令" class="headerlink" title="字符截取命令"></a>字符截取命令</h1><p>cut 字段提取命令<br>printf 命令 (严格意义上讲他不属于字符截取命令，因为awk要用到，在这里提出)<br>awk 命令<br>sed 命令<br><code>cut [选项][文件名]</code> <font color="red"><br>-f 列号:</font> 提取第几列 <font color="red"><br>-d 分隔符:</font> 按照指定分隔符分割列.他的默认分隔符是Tab<br><code>cut -f &quot;:&quot; -f 1,3 /etc/passwd</code></p><pre><code>[root@Tiger data]# vim b.txt　　　　这里的空格是Tab键  1 ID      NAME    gender  mark  2 1       liming  M       86  3 2       sc      M       90  4 3       cao     M       83</code></pre><pre><code>[root@Tiger data]# cut -f 2 b.txtNAMElimingsccao</code></pre><pre><code>[root@Tiger data]# cut -f 2,4 b.txt NAME    markliming  86sc      90cao     83</code></pre><p><code>cat /etc/passwd | grep /bin/bash | grep -v root | cut -d &quot;:&quot; -f 1</code> 常和grep结合使用，查看用户文件，查找普通用户，过滤root，提取用户名称</p><h2 id="cut命令的局限"><a href="#cut命令的局限" class="headerlink" title="cut命令的局限"></a>cut命令的局限</h2><p><code>df -h | grep /dev/sda3 | cut -d &quot; &quot; -f 5</code> df命令使用的是空格分隔符，这条命令不能使用，cut对空格使用不友好</p><h2 id="printf-39-输出类型输出格式-39-输出内容"><a href="#printf-39-输出类型输出格式-39-输出内容" class="headerlink" title="printf &#39;输出类型输出格式&#39; 输出内容"></a>printf <code>&#39;输出类型输出格式&#39;</code> 输出内容</h2><p>输出类型:<br>%ns：输出字符串。n是数字指代输出几个字符<br>%ni：输出整数。n是数字指代输出几个数字<br>%m.nf：输出浮点数。m和n是数字，指代输出的整数位数和小数位数。如%8.2f代表共输出8位数，其中2是小数，6位是整数。</p><p><table><tr><th>输出格式</th><th>作用</th></tr><tr><td>\a</td><td>输出警告音</td></tr><tr><td>\b</td><td>输出退格键，也就是Backspace键</td></tr><tr><td>\f</td><td>清除屏幕</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>回车，也就是Enter键</td></tr><tr><td>\t</td><td>水平输出退格键，也就是Tab键</td></tr><tr><td>\v</td><td>垂直输出退格键，也就是Tab键</td></tr></table></p><pre><code>[root@Tiger data]# printf %s 1 2 3 4 5 6123456[root@Tiger data]# [root@Tiger data]# printf %s %s %s  1 2 3 4 5 6%s%s123456[root@Tiger data]# [root@Tiger data]# printf &#39;%s %s %s&#39; 1 2 3 4 5 61 2 34 5 6[root@Tiger data]# [root@Tiger data]# printf &#39;%s %s %s\n&#39; 1 2 3 4 5 61 2 34 5 6[root@Tiger data]#</code></pre><p>printf输出文件内容格式：<code>printf &#39;%s\n&#39; $(cat a.txt)</code></p><pre><code>[root@Tiger data]# printf &#39;%s\t %s\t %s\t %s\n&#39; $(cat b.txt) 调整格式输出ID       NAME    gender  mark1        liming  M       862        sc      M       903        cao     M       83[root@Tiger data]#</code></pre><p><table><tr><td bgcolor="2f4f4f"><font color="#ffffff">在awk命令的输出中支持print和printf命令<br>print：print会在每个输出之后自动加入一个换行符(linux 默认没有print命令)<br>printf：printf是标准格式输出命令，并不会自动加入换行符，如果需要换行，需要手工换行符。</font></td></tr></table></p><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>awk ‘条件1{动作1} 条件2{动作2}…’ 文件名<br>条件：一般使用关系表达式作为条件<br>x &gt; 10 判断变量x是否大于10<br>x &gt;= 10 大于等于<br>x &lt;= 10 小于等于<br>动作：格式化输出<br>流程控制语句<br><code>df -h | awk &#39;{print $1 &quot;\t&quot; $5 &quot;\t&quot; $6}&#39;</code> print 自动加入换行符</p><pre><code>[root@Tiger data]# df -h | grep sda3 | awk &#39;{print $5}&#39; | awk -F &#39;%&#39; &#39;{print $1}&#39;62</code></pre><pre><code>[root@Tiger data]# df -h | grep sda3 | awk &#39;{print $5}&#39; | cut -d &quot;%&quot; -f 162</code></pre><p>BEGIN END</p><pre><code>awk &#39;BEGIN {printf &quot;打印这里的文字\n&quot;}{printf $2 &quot;\t&quot; $6 &quot;\n&quot;}&#39; a.txt打印这里的文字NAME    genderliming  Msc      Mcao     M</code></pre><p><code>awk &#39;{FS=&quot;:&quot;}{print $1 &quot;\t&quot; $3}&#39; /etc/passwd</code> 这样执行的话第一条会无法分割，所以可以在<code>awk &#39;BEGIN{FS=&quot;:&quot;}{print $1 &quot;\t&quot; $3}&#39; /etc/passwd</code>, awk是先读取一行在再执行命令，这样文件的第一行会来不及执行默认空格换行打印出。But但是可以直接用<code>awk -F &quot;:&quot; &#39;{print $2 &quot;\t&quot; $3}&#39; /etc/passwd</code><br><code>awk -F &quot;:&quot; &#39;END{print &quot;所有的命令执行完以后再执行&quot;&quot;}{print $2 &quot;\t&quot; $3}&#39; /etc/passwd</code><br>关系运算符</p><pre><code>[root@Tiger data]# cat b.txtID      NAME    gender  mark1       liming  M       862       sc      M       903       cao     M       83[root@Tiger data]# cat b.txt | grep -v NAME | awk &#39;$3 &gt;= 87 {print $2}&#39; limingsccao[root@Tiger data]# </code></pre><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p><table><tr><td bgcolor="5686bf"><font color="0000">sed 是一种几乎包括在所有UNIX平台(包括linux)的轻量级流量编辑器。sed主要是用来将数据进行选取、替换、删除、新增的命令。</font></td></tr></table><br>vi 只能修改文件，但是vi不能修改命令的输出，他只能先把命令的输出保存在文件中，然后修改文件的输出。但是sed可以修改命令的输出结果，结合管道符。<br><code>sed [选项] &#39;[动作]&#39;</code>文件名<font color="red"><br>-n </font>:一般sed命令会把所有数据都输出到屏幕，如果加入此选择，则只会把经过sed命令处理的行输出到屏幕。 <font color="red"><br>-e :</font>允许对输入数据应用多条sed命令编辑<font color="red"><br>-i :</font>用sed的修改结果直接修改读取数据的文件，而不是由屏幕输出。</p><p><table><tr><th>动作</th><th>作用</th></tr><tr><td><code>a\</code></td><td>追加，在当前行后添加一行或多行。添加多行时，除最后一行外，每行末尾需要用<code>\</code>代表数据未完结</td></tr><tr><td><code>c\</code></td><td>行替换，用c后面的字符串替换原数据行，替换多行时，除最后一行外，每行末尾需要用<code>\</code>代表数据未完结</td></tr><tr><td><code>i\</code></td><td>插入，在当期行前插入一行或多行。插入多行时，除最后一行外，每行末尾需要用<code>\</code>代表数据未完结</td></tr><tr><td><code>d</code></td><td>删除，删除指定的行</td></tr><tr><td><code>p</code></td><td>打印，输出指定的行</td></tr><tr><td><code>s</code></td><td>字符替换，用一个字符串替换另外一个字符串。格式为<code>行范围s/旧字符串/新字符串/g</code>(和vim中的替换格式类似)</td></tr></table>.</p><pre><code>[root@Tiger data]# cat a.txt　　　例:ID      name    PHP     Linux   Mysql   Average1       Liming  82      95      86      87.662       Sc      74      96      87      85.663       Gao     99      83      93      91.66</code></pre><h3 id="行操作"><a href="#行操作" class="headerlink" title="行操作"></a>行操作</h3><p>查看文件的第二行</p><pre><code>[root@Tiger data]# sed &#39;2p&#39; a.txtID      name    PHP     Linux   Mysql   Average1       Liming  82      95      86      87.661       Liming  82      95      86      87.662       Sc      74      96      87      85.663       Gao     99      83      93      91.66[root@Tiger data]# sed -n &#39;2p&#39; a.txt1       Liming  82      95      86      87.66</code></pre><p>删除文件第2行到第4行，可以看到没有对文件本身造成影响</p><pre><code>[root@Tiger data]# sed &#39;2,4d&#39; a.txtID      name    PHP     Linux   Mysql   Average[root@Tiger data]# cat a.txtID      name    PHP     Linux   Mysql   Average1       Liming  82      95      86      87.662       Sc      74      96      87      85.663       Gao     99      83      93      91.66</code></pre><p>在第二行后追加hello</p><pre><code>sed &#39;2a hello&#39; a.txt</code></pre><p>在第二行前插入两行数据</p><pre><code>sed &#39;2i hello\world&#39; a.txt</code></pre><p>修改第四行文件。将第四行的99替换成55</p><pre><code>[root@Tiger data]# sed &#39;4c no file&#39; a.txtID      name    PHP     Linux   Mysql   Average1       Liming  82      95      86      87.662       Sc      74      96      87      85.66no file[root@Tiger data]# sed &#39;4s/99/55/g&#39; a.txtID      name    PHP     Linux   Mysql   Average1       Liming  82      95      86      87.662       Sc      74      96      87      85.663       Gao     55      83      93      91.66</code></pre><h3 id="字符替换-sed-39-s-旧字符-新字符-g-39-文件名"><a href="#字符替换-sed-39-s-旧字符-新字符-g-39-文件名" class="headerlink" title="字符替换 sed &#39;s/旧字符/新字符/g&#39; 文件名"></a>字符替换 <code>sed &#39;s/旧字符/新字符/g&#39; 文件名</code></h3><p>在第3行中，把74换成99</p><pre><code>sed &#39;3s/74/99/g&#39; a.txt</code></pre><p>sed操作的数据直接写入文件  </p><pre><code>sed -i &#39;3s/74/99/g a.txt&#39;</code></pre><p>同时把<code>linux</code>和<code>Gao</code>替换为空</p><pre><code>sed -e &#39;s/Linux//g;s/Gao//g/a.txt&#39; 前面没有加行号代表整篇文档</code></pre><h1 id="字符处理命令"><a href="#字符处理命令" class="headerlink" title="字符处理命令"></a>字符处理命令</h1><p>统计命令 wc <font color="red"><br>-l :</font>只统计行数 <font color="red"><br>-w :</font>只统计单词数 <font color="red"><br>-m :</font>只统计字符数</p><p>sort见command</p><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><h2 id="按照文件类型判断"><a href="#按照文件类型判断" class="headerlink" title="按照文件类型判断"></a>按照文件类型判断</h2><p><table><tr><th>测试选型</th><th>作用</th></tr><tr><td>-b 文件</td><td>判断该文件是否存在，并且是否为块设备文件(是块设备文件为真)</td></tr><tr><td>-c 文件</td><td>判断该文件是否存在，并且是否为字符设备文件(是字符设备文件为真)</td></tr><tr><td>-d 文件</td><td>判断该文件是否存在，并且是否为目录文件(是目录为真)</td></tr><tr><td>-e 文件</td><td>判断该文件是否存在，(存在为真)</td></tr><tr><td>-f 文件</td><td>判断该文件是否存在，并且是否为普通文件(是普通文件为真)</td></tr><tr><td>-L 文件</td><td>判断该文件是否存在，并且是否为符号链接文件(是符号链接文件为真)</td></tr><tr><td>-p 文件</td><td>判断文件是否存在，并且是否为管道文件(是管道文件为真)</td></tr><tr><td>-s 文件</td><td>判断该文件是否存在，并且是否为非空(非空为真)</td></tr><tr><td>-S 文件</td><td>判断该文件是否存在，并且是否为套接字文件(是套接字文件为真)</td></tr></table> 判断文件是否存在(两种格式)<br><code>test -e /root/install.log</code><br><code>-e /root/install.log]</code><br>第一个判断命令如果正确执行，则打印”yes”，否则打印”no”<br><code>[ -d /root ] &amp;&amp; echo &quot;yes&quot; || &quot;no&quot;</code>注意空格 </p><h2 id="按照文件权限进行判断"><a href="#按照文件权限进行判断" class="headerlink" title="按照文件权限进行判断"></a>按照文件权限进行判断</h2><p><table><tr><th>测试选项</th><th>作用</th></tr><tr><td>-r 文件</td><td>判断该文件是否存在，并且是否该文件拥有读权限(有读权限为真)</td></tr><tr><td>-w 文件</td><td>判断该文件是否存在，并且是否该文件拥有写权限</td></tr><tr><td>-x 文件</td><td>判断该文件是否存在，并且是否该文件拥有执行权限(有执行权限为真)</td></tr><tr><td>-u 文件</td><td>判断该文件是否存在，并且是否该文件拥有SUID权限(有SUID权限为真)</td></tr><tr><td>-g 文件</td><td>判断该文件是否存在，并且是否该文件拥有SGID权限(有SGID权限为真)</td></tr><tr><td>-k 文件</td><td>判断该文件是否存在，并且是否该文件拥有SBit权限(有SBit权限为真)</td></tr></table>.</p><pre><code>test -w /data/a.txt &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot; 他只要UGO只要有一个有写权限就会执行出来</code></pre><h2 id="两个文件之间进行比较"><a href="#两个文件之间进行比较" class="headerlink" title="两个文件之间进行比较"></a>两个文件之间进行比较</h2><p><table><tr><th>测试选项</th><th>作用</th></tr><tr><td>文件1 -nt 文件2</td><td>判断文件1的修改时间是否比文件2的新(如果新则为真)</td></tr><tr><td>文件1 -ot 文件2</td><td>判断文件1的修改时间是否比文件2的旧(如果旧则为真)</td></tr><tr><td>文件1 -ef 文件2</td><td>判断文件1是否和文件2的Inode号一致，可以理解为两个文件是否为同一个文件。这个判断用于判断硬链接是很好的方法</td></tr></table><br>比较硬链接的文件Inode号</p><pre><code>test a.txt -ef /tmp/a1.txt &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</code></pre><h2 id="两个整数之间比较"><a href="#两个整数之间比较" class="headerlink" title="两个整数之间比较"></a>两个整数之间比较</h2><p><table><tr><th>测试选项</th><th>作用</th></tr><tr><td>整数1 -eq 整数2</td><td>判断整数1是否和整数2相等 (相等为真)</td></tr><tr><td>整数1 -ne 整数2</td><td>判断整数1是否和整数2不相等 (不相等为真)</td></tr><tr><td>整数1 -gt 整数2</td><td>判断整数1 是否大于整数2 (大于为真)</td></tr><tr><td>整数1 -lt 整数2</td><td>判断整数1是否小于整数2 (小于为真)</td></tr><tr><td>整数1 -ge 整数2</td><td>判断整数1是否大于等于整数2 (大于等于为真)</td></tr><tr><td>整数1 -le 整数2</td><td>判断整数1是否小于等于整数2 (小于等于真)</td></tr></table></p><pre><code>[ 23 -gt 22 ] &amp;&amp; echo &quot;Y&quot; || echo &quot;N&quot;  注意[]左右的空格</code></pre><h2 id="字符串的判断"><a href="#字符串的判断" class="headerlink" title="字符串的判断"></a>字符串的判断</h2><p><table><tr><th>测试选项</th><th>作用</th></tr><tr><td>-z 字符串</td><td>判断字符串是否为空(为空返回真)</td></tr><tr><td>-n 字符串</td><td>判断字符串是否为非空(非空返回真)</td></tr><tr><td>子串1 == 子串2</td><td>判断子串1是否和子串2相等(相等返回真)</td></tr><tr><td>子串1 ！= 子串2</td><td>判断字符串1是否和字符串2不相等(不相等为真)</td></tr></table>.</p><pre><code>[root@Tiger data]# name=scYou have new mail in /var/spool/mail/root[root@Tiger data]# [ -z &quot;$name&quot; ] &amp;&amp; echo &quot;Y&quot; || echo &quot;N&quot;N</code></pre><pre><code>[root@Tiger data]# aa=abc[root@Tiger data]# bb=abc[root@Tiger data]# [ &quot;$aa&quot; == &quot;$bb&quot; ] &amp;&amp; echo &quot;y&quot; || echo &quot;N&quot;y</code></pre><h2 id="多重条件判断"><a href="#多重条件判断" class="headerlink" title="多重条件判断"></a>多重条件判断</h2><p><table><tr><th>测试选项</th><th>作用</th></tr><tr><td>判断1 -a 判断2</td><td>逻辑与，判断1和判断2都成立，最终的结果才为真</td></tr><tr><td>判断1 -o 判断2</td><td>逻辑或，判断1和判断2有一个成立，最终的结果就为真</td></tr><tr><td>! 判断</td><td>逻辑非，使原始的判断式取反</td></tr></table></p><pre><code>[root@Tiger data]# aa=24[root@Tiger data]# [ -n &quot;$aa&quot; -a &quot;$aa&quot; -gt 23 ] &amp;&amp; echo &quot;yes&quot; || echo &quot;NO&quot;yes[root@Tiger data]# [ -z &quot;$aa&quot; -a &quot;$aa&quot; -gt 23 ] &amp;&amp; echo &quot;yes&quot; || echo &quot;NO&quot;  NO</code></pre><h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><pre><code>单分支if条件语句：if [ 条件判断 ] ;then    程序fi或者if    [ 条件判断 ]    then        程序fi</code></pre><p><table><tr><td style="background-image:url(https://s1.ax1x.com/2018/10/14/iU3e6x.jpg)"><font color="ff4d40"><br>单分支条件语句需要注意几个点<br>if语句使用fi结尾,和一般语言使用大括号结尾不同<br>[ 条件判断 ]就是使用test命令判断，所以中括号和条件判断式之间必须有空格<br>then后面跟符合条件之后执行的程序，可以放在[]之后，用<code>:</code>分割，也可以换行写入，就不需要<code>；</code>了<br></font>.</td></tr></table></p><pre><code>判断用户输入的是什么文件#!/bin/bashread -p &quot;Please input a filename: &quot; fileif [ -z $file ]         then                echo &quot;Error please input a filenmae&quot;                exit 1 1elif [ ! -e $file ]        then                echo &quot;Your input is not file!&quot;elif [ -f $file ]        then                echo &quot;$file is a reguare file&quot;elif [ -d $file ]        then                echo &quot;$file is a directory file!&quot;else                echo &quot;$file is a other file&quot;fi</code></pre><pre><code>备份/etc/目录#!/bin/bashdate=$(date +%F)size=$(du -sh /home)if [ -d /tmp/date ]        then                echo &quot;date is:$date&quot; &gt; /tmp/date/a.txt                echo &quot;size is:$date&quot; &gt;&gt; /tmp/date/a.txt                cd /tmp/date                tar -zcf home_$date.tar.gz /home a.txt &amp;&gt;/dev/null                rm -fr /tmp/date/a.txtelse                mkdir /tmp/date                echo &quot;date is:$date&quot; &gt; /tmp/date/a.txt                echo &quot;size is:$date&quot; &gt;&gt; /tmp/date/a.txt                cd /tmp/date                tar -zcf home_$date.tar.gz /home a.txt &amp;&gt;/dev/null                rm -fr /tmp/date/a.txtfi</code></pre><p>nmap -sT ip地址：-sT作用扫描指定服务器查找的开放端口</p><pre><code>判断sshd服务是否开启#!/bin/bashport=$(nmap -sT 192.168.100.136 | grep ssh | awk &#39;{print $2}&#39;)if [ $port == &quot;open&quot; ]        then                echo &quot;$(date) sshd is ok!!&quot; &gt;&gt; /tmp/sshd_acc.log        else                /etc/rc.d/init.d/sshd restart &amp; &gt;/dev/null                echo &quot;$(date) sshd reboot!!&quot; &gt;&gt; /tmp/sshd_err.logfi</code></pre><h2 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h2><p>多分支case条件语句 <table><tr><td style="background-image:url(https://s1.ax1x.com/2018/10/18/iwAR3T.jpg)"><font color="000000"><font size="4"><br>case语句和if…elif…else语句一样，都是多分支条件语句，不过和if多分支条件语句不同的是，case语句只能判断一种条件关系，而if语句可以判断多种条件关系。</font></font></td></tr></table></p><pre><code>  1 #!/bin/bash  2 echo &#39;shanghai please input &quot;dddd&quot;&#39;  3 echo &#39;guangzhou please input &quot;2&quot;&#39;  4 echo &#39;chengdu please input &quot;3&quot;&#39;  5 read -t 30 -p &quot;Please input your weizhi: &quot; u  6 case $u in  7         &quot;dddd&quot;)  8                 echo &quot;shanghai de &quot;  9                 ;; 10         &quot;2&quot;) 11                 echo &quot;guangzhou&quot; 12                 ;; 13         &quot;3&quot;) 14                 echo &quot;chengdu&quot; 15                 ;; 16         *) 17                 echo &quot;error 1/2/3&quot; 18 esac</code></pre><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>语法一：<br>for 变量 in 值1 值2 值3<br>    do<br>        程序<br>    done</p><pre><code>查看当前目录有多少.sh结尾的文件。 #!/bin/bash  2 cd /home/ceshi.sh  3 ls *.sh &gt; ls.log  4 y=1  5 for i in $(cat ls.log)  6         do  7                 echo $y  8                 y=$(( $y + 1))  9         done</code></pre><p>语法二：<br>for((初始值；循环控制条件；变量变化))<br>    do<br>        程序<br>    done</p><pre><code>从1加到100 #!/bin/bash  2 s=0  3 for (( i=1;i&lt;=100;i=i+1 ))  4         do  5                 s=$(( $s+$i ))  6         done  7 echo $s</code></pre><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>while循环是不定循环，也称作条件循环。只要条件判断式成立，循环就会一直继续，直到条件判断式不成立，循环才会停止。这就和for的固定循环不太一样了。</p><pre><code>while [ 条件判断式 ]    do         程序    done</code></pre><pre><code> 1 #!/bin/bash  2 i=1  3 s=0  4 while [ $i -le 100  ]  5         do  6                 s=$(( $s+$i ))  7                 i=$(( $i+1 ))  8         done  9 echo $s        </code></pre><h2 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h2><p>until循环，和while循环相反，until循环时只要条件判断式不成立则进行循环，并执行循环程序。一旦循环条件成立，则终止循环。</p><pre><code>#!/bin/bashi=1s=0until [ $i -gt 100  ]        do                s=$(( $s+$i ))                i=$(( $i+1 ))        doneecho $s</code></pre><h1 id="服务的简介与分类"><a href="#服务的简介与分类" class="headerlink" title="服务的简介与分类"></a>服务的简介与分类</h1><p><img src="https://s1.ax1x.com/2018/11/07/iT5eJA.png" alt="">启动与自启动</p><ol><li>服务器启动: 就是在当前系统中让服务运行，并提供功能。</li><li>服务自启动: 自启动是指让服务在系统开机重启动之后，随着系统的启动而自动启动服务。<br>rpm包安装的服务：<br><code>chkconfig --list</code> :查看服务自启动状态，可以看到所有RPM包安装的服务<br>源码包安装的服务：<br>查看服务安装位置，一般是/usr/local下<br><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/12/E4E0pD.png)"><strong>RPM安装服务和源码包安装服务的区别：<br> 就是安装位置的不同<br> 源码包安装包安装在指定位置，一般是/usr/local/<br>RPM包安装在默认位置中</strong><br><font color="red">service 不能用于源码包，因为service默认搜索的是/etc/rc.d/init.d/这个路径，也就是RPM包安装的路径</font></td></tr></table><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/12/E4EB1e.png)"><font color="fffafa">RPM包的一般存放的默认位置：<br>/etc/init.d/ :启动脚本位置<br>/etc/sysconfig/ :初始化环境配置文件位置<br>/etc/ :配置文件位置<br>/etc/xinted.conf ：xinetd配置文件<br>/etc/xinetd.d/ :基于xinetd服务的启动脚本<br>/var/lib/ :服务产生的数据放在这里<br>/var/Log/ :日志 </font></td></tr></table></li></ol><h2 id="独立服务的启动："><a href="#独立服务的启动：" class="headerlink" title="独立服务的启动："></a>独立服务的启动：</h2><p>/etc/init.d/独立服务名 start|stop|status|restart<br>service 独立服务名 start|stop|status|restart</p><p><font color="red">status</font> 查询服务的状态</p><p><font color="red">service</font> 红帽专有命令</p><p><font color="red">service –status-all</font> 列出系统所有已经安装的RPM包服务的状态</p><blockquote><p>独立服务的自启动<br>chkconfig命令 （详见command）<br>修改/etc/rc.d/rc.local文件<br>使用ntsysv命令管理自启动(红帽专有命令)</p></blockquote><h2 id="基于xinetd服务"><a href="#基于xinetd服务" class="headerlink" title="基于xinetd服务"></a>基于xinetd服务</h2><p> yum -y install xinetd<br>这是可以用chkconfig –list 查看服务可以看到基于xinetd的服务<br> yum -y install telnet-server 安装telnet服务端<br>chkconfig –list 查看安装的服务<br>Telnet的默认端口是23，netstat -tlun telnet服务还没有开启<br>xinetd服务的启动：<code>vim /etc/xinetd.d/telnet</code> 修改文件<br>service xinetd restart 重启xinetd服务</p><blockquote><p>基于xinetd服务的自启动<br>chkconfig telnet on<br>ntsysv <font color="red"><br><strong>基于xinetd 服务的启动与自启动区别不明显，若关闭telnet(chkconfig telnet off)的自启动会将运行的telnet一并关闭，配置文件也会显示关闭状态。</strong> </font>.</p></blockquote><h2 id="源码包安装服务的启动"><a href="#源码包安装服务的启动" class="headerlink" title="源码包安装服务的启动"></a>源码包安装服务的启动</h2><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/12/E4E0pD.png)"><strong>使用绝对路径，调用启动脚本来启动。不同的源码包的启动脚本不同。可以查看源码包的安装说明，查看启动脚本的方法。</strong></td></tr></table>源码包服务的自启动：<br>vi /etc/rc.d/rc.local 开机自启文件，加入下面的标准启动命令<br>/usr/local/apache2/bin/apachectl start</p><blockquote><p>让源码包的apache服务能被chkconfig与ntsysv命令管理自启动<br>vi /etc/init.d/apache<br># chkconfig: 35 86 76<br>指定httpd脚本可以被chkconfig命令管理。格式是:<code>chkconfig: 运行级别 启动顺序 关闭顺序</code><br>#descriptaion:source package apache 说明，内容随意</p></blockquote><p><em>启动顺序和关闭顺序不能和系统中现有服务的启动关闭顺序一样</em>在<code>/etc/rc.d/</code>可以看到各个启动级别的服务启动关闭文件。例<code>/etc/rc.d/rc3.d</code>里面的文件S01表示依次启动，K01表示依次关闭。不能存在一样的启动关闭级别。</p><h2 id="服务的总结："><a href="#服务的总结：" class="headerlink" title="服务的总结："></a>服务的总结：</h2><p><a href="http://naotu.baidu.com/file/5bf31d7a9584e16965e0bcb733ccea11?token=096d51a20e782b04" target="_blank"><img src="https://s2.ax1x.com/2019/05/12/E4VZge.png" alt="iwAR3T.jpg" title="请点击图片"></a></p><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/12/E4A7FK.png)"><font color="#008B8B">进程是正在执行的一个程序或命令，每一个进程都是一个运行的实体，都有自己的地址空间，并占用一定的系统资源</font></td></tr></table>.</p><style type="text/css"> body{background-image:url(https://ws1.sinaimg.cn/large/005RRiqRly1fvyygdfzt6j31hc0u0138.jpg);background-position:center;           background-repeat:repeat-y；}</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;FZShuTi&quot;&gt;Linux 文档&lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="Document" scheme="http://yoursite.com/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>one</title>
    <link href="http://yoursite.com/2018/08/28/%E9%A9%AC%E5%93%A5%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/08/28/马哥笔记/</id>
    <published>2018-08-28T09:28:03.000Z</published>
    <updated>2019-08-31T15:57:41.934Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="FZShuTi">linux 培训的笔记 </font></center><br><a id="more"></a></p><h1 id="命令积累"><a href="#命令积累" class="headerlink" title="命令积累"></a>命令积累</h1><p><code>lscpu 查看cpu信息</code>     <code>lsblk （列出块设备）命令用于列出所有可用块设备的信息</code><br><code>sosreport 收集日志</code>　　<code>查看内存：cat /proc/meminfo</code><br><code>partorobe 新分区不用重启的识别命令。刷新硬盘分区表 centos7</code><br><code>partx -a centos6 -a对于增加硬盘的选项</code><br><code>partx -d --nr 6 /dev/sda 对于删除分区后，刷新硬盘的选项</code><br>centos7查看服务是否开机启动:<code>systemctl is-enabled sshd</code><br>查看指定服务的状态: <code>systemctl status sshd</code></p><p>用户的UID大于500的都是非系统账号，500以下的都为系统保留的账号</p><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><pre><code>0    01    110    2    11    3100    4    101    5    110 6    111 71000 8(2^3)10000 16(2^4)100000    32(2^5)1000000    64(2^6)10000000 128(2^7)</code></pre><p>2^0=1 2^1=2 2^2=4 2^3=8 16 32 64 128<br>例：97(十进制)=64+32+1=1000000+100000+1=1100001。<br>例：10101010(二进制)=128+32+8+2=170。<br>1Gbps：每秒传输1g的位。1Gbit/second<br>1Byte=8bit</p><h1 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h1><p>建立带-的文件:<br>touch -- -a<br>touch ./-b</p><h1 id="DAS-NAS-SAM"><a href="#DAS-NAS-SAM" class="headerlink" title="DAS NAS SAM"></a>DAS NAS SAM</h1><p>　　　　　　　　　　　　　存储基础知识—存储网络</p><table><thead><tr><th></th><th style="text-align:center">DAS</th><th>NAS</th><th>SAM</th></tr></thead><tbody><tr><td>传输类型</td><td style="text-align:center">SCSI、FC</td><td>IP</td><td>IP、FC、SAS</td></tr><tr><td>数据类型</td><td style="text-align:center">数据块</td><td>文件</td><td>数据块</td></tr><tr><td>典型应用</td><td style="text-align:center">任何</td><td>文件服务器</td><td>数据库应用</td></tr><tr><td>优点</td><td style="text-align:center">磁盘与服务器分离，便于统一管理</td><td>不占用应用服务器资源</td><td>高扩展性，高可用性，数据集中，易管理</td></tr><tr><td>缺点</td><td style="text-align:center">连接距离短，数据分散，共享困难，存储空间利用率不高，扩展性有限</td><td>不适合存储大量的块级应用，数据备份已恢复占用网络带宽</td><td>相比NAS成本较高，安装和升级比NAS复杂</td></tr></tbody></table><h1 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h1><p>分区分配一个目录名mount point,名为挂载<br>分区：MBR,GPT<br>主：一个硬盘最多有四个，只有一个是活动，1-4<br>扩展：最多一个，划分更小的分区，扩展+主分区&lt;=4 1-4<br>逻辑分区：5,6  </p><h1 id="运行模式："><a href="#运行模式：" class="headerlink" title="运行模式："></a>运行模式：</h1><p><code>runlevel</code><br><code>3 5</code>.3表示前一次的运行级别，5表示现在的运行级别<br>N:表示前一次没有运行级别 。<br>init 3：切换到3级别，init要登录<br>startx:切换到？级别，startx不需要登录<br>5：字符界面  0：关机  6：重启  </p><h1 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h1><p><code>tty</code>显示终端号<br>chvt 2:表示ctrl+Alt+F2切换到的界面 </p><h1 id="centos7启动网络"><a href="#centos7启动网络" class="headerlink" title="centos7启动网络"></a>centos7启动网络</h1><p>启动网络：<code>nmcli connection modify ens33 connection.autoconnect yes</code><br>id -u:当前用户的UID，root为0，非0为普通用户。</p><h1 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h1><p><code>cat /etc/centos-release</code>  <code>lsb_release -a</code></p><h1 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h1><p>查看：<code>echo $PS1</code><br>更改：<code>PS1=&quot;\[\e[1;33m\][\u@\h \w \!]\\$\[\e[0m\]&quot;</code><br>命令提示符:prompt <font color="red"><br>#</font> :管理员 <font color="red"><br>$</font> :普通用户<br>显示提示符格式：<code>echo $PS1</code><br>修改提示符格式：<code>PS1=&quot;\e[1;33m\[[\u@\h \W]\\$\\e[0m&quot;</code><br><code>PS1=&#39;\e[1;33m[\u@\h \w]\$ &#39;</code> <font color="red"><br>\e \033</font>　<font color="red"> \u</font> 当前用户  <font color="red"><br>\h </font>主机名称　<font color="red"> \H</font> 主机名   　　<font color="red"><br>\w</font> 当前工作目录　<font color="red">\W</font> 当前工作目录最后目录名     <font color="red"><br>\t</font> 24小时时间格式　<font color="red">\T</font> 12小时时间格式  <font color="red"><br>\！</font>命令历史数　 　　<font color="red">\#</font> 开机后命令历史数<br><code>cat ~/.bashrc</code> 命令提示符当前用户修改路径<br><code>echo -e &quot;\033[5;41;33m文字文字\033[0m&quot;</code> 闪烁+颜色</p><h1 id="虚拟机取消密码进入"><a href="#虚拟机取消密码进入" class="headerlink" title="虚拟机取消密码进入"></a>虚拟机取消密码进入</h1><pre><code>vim /etc/gdm/custom.conf    AutomaticLoginEnable=true  AutomaticLogin=root  </code></pre><h1 id="查看命令类型"><a href="#查看命令类型" class="headerlink" title="查看命令类型"></a>查看命令类型</h1><p><code>type pwd</code>:显示命令的类型外部命令或者内部命令 <font color="red"><br>-a </font>:显示所有的内部命令后外部命令的列表<br><img src="https://s2.ax1x.com/2019/03/23/AGyo9S.png" alt=""></p><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/04/28/EQWP0S.gif);"><font color="#F0FFFF"><font face="KaiTi"><font size="5">执行命令<br>输入命令后回车:提请shell程序找到键入命令所对应的可执行程序或代码，并由其分析后提交给内核分配资源将其运行起来。<br>在shell中可执行的命令有两类<br>1.内部命令：由shell自带的，而且通过某种命令形式提供　　<br>help内部命令列表<br>enable cmd 启动内部命令<br>enable -n cmd 禁用内部命令<br>enable -n 查看所有禁用的内部命令<br>2.外部命令：在文件系统路径下有对应的可执行程序文件<br>查看路径：which -a |–skip-alias; whereis<br>3.区别指定的命令是内部或外部命令<br>type COMMAND<br>whereis:查看外部命令路径和他的配置文件文档路径<br></font></font></font></td></tr></table></p><h1 id="命令执行路径"><a href="#命令执行路径" class="headerlink" title="命令执行路径"></a>命令执行路径</h1><p><font color="red">alias –内部 –hash表(记录外部命令的路劲) –$PATH –命令找不到 </font><br>Hash缓存表    <table><tr><td bgcolor="#FF8DC"><font size="4">系统初始hash表为空，当外部命令执行时，默认会从PATH路径下寻找该命令，找到后会将这条命令的路径记录到hash表中，当再次使用该命令时，shell解释器首先会查看hash表，存在将执行之，如果不存在，将会去PATH路径下寻找，利用hash缓存表可大大提高命令的调用率。</font></td></tr></table> hash常见用法 <font color="red">　hash</font> 显示hash缓存    <font color="red">　<br>hash -l</font> 显示hash缓存，可作为输入使用  <font color="red">　<br>hash -p path name</font> 将命令全路径path起别名为name  <font color="red">　<br>hash -t name</font> 打印缓存中name的路径  <font color="red">　<br>hash -d name</font> 清除name缓存  <font color="red">　<br>hash -r</font> 清除缓存</p><h1 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h1><p><table><tr><td bgcolor="20b2aa"><font size="4">显示当前shell进程所有可用的命令别名<br><code>alias</code><br>定义别名NAME，其相当于执行命令VALUE<br><code>alias NAME=&#39;VALUE&#39;</code><br>在命令行中定义的别名，仅对当前shell进程有效<br>如果想要永久有效，要定义在配置文件中<br>　仅对当前用户：<font color="blue"> ~/.bashrc </font>　<br>　对所有用户有效：<font color="blue"> /etc/bashrc </font>　　<br>写入文件后，文件存储在磁盘上没有生效，必须让他在内存中才会生效，使用命令<code>source.bashrc</code><br>删除别名<font color="red">(指在内存中删除)</font>：<code>unalias 别名</code><br>编辑配置给出的新配置不会立即生效<br>bash进程重新读取配置文件</font></td></tr></table>.</p><pre><code>source /path/to/config_file./path/to/config_file</code></pre><p>撤销别名: unalias [name]  <font color="red"><br>-a</font>取消所有别名<br>如果别名同原命令同名，如果要执行原命令，可使用</p><pre><code>\ALIASNAME&quot;ALIASNAME&quot;&#39;ALIASNAME&#39;command ALIASNAME/path/command 针对外部命令</code></pre><p>.</p><h1 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h1><p>linux的两种时钟<br>系统时钟：由Linu内核通过CPU的工作频率进行的<br>硬件时钟：主板<br>相关命令:<br>date 显示和设置系统时间<br>　<code>date +%s</code><br>　date -d @1509536033<br>hwclock,clock:显示硬件时钟<br>-s,–hctosys 以硬件时钟为准，校正系统时钟<br>-w,–systohc 以系统时钟为准，校正硬件时钟<br>时区：/etc/localtime<br>显示日历：<code>cal</code></p><p><font color="red"><br>显示前一天的时间 <code>date -d &#39;-1 day&#39; +%F-%H</code><br>显示两天前的时间 <code>date -d &#39;-2 days ago&#39;</code><br>显示3月零1天以后的时间 <code>date -d &#39;3 months 1 days&#39;</code><br>显示12月25日在当年的哪一天 <code>date -d &#39;25 Dec&#39; +%j</code></font>.<br>月日小时分年.秒 <code>date 061816432019.00</code></p><h1 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h1><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/04/20/E9zkw9.jpg)"><font color="#F0FFFF"><font face="微软雅黑"><li class="b">用户登录信息查看命令:<br><code>whoami</code> :显示当前登录有效用户<br><code>who</code> :系统当前所有的登录会话<br><code>w</code> :系统当前所有的登录会话及所做的操作<br></li></font></font></td></tr></table>.</p><h1 id="远程协助：screen"><a href="#远程协助：screen" class="headerlink" title="远程协助：screen"></a>远程协助：screen</h1><p><font size="5">  <li class="g">screen 命令：</li><li class="while">创建新screen会话</li><li class="while">　　<font color="red">screen -S [SESSION]</font></li><li class="while">加入screen会话</li><li class="while">　　<font color="red">screen -x [SESSION]</font></li><li class="while">退出并关闭screen会话</li><li class="while">　　<font color="red">exit</font></li><li class="while">剥离当前screen会话</li><li class="while">　　<font color="red">Ctrl+a,d</font></li><li class="while">显示所有已经打开的screen会话</li><li class="while">　　<font color="red">screen -ls</font></li><li class="while">恢复screen会话</li><li class="while">　　<font color="red">screen -r [SESSION]</font>.</li></font></p><h1 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h1><p><table><tr><td bgcolor="ff66cc"><font size="4">linux中换行表示：移动到下一行</font></td></tr></table><table><tr><td bgcolor="ff66cc"><font size="4">回车：光标移动到行首</font></td></tr></table>说明：echo会将输入的字符送往输出。输出的字符串间以空白字符隔开，并在最后加上换行号。<font color="red"><br>-E :(默认)不支持\解释功能</font>  <font color="red"><br>-n :不自动换行  </font><font color="red"><br>-e :启用\字符的解释功能</font> <li class="a">显示变量：<br><code>echo &quot;$VAR_NAME&quot;</code> 变量会替换，弱引用  单双引号的区别<br><code>echo &#39;$VAR_NAME&#39;</code><br> 变量会替换，强引用反引号里面可执行命令（可用$(命令)代替）<font color="red"><font size="6">``</font> <font color="blue"><br> ls -l `echo $SHELL` 得到的是/bin/bash 文件的详细信息</font></font></li></p><p><table><tr><td bgcolor="#778899"> <font color="black">  启用命令选项：-e,若字符串中出现以下字符，则特别加以处理，而不会将他当成一般文字输出<br>\a :发出警告声<br>\b :退格键<br>\c :最后不加上换行符号<br>\n :换行且光标移动至行首<br>\r :回车，即光标移动至行首，但不换行<br>\t :插入Tab字符<br>\ :插入\字符<br>\0nnn :插入nnn(八进制)所代表的ASCII字符<br> <code>echo -e &#39;\033[43;31;5mmagedu\033[0m&#39;</code><br>\xHH插入HH(十六进制)所代表的ASCII数字(man 7 ascii)</font></td></tr></table></p><h1 id="hexdump"><a href="#hexdump" class="headerlink" title="hexdump"></a>hexdump</h1><p>查看”二进制”文件的十六进制编码</p><pre><code>    [root@centos7localdomain ~]# hexdump -C a    00000000  31 0a                                             |1. |    00000002    [root@centos7localdomain ~]# hexdump -C a    00000000  31 32 0a 33 0a 61 0a                              |12.3.a. |     00000007</code></pre><p>查看文件a的十六进制和ASCII码。<br>偏移量；十六进制；ASCII码；　　　　原始数据 （最后有空格）<br>文件原始数据每行一个数。</p><h1 id="Centos7设置语言"><a href="#Centos7设置语言" class="headerlink" title="Centos7设置语言"></a>Centos7设置语言</h1><p>localectl list-locales查看语言列表<br>localectl set-locale LANG=en_US.utf8 修改<br>修改后要注销再登录<br><code>cat /etc/locale.conf</code></p><h1 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h1><p>命令行扩展，被括起来的集合<li class="d">命令行扩展: $()或``<br>把一个命令的输出打印给另一个命令的参数</li></p><pre><code>echo &quot;This system&#39;s name is $(hostname)&quot;This system&#39;s name is server1.example.com  echo &quot;i am `whoami`&quot;i am root</code></pre><p><li class="d">括号扩展:{}<br>打印重复字符串的简化形式<font color="blue"><br>echo file{1,3,5} 结果为: file1 file3 file5<br>rm -fr file{1,3,5}<br>echo {1..10}<br>echo {a..z}</font>.</li></p><h1 id="whatis"><a href="#whatis" class="headerlink" title="whatis"></a>whatis</h1><p>centos6生成whatis数据库:<code>makewhatis</code><br>Centos7: <code>mandb</code><br>whatis:<br>显示命令的简短叙述;<br>使用数据库;<br>刚安装后不可立即使用<br>makewhatis | mandb 制作数据库<br>使用示例: <code>whatis cal 或 man -f cal</code></p><h1 id="history"><a href="#history" class="headerlink" title="history"></a>history</h1><p><table><tr><td bgcolor="778899"><font size="4"> 重复前一个命令使用上方向键，并且执行<br>　按!!并回车执行<br>　输入!-1执行倒数第一个命令<br>　按Ctrl+p 并回车执行<br>!:0 执行前一条命令(去除参数)<br>Ctrl+n 显示当前历史中的下一条命令，但不执行<br>Ctrl+j 执行当前密令<br>!n 执行history命令输出对应序号n的命令<br>!-n 执行history历史中倒数的第n个命令</font></td></tr></table><table><tr><td bgcolor="778899"><font size="4">!string 重复前一个以”string”开头的命令<br>!?string 重复前一个包含string的命令<br>!string:p 仅打印命令历史，而不执行<br>!$:p 打印输出!$(上一条命令的最后一个参数)的内容<br>!*:p 打印输出!*(上一条命令的所有参数)的内容<br>^string 删除上一条命令中的第一个string<br>^string1^string2 将上一条命令中的第一个string1替换为string2<br>!:g/s/string/string2 将上一条命令中所有的string1都替换为string2</font></td></tr></table> <table><tr><td bgcolor="778899"><font size="4">3. 使用up(向上)和down(向下)键上下浏览从前输入的命令<br>ctrl+r 在历史命令中搜索<br>ctrl+g 从历史搜索模式中退出<br>要重新调用前一个命令中最后一个参数：<br>!$<br>ESC,.(点击ESC键后松开，然后点击.键)<br>Alt+. (按住Alt键的同时点击.键) </font></td></tr></table> <table><tr><td bgcolor="778899"><font size="4">4. command !^ 利用上一个命令的第一个参数做cmd的参数.<br>command !$ 利用上一个命令的最后一个参数做cmd的参数<br>command !* 利用上一个命令的全部参数做cmd的参数<br>command !:n 利用上一个命令的第n个参数做cmd的参数<br>command !n:m 调用第n条命令的第m个参数<br>command !n:* 调用第n条命令的所有参数</font></td></tr></table> <font color="red">-c </font>:清空命令历史 <font color="red"><br>-d offser </font>:删除历史中指定的第offser个命令 <font color="red"><br>n </font>:显示最近的n条历史 <font color="red"><br>-a </font>:追加本次会话新执行的命令历史列表至历史文件 <font color="red"><br>-r </font>:读历史文件附加到历史列表 <font color="red"><br>-w </font>:保存历史列表到指定的历史文件 <font color="red"><br>-n </font>:读取历史文件中未读过的行到历史列表 <font color="red"><br>-p </font>:展开历史参数成多行，但不存在历史列表中 <font color="red"><br>-s </font>:展开参数成一行，附加在历史列表后 <font color="ff73b3"><br>-p:可以执行命令但不存在历史记录中。<br>-s:伪造历史，不执行命令。<br><code>HISTTIMEFORMAT=&quot;%F %T &quot;</code>历史加上时间</font>. <table><tr><td bgcolor="1e90ff"><font size="4">5.命令历史相关环境变量 <li class="h">HISTSIZE :命令历史记录的条数</li><li class="h">HISTFILE :指定历史文件，默认为~/.bash_history </li><li class="h">HISTFILESIZE :命令历史文件记录历史的条数 </li><li class="h">HISTTIMEFORMAT= “%F %T” 显示时间  </li><li class="h">HISTIGNORE= “str1:str2*……” 忽略str1命令，str2开头的历史 </li><li class="h">控制命令历史的记录方式：<br>　环境变量：HISTCONTROL<br>　　ignoredups 默认，忽略重复的命令，连续且相同为”重复”<br>　　ignorespace 忽略所有已空白开头的命令<br>　　ignoreboth 相当于ignoredups,ignorespace的组合<br>　　erasedups 删除重复命令<br>export 变量名=”值”<br>存放在 /etc/profile 或 ~/.bash_profile</li></font></td></tr></table>.</p><h1 id="man"><a href="#man" class="headerlink" title="man"></a>man</h1><p>查看man手册页<br>　　man [章节] keyword<br>列出所有帮助<br>　　man -a keyword<br>搜索man手册<br>　　man -k keyword 列出所有匹配的页面<br>相当于whatis 数据库<br>　　man -f keyword<br>打印man帮助文件的路径<br>　　man -w [章节] keyword</p><h2 id="man-命令的操作方法：使用less-命令实现"><a href="#man-命令的操作方法：使用less-命令实现" class="headerlink" title="man 命令的操作方法：使用less 命令实现"></a>man 命令的操作方法：使用less 命令实现</h2><p>待续写</p><h2 id="man搜索"><a href="#man搜索" class="headerlink" title="man搜索"></a>man搜索</h2><p>待续写</p><h1 id="bash-的快捷键"><a href="#bash-的快捷键" class="headerlink" title="bash 的快捷键"></a>bash 的快捷键</h1><p>Ctrl + l    清屏，相当于clear命令<br>Ctrl + o   执行当前命令，并重新显示本命令<br>Ctrl + s   阻止屏幕输出，锁定<br>Ctrl + q   允许屏幕输出<br>Ctrl + c   终止命令<br>Ctrl + z   挂起命令</p><h1 id="基名，目录名"><a href="#基名，目录名" class="headerlink" title="基名，目录名"></a>基名，目录名</h1><p><code>basename</code> :取文件基名<br><code>dirname</code> :取文件目录名</p><h1 id="centos6自动挂载"><a href="#centos6自动挂载" class="headerlink" title="centos6自动挂载"></a>centos6自动挂载</h1><p><code>cd /misc/cd</code> 目录磁盘会自动挂载</p><h1 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h1><p><code>*</code> 匹配零个或多个字符<br><code>?</code> 匹配任何单个字符<br><code>~</code> 当前用户家目录 <code>~mage</code> 用户mage家目录<br><code>~+</code> 当前工作目录<br><code>~-</code> 前一个工作目录<br><code>[0-9]</code> 匹配数字范围 <code>[a-z]</code>:字母　　<code>[A-Z]</code>:字母　　<code>[wang]</code>匹配列表中的任何的一个字符<br><code>[^wang]</code> 匹配列表中的所有字符以外的字符<br><code>ls 1[a-z].txt</code>:不会显示出小写字母到大写字母的文件，他会以小写大写的顺序排列出来<br>预定义的字符类：man 7 glob <div class="alert alert-success"><i class=""></i>[:digit:] :任意数字，相当于0-9<br>[:lower:] :任意小写字母<br>[:upper:] :任意大写字母<br>[:alpha:] :任意大小写字母<br>[:alnum:] :任意数字或字母<br>[:blank:] :水平空白字符<br>[:space:] :水平或垂直空白字符<br>[:punct:] :标点符号<br>[:print:] :可打印字符<br>[:cntrl:] :控制(非打印)字符<br>[:graph:] :图形字符<br>[:xdigit:] :十六进制字符</div><br><code>ls .[^.]*</code>显示当前目录下的隐藏目录<br><code>ls -d .*</code><br><code>ls -l &quot;[^.]*&quot; -a</code>　　三种显示方式</p><h1 id="atime-mtime-ctime"><a href="#atime-mtime-ctime" class="headerlink" title="atime mtime ctime"></a>atime mtime ctime</h1><p>touch命令<br>-a 仅改变 atime和ctime<br>-m 仅改变 mtime和ctime<br>-t [[CC]YY]MMDDhhmm[.ss] <code>touch -t 201802062036.18 linuxidc.txt</code><br>　指定atime和mtime的时间戳<br>-c 如果文件不存在，则不予创建, 如果文件存在，touch将更新访问时间</p><h1 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h1><p><code>cp -r</code>递归<br><code>cp /etc/passwd ./a --backup</code>将文件cp到a文件夹并备份<br>-d:保留链接属性<br>-a:归档，相当于-d,-p,-r<br>-v:显示复制过程<br>-p:此时cp除复制源文件的内容外，还将把其修改时间和访问权限也复制到新文件中<br>-u:两个同样的文件覆盖时，只复制新的到旧的上去。<br>-f:复制已经存在的目标文时件不提示<br>-i:询问，如果目标文件已经存在，则会询问是否覆盖<br>-l:把目标文件建立为源文件的硬链接文件，而不是复制源文件；<br>-b:覆盖前，目标存在先备份<br><code>cp /etc/passwd ./a1 --backup=numbered</code><br>例：cp -av /etc/ app/back <code>date +%F</code>    :/etc/目录下所有文件，备份到/app独立的子目录下，要求子目录格式为backYYY-mm-dd,备份过程可见。</p><h1 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h1><p><fon color="red">-b</fon>: 如果有相同的文件，覆盖前先备份。 <font color="red"><br>-t</font>移动文件路径和目标路径颠倒  <code>alias rm=&#39;mv -t /data&#39;</code></p><h1 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h1><p>rename 原字符串  目标字符串  文件(列表)<br>原字符串：将文件名需要替换的字符串；<br>目标字符串：将文件名中含有的原字符替换成目标字符串；<br>文件：指定要改变文件名的文件列表。<br>将main1.c重命名为main.c  <code>rename main1.c main.c main1.c</code><br>rename支持通配符<br><code>?</code>  可替代单个字符<br><code>*</code>  可替代多个字符<br><code>[charset]</code> 可替代charset集中的任意单个字符<br>举例：文件夹中有这些文件foo1, …, foo9, foo10, …, foo278<br><code>rename foo foo0 foo?</code><br>该命令会把foo1到foo9的文件重命名为foo01到foo09，重命名的文件只是有4个字符长度名称的文件，文件名中的foo被替换为foo0。<div class="alert alert-success"><br>rename支持正则表达式<br>现在以一个具体的例子讲解该命令中正则表达式的使用：<br>今天下午我手中的数据（图片）命名是(1).jpg、(2).jpg……到(16720).jpg。<br>现在我想要把文件名改为00001.png、00002.png、…….16720.png<br>第一步：将后缀名.jpg改成.png <code>rename &#39;s/\.jpg$/\.png/&#39; *.jpg</code><br>第二步：讲左括号”(“去掉：<code>rename &#39;s/^\(//&#39; *.png</code><br>第三步，将右括号“）”去掉：<code>rename &#39;s/\)//&#39; *.png</code><br>第四步：将文件名字改成五位数，不足五位数的前面补0即可。创建脚本a.sh完成，脚本内容如下：</div></p><pre><code>#！/bin/bash　　　上面三部后的结果：1.pngfor i in {1..9}do    mv $i.png  0000$i.pngdonefor i in {10..99}do    mv $i.png  000$i.pngdonefor i in {100..999}do    mv $i.png  00$i.pngdonefor i in {1000..9999}do    mv $i.png  0$i.pngdone</code></pre><p></p><p>rename支持正则表达式:<br><code>rename &quot;s/AA/aa/&quot;</code>  //把文件名中的AA替换成aa<br>修改文件的后缀 <code>rename &quot;s//.html//.php/&quot;</code>  //把.html 后缀的改成 .php后缀<br>批量添加文件后缀 <code>rename &quot;s/$//.txt/&quot;</code>  //把所有的文件名都以txt结尾<br>批量删除文件名 <code>rename &quot;s//.txt//&quot;</code>  //把所有以.txt结尾的文件名的.txt删掉<br>如我们想把文件扩展名为.bak 的文件扩展名去掉，可以这样 <code>rename &#39;s/.bak$//&#39; \*.bak</code>*.bak 为通配符(wildcard)，会被shell展开为各个文件名 </p><pre><code>    去除文件名中的空格  rename &#39;s/ //g&#39;    g 是global的意思，替换所有的空格为空字符（也就是删除啦）     文件名转为小写:  rename &#39;y/A-Z/a-z/&#39;</code></pre><h1 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h1><p><i class="fa fa-tree fa-2x"></i>显示目录树 <font color="red"><br> -d</font> :只显示目录 <font color="red"><br> -L level</font> :指定显示的层级数目 <font color="red"><br> -P pattern</font> :只显示由指定pattern匹配到的路径<code>tree -P /etc/rc*</code></p><h1 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h1><p><i class="fa fa-folder fa-x"></i>创建目录 <font color="red"><br>-p</font> :存在于不报错，且可自动创建所需的各目录 <font color="red"><br>-v</font> :显示详细信息 <font color="red"><br>-m MODE</font> :创建目录时直接指定权限</p><h1 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h1><p>删除空目录 <font color="red"><br>-p</font> :递归删除父目录(rmdir -p:从下往上删除，从深往浅删除) <font color="red"><br>-v</font> :显示详细信息<br><span id="inline-green">rm -r :递归删除目录树 </span></p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i> 例：<br>1.创建/testdir/dir1/x,/testdir/dir1/y,/testdir/dir1/x/a,/testdir/dir1/x/b,/testdir/dir1/y/a,/testdir/dir1/y/b<br><code>mkdir -p ./testdir/dir1/{x,y}/{a,b}</code><br>2.创建/testdir/dir2/x,/testdir/dir2/y,/testdir/dir2/x/a,testdir/dir2/x/b<br><code>mkdir -p testdir/dir2{x/{a,b},y}</code><br>3.创建/testdir/dir3,/testdir/dir4,/testdir/dir5,/testdir/dir5/dir6,testdir/dir5/dir7<br><code>mkdir -p ./testdir/dir{3,4,5/dir{6,7}}</code><br></div><h1 id="inode"><a href="#inode" class="headerlink" title="inode"></a>inode</h1><p>索引节点:inode(index node)表中包含文件系统所有文件列表<br>一个节点(索引节点)是在一个表项，包含有关文件的信息(元数据),包括：<br>　文件类型,权限,UID,GID<br>　链接数(指向这个文件名路径名称个数)<br>　该文件的大小和不同的时间戳<br>　指向磁盘上文件的数据块指针<br>　有关文件的其他数据</p><h1 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h1><div class="note warning"><p>创建硬链接会增加额外的记录项以引用文件<br>对应于同一文件系统上一个物理文件<br>每个目录引用相同的inode号<br>创建时链接数递增<br>删除文件时：<br>rm命令递减计数的链接<br>文件要存在，至少有一个链接数<br>当链接数为零时，该文件被删除<br>不能跨越驱动器或分区<br>同一个文件的不同名字，改动其中一个文件，另外一个有相同的变化。<br>语法:<code>ln filename</code><br></p></div><p>目录不支持硬链接，他前面的数字表示链接的次数是指目录下的隐藏文件夹，.和..</p><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p><div class="note primary"><p>一个符号链接指向另一个文件<br><code>ls -l</code>的 显示链接的名称和引用的文件<br>一个符号链接的内容是它引用文件的名称<br>可以对目录进行<br>可以跨分区<br>指向的是另一个文件的路径；其大小为指向的路径字符串的长度；不增加或减少目标文件inode的引用计数；<br>语法：<code>ln -s filename</code>  </p></div><br>软链接大小是指向的路径大小<br>这里的相对路径: <code>ln -s ../../../data/a.txt /d1/d2/d3/a-link</code> 写法要注意，这里就是我现在在d3要去找到data，那么就是先回到根目录，然后去data目录下。简单说就是我现在在d3目录利用相对路径去找到data。</p><h1 id="file"><a href="#file" class="headerlink" title="file"></a>file</h1><p>文件可以包含多种类型的数据。检查文件的类型，然后确定适当的打开命令或应用程序使用<br>file [options] &lt;\filename&gt;… <font color="red"><br>-b</font> 列出文件辨识结果时，不显示文件名称<font color="red"><br>-f</font> filelist 列出文件filelist中文件名的文件类型<font color="red"><br>-F</font> 使用指定分隔符号替换输出文件名后默认的”:”分隔符<font color="red"><br>-L</font> 查看对应软链接对应文件的文件类型</p><h1 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h1><p>-c:取反<br>-s:压缩重复字符</p><pre><code>[root@centos7 data]# tr &#39;a-z&#39; &#39;A-Z&#39;dfsjfidshijfidsijifjdisjidishifjDFSJFIDSHIJFIDSIJIFJDISJIDISHIFJjdihsifjdisjfiiehuHIHIJJDIHSIFJDISJFIIEHUHIHIJ[root@centos7 data]#[root@centos7 data]# tr -t &quot;a-d&quot; &quot;1-3&quot; 　　a-d对应1-3进行替换fdjfregfdjfregaaaaaasdfdsadfgh111111sdfds1dfghabcfg123fg</code></pre><pre><code>[root@centos7 data]#[root@centos7 data]# tr -d &#39;0-9&#39;dsgds546y7ujyr564wef5dsgdsyujyrwef[root@centos7 data]#</code></pre><pre><code>[root@centos7 data]# tr -dc &#39;0-9&#39; dsgrere54545tg653r455454565345[root@centos7 data]#  [root@centos7 data]# tr -s &#39;dfg&#39;ddfsggvffcddddfsgvfcd</code></pre><p><img src="https://s2.ax1x.com/2019/04/03/AcrCrj.png" alt=""></p><h1 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h1><p>管理员：root, 0<br>普通用户：1-60000 自动分配<br>系统用户：1-499, 1-999 （CentOS7）<br>对守护进程获取资源进行权限分配登录用户：500+, 1000+（CentOS7）</p><h2 id="Linux安全上下文"><a href="#Linux安全上下文" class="headerlink" title="Linux安全上下文"></a>Linux安全上下文</h2><p>运行中的程序：进程 (process) 以进程发起者的身份运行：<br>root: /bin/cat<br>mage: /bin/cat<br>进程所能够访问资源的权限取决于进程的运行者的身份</p><h2 id="组"><a href="#组" class="headerlink" title="组"></a>组</h2><p>Linux组：Groupname/GID<br>管理员组：root, 0<br>普通组：<br>　系统组：1-499, 1-999（CENTOS7）<br>　普通组：500+, 1000+（CENTOS7）</p><p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i> Linux组的类别:<br>用户的主要组(primary group)<br>用户必须属于一个且只有一个主组<br>组名同用户名，且仅包含一个用户，私有组<br>用户的附加组(supplementary group)<br>一个用户可以属于零个或多个辅助组</div>.</p><h2 id="用户和组的配置文件"><a href="#用户和组的配置文件" class="headerlink" title="用户和组的配置文件"></a>用户和组的配置文件</h2><p><div class="alert alert-danger"><i class="fa fa-bug"></i> Linux用户和组的主要配置文件：<br>/etc/passwd：用户及其属性信息(名称、UID、主组ID等）<br>/etc/group：组及其属性信息<br>/etc/shadow：用户密码及其相关属性<br>/etc/gshadow：组密码及其相关属性 </div>.</p><h2 id="passwd-文件格式"><a href="#passwd-文件格式" class="headerlink" title="passwd 文件格式"></a>passwd 文件格式</h2><p>login name：登录用名（wang）<br>passwd：密码 (x)<br>UID：用户身份编号 (1000)<br>GID：登录默认所在组编号 (1000)<br>GECOS：用户全名或注释<br>home directory：用户主目录 (/home/wang)<br>shell：用户默认使用shell (/bin/bash)</p><h2 id="shadow文件格式"><a href="#shadow文件格式" class="headerlink" title="shadow文件格式"></a>shadow文件格式</h2><p>登录用名<br>用户密码:一般用sha512加密<br>从1970年1月1日起到密码最近一次被更改的时间<br>密码再过几天可以被变更（0表示随时可被变更）<br>密码再过几天必须被变更（99999表示永不过期）<br>密码过期前几天系统提醒用户（默认为一周）<br>密码过期几天后帐号会被锁定<br>从1970年1月1日算起，多少天后帐号失效</p><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><pre><code>groupmems -a p2 -g p1:将用户p2加入p1组   groupmems -d p2 -g p1:将用户p2从p1组删除   [root@centos7 ~]# getent group p1  p1:x:1001:p2  [root@centos7 ~]# getent group p2  p2:x:1002:  [root@centos7 ~]#newgrp p1：将当前用户的主组临时修改为p1,要求当前用户必须在p1组。</code></pre><p>vipw == vi /etc/passwd<br>vigr == vi /etc/grow<br>useradd<br>-o:忽略id的唯一性检查<br>-r:建立系统用户，他默认不会创建家目录<br>-s:指定shell类型<br>-c:描述<br>groups x:查看用户x属于那些组<br>-N：不要创建以用户名称为名的群组(默认加组users)<br>新建用户默认属性文件： </p><h1 id="id"><a href="#id" class="headerlink" title="id"></a>id</h1><p>-g或–group 　 显示用户所属群组的ID。<br>-G或–groups   显示用户所属附加群组的ID。<br>-n或–name 　  显示用户，所属群组或附加群组的名称。<br>-r或–real 　  显示实际ID。<br>-u或–user 　  显示用户ID。<br>-help 　       显示帮助。<br>-version 　    显示版本信息<br><code>[root@localhost ~]# id</code><br><code>uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)</code><br>用户root的UID号码 = 0，GID号码 = 0。用户root是下面组的成员：<br>root组GID号是：0<br>bin组GID号是：1<br>daemon组GID号是：2<br>sys组GID号是：3<br>adm组GID号是：4<br>disk组GID号是：6<br>wheel组GID号是：10</p><h1 id="su"><a href="#su" class="headerlink" title="su"></a>su</h1><p>切换用户或以其他用户身份执行命令<br>su [options…] [-] [user [args…]]<br>切换用户的方式：<br>su UserName：非登录式切换，即不会读取目标用户的配置文件，不改变当前工作目录<br>su - UserName：登录式切换，会读取目标用户的配置文件，切换至家目录，完全切换<br>root su至其他用户无须密码；非root用户切换时需要密码<br>换个身份执行命令：<br>su [-] UserName -c ‘COMMAND’<br>选项：-l –login<br>su -l UserName 相当于 su - UserName<br><code>su - pan -c &#39;ls&#39; 到用户pan执行命令ls再退回</code></p><h1 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h1><p><font color="red"><br>-d</font>：删除指定用户密码 <font color="red"><br>-l</font>：锁定指定用户 <font color="red"><br>-u</font>：解锁指定用户 <font color="red"><br>-e</font>：强制用户下次登录修改密码 <font color="red"><br>-f</font>：强制操作 <font color="red"><br>-n</font> mindays：指定最短使用期限 <font color="red"><br>-x</font> maxdays：最大使用期限 <font color="red"><br>-w</font> warndays：提前多少天开始警告 <font color="red"><br>-i</font> inactivedays：非活动期限<br>–stdin：从标准输入接收用户密码<br>echo “PASSWORD” | passwd –stdin USERNAME</p><h1 id="chage"><a href="#chage" class="headerlink" title="chage"></a>chage</h1><p>修改用户密码状态chage<br>chage [选项] 用户名   <font color="red"><br>-l</font>:列出用户的详细密码状态  <strong><font color="red"><br>-d 日期:修改密码最后一次更改日期(shadow3字段)</font></strong>  <font color="red"><br>-m 天数</font>:两次密码修改间隔(4字段)  <font color="red"><br>-M 天数</font>:密码有效期(5字段)  <font color="red"><br>-W 天数</font>:密码过期前警告天数(7字段)  <font color="red"><br>-I 天数</font>:密码过后宽限天数(7字段)  <font color="red"><br>-E 日期</font>:账号失效时间(8字段)<br><code>chage -d 0 username</code><center><font size="2">这个命令其实是把密码修改日期归0了(shadow第3字段)，这样用户只要一登录就要修改密码。第三字段是指密码最后一次修改时间的日期。1970年1月1号到现在修改密码的时间戳。如果第3字段改为0，系统会认为用户没有修改过操作密码，那么当此用户一旦登录系统就会提示要修改密码，才可正常使用。</font></center>.</p><h1 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h1><p>修改和删除组<br>组属性修改：groupmod groupmod [OPTION]… group<br>-n group_name: 新名字<br>-g GID: 新的GID<br>组删除：groupdel<br>groupdel GROUP<br><code>groupmod -n p1(新名字) pan</code><br><code>groupmod -g 1004 p1</code></p><h1 id="gpasswd"><a href="#gpasswd" class="headerlink" title="gpasswd"></a>gpasswd</h1><p>更改组密码<br>组密码：gpasswd<br>gpasswd [OPTION] GROUP<br>-a user 将user添加至指定组中<br>-d user 从指定组中移除用户user<br>-A user1,user2,… 设置有管理权限的用户列表<br>newgrp命令：临时切换主组<br>如果用户本不属于此组，则需要组密码</p><h1 id="groupmems"><a href="#groupmems" class="headerlink" title="groupmems"></a>groupmems</h1><p>groupmems [options] [action] options：<br>-g, –group groupname 更改为指定组 (只有root) Actions:<br>-a, –add username 指定用户加入组 -d, –delete username 从组中删除用户<br>-p, –purge    从组中清除所有成员<br>-l, –list    显示组成员列表<br>groups [OPTION].[USERNAME]… 查看用户所属组列表</p><pre><code>groupmems -g admins -a zhu------将zhu用户添加到admins组中  groupmems -g admins -l  ------------查看admins组中的用户列表  groupmems -g admins -d ma-------将ma从admins组中删除  groupmems -g admins -p------------清空admins组中的所有组成员 </code></pre><h1 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h1><p>新建文件和目录的默认权限<br>umask值 可以用来保留在创建文件权限<br>　　新建FILE权限: 666-umask<br>如果所得结果某位存在执行（奇数）权限，则将其权限+1<br>　　新建DIR权限: 777-umask<br>　　非特权用户umask是 002<br>　　root的umask 是 022<br>　　umask: 查看<br>　　umask #: 设定<br>umask 002<br>　　umask –S 模式方式显示<br>　　umask –p 输出可被调用<br>　　全局设置： /etc/bashrc<br>　　用户设置：~/.bashrc</p><h1 id="SUID-SGID-STICKY"><a href="#SUID-SGID-STICKY" class="headerlink" title="SUID SGID STICKY"></a>SUID SGID STICKY</h1><p>suid:4 作用在二进制可执行的文件上，功能：当用户执行此文件，会继承此文件所有者的权限。<br>sgid:2 作用于二进制可执行的文件上，功能：会执行此文件所属组的权限 。 作用于目录上，功能：当用户在此目录建新文件时，此新文件的所属组继承目录的所属组。<br>stikey:1 作用于目录上，功能：对于目录的文件只能删除自己的文件。</p><h1 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a>chattr</h1><p>chattr +i 不能删除，改名，更改<br>chattr +a 只能追加内容<br>lsattr 显示特定属性</p><h1 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h1><p>访问控制列表<br>ACL：Access Control List，实现灵活的权限管理<br>除了文件的所有者，所属组和其它人，可以对更多的用户设置权限<br>CentOS7 默认创建的xfs和ext4文件系统具有ACL功能<br>CentOS7 之前版本，默认手工创建的ext4文件系统无ACL功能,需手动增加 tune2fs –o acl /dev/sdb1<br>mount –o acl /dev/sdb1  /mnt/test<br>ACL生效顺序：所有者，自定义用户，自定义组，其他人</p><p><div class="alert alert-success"><br>setfacl -R -m d:u:p1:rw text   给文件夹text设置acl权限，默认以后文件下创建的文件都会有这个权限<br>(text文件夹下所有的文件夹马上会带有acl权限。)<br>setfacl -b test     #清除所有acl<br>setfacl -x u:tank test    #清除tank用户，对test文件acl规则<br>setfcl -k test 清楚text目录下所有文件的默认acl权限(文件夹除外)<br>赋权给用户： setfacl -m u:USERNAME:MODE file<br>赋权给组： serfacl -m g:GROUPNAME:MODE file<br>[root@centos7 text]# cat a<br>u:p1:rw<br>u:p2:rw<br>setfacl -M a.txt aa   将已编辑好的acl文件a，赋给aa文件。</div><br>设置文件的ACL权限后，会有一个mask权限，他表示所有权限的上限(所有者除外)，其他用户和组的权限都要以他为最大标准。ll查看文件的基础权限组权限就是mask权限，更改组的权限相当更改mask权限。所以文件的组的权限在getfacl里面</p><pre><code>[root@centos7 text]# getfacl a# file: a# owner: root# group: rootuser::rwxuser:p1:rwx                     #effective:rw- 最大权限rwgroup::r--  基础组权限group:p1:rwx                    #effective:rw-mask::rw-other::---[root@centos7 text]# ll a  -rwxrw----+ 1 root root 41 Apr  7 12:03 a</code></pre><p><code>setfacl -m mask::rw 更改mask权限</code> 或者直接chmod更改</p><h1 id="cat-head-tail-cut"><a href="#cat-head-tail-cut" class="headerlink" title="cat,head,tail,cut"></a>cat,head,tail,cut</h1><p>文件查看<br>    文件查看命令：<br>cat，tac，rev<br>    cat [OPTION]… [FILE]…<br>-E：显示行结束符$<br>-n：对显示出的每一行进行编号<br>-A：显示所有控制符<br>-b：非空行编号<br>-s：压缩连续的空行成一行<br>    tac<br>    rev</p><h2 id="显示文本前或后行内容"><a href="#显示文本前或后行内容" class="headerlink" title="显示文本前或后行内容"></a>显示文本前或后行内容</h2><p>head [OPTION]… [FILE]…<br>-c #: 指定获取前#字节<br>-n #: 指定获取前#行<br>-#： 指定行数<br>    tail [OPTION]… [FILE]…<br>-c #: 指定获取后#字节<br>-n #: 指定获取后#行<br>-#：同上<br>-f: 跟踪显示文件fd新追加的内容,常用日志监控<br>相当于 –follow=descriptor<br>-F: 跟踪文件名，相当于–follow=name –retry<br>    tailf    类似tail –f，当文件不增长时并不访问文件</p><h2 id="按列抽取文本cut和合并文件paste"><a href="#按列抽取文本cut和合并文件paste" class="headerlink" title="按列抽取文本cut和合并文件paste"></a>按列抽取文本cut和合并文件paste</h2><p>cut [OPTION]… [FILE]…<br>-d DELIMITER: 指明分隔符，默认tab<br>-f FILEDS:<br>#:                       第 # 个 字 段 #,#[,#]：离散的多个字段，例如1,3,6 #-#：连续的多个字段, 例如1-6<br>混合使用：1-3,7<br>-c    按字符切割<br>–output-delimiter=STRING指定输出分隔符<br><code>cut -d : -f 1,3 --output-delimiter=+ /etc/passwd</code>输出分隔符为’+’</p><h1 id="cut和paste"><a href="#cut和paste" class="headerlink" title="cut和paste"></a>cut和paste</h1><p>显示文件或STDIN数据的指定列cut -d: -f1 /etc/passwd<br>cat    /etc/passwd | cut  -d:  -f7 cut -c2-5 /usr/share/dict/words<br>paste 合并两个文件同行号的列到一行<br>paste [OPTION]… [FILE]…<br>-d 分隔符：指定分隔符，默认用TAB<br>-s : 所有行合成一行显示<br>示 例 ： paste f1 f2<br>paste    -s f1 f2</p><h1 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h1><p>计数单词总数、行总数、字节总数和字符总数<br>可以对文件或STDIN中的数据运行wc story.txt<br>39    237    1901 story.txt 行数        字数        字节数<br>常用选项<br>-l    只计数行数<br>-w    只计数单词总数<br>-c    只计数字节总数<br>-m    只计数字符总数<br>-L    显示文件中最长行的长度</p><h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><p>文本排序sort<br>把整理过的文本显示在STDOUT，不改变原始文件sort [options] file(s)<br>常用选项<br>-r    执行反方向（由上至下）整理<br>-R    随机排序<br>-n    执行按数字大小整理<br>-f    选项忽略（fold）字符串中的字符大小写<br>-u    选项（独特，unique）删除输出中的重复行<br>-t    c    选项使用c做为字段界定符<br>-k    X    选项按照使用c字符分隔的X列来整理能够使用多次</p><h1 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h1><p>uniq命令：从输入中删除前后相接的重复的行<br>uniq [OPTION]… [FILE]…<br>-c: 显示每行重复出现的次数<br>-d: 仅显示重复过的行<br>-u: 仅显示不曾重复的行<br>注：连续且完全相同方为重复<br>　　常和sort 命令一起配合使用： sort    userlist.txt    |    uniq    -c</p><h1 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h1><p>复制对文件改变patch<br>diff    命令的输出被保存在一种叫做“补丁”的文件中<br>使用    -u    选项来输出“统一的（unified）”diff格式文件，最适用于补丁文件<br>patch    复制在其它文件中进行的改变（要谨慎使用）<br>适用    -b    选项来自动备份改变了的文件diff -u foo.conf foo2.conf &gt; foo.patch patch -b foo.conf foo.patch</p><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p><font color="red">–color=auto</font>: 对匹配到的文本着色显示 <font color="red"><br>-v</font>: 显示不被pattern匹配到的行 <font color="red"><br>-i</font>: 忽略字符大小写 <font color="red"><br>-n</font>：显示匹配的行号 <font color="red"><br>-c</font>: 统计匹配的行数 <font color="red"><br>-o</font>: 仅显示匹配到的字符串 <font color="red"><br>-q</font>: 静默模式，不输出任何信息 <font color="red"><br>-A</font> #: after, 后#行 <font color="red"><br>-B</font> #: before, 前#行 <font color="red"><br>-C</font> #：context, 前后各#行 <font color="red"><br>-e</font>：实现多个选项间的逻辑or关系 <font color="red"><br><code>grep –e &#39;cat&#39; -e dog&#39; file</code><br>-w</font>：匹配整个单词 <font color="red"><br>-E</font>：使用ERE <font color="red"><br>-F</font>：相当于fgrep，不支持正则表达式 <font color="red"><br>-f</font> file: 根据模式文件处理</p><h2 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h2><p>基本正则表达式元字符<br><code>.</code>    匹配任意单个字符<br><code>[]</code> 匹配指定范围内的任意单个字符，示例：[wang]    [0-9]    [a-z]    [a-zA-Z]<br><code>[^]</code> 匹配指定范围外的任意单个字符<br><code>[:alnum:]</code> 字母和数字<br><code>[:alpha:]</code> 代表任何英文大小写字符，亦即 A-Z, a-z<br><code>[:lower:]</code> 小写字母<br><code>[:upper:]</code> 大写字母<br><code>[:blank:]</code> 空白字符（空格和制表符）<br><code>[:space:]</code> 水平和垂直的空白字符（比[:blank:]包含的范围广）<br><code>[:cntrl:]</code> 不可打印的控制字符（退格、删除、警铃…）<br><code>[:digit:]</code> 十进制数字<br><code>[:xdigit:]</code>十六进制数字<br><code>[:graph:]</code> 可打印的非空白字符<br><code>[:print:]</code> 可打印字符<br><code>[:punct:]</code> 标点符号</p><h2 id="匹配次数"><a href="#匹配次数" class="headerlink" title="匹配次数"></a>匹配次数</h2><p>用在要指定次数的字符后面，用于指定前面的字符要出现的次数<br><code>*</code>    匹配前面的字符任意次，包括0次贪婪模式：尽可能长的匹配<br><code>.*</code> 任意长度的任意字符<br><code>\?</code> 匹配其前面的字符0或1次<br><code>\+</code> 匹配其前面的字符至少1次<br><code>\{n\}</code> 匹配前面的字符n次<br><code>\{m,n\}</code> 匹配前面的字符至少m次，至多n次<br><code>\{,n\}</code> 匹配前面的字符至多n次<br><code>\{n,\}</code> 匹配前面的字符至少n次</p><h2 id="位置锚定"><a href="#位置锚定" class="headerlink" title="位置锚定"></a>位置锚定</h2><p>定位出现的位置：<br><code>^</code> 行首锚定，用于模式的最左侧<br><code>$</code>行尾锚定，用于模式的最右侧<br><code>^PATTERN$</code>    用于模式匹配整行<br><code>^$</code>    空行<br><code>^[[:space:]]*$</code>    空白行<br><code>\&lt;</code>      #锚定单词的开始，如:<code>&#39;\&lt;grep&#39;匹配包含以grep开头的单词的行</code><br><code>\&gt;</code>      #锚定单词的结束，如:<code>&#39;grep\&gt;&#39;匹配包含以grep结尾的单词的行</code><br><code>\b</code>      #单词锁定符，如: <code>&#39;\bgrep\b&#39;只匹配grep</code></p><p><table><tr><td bgcolor="red">数字,字母,下划线,不能作为单词的分隔符。</td></tr></table>. </p><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p><code>\(\)</code>  将一个或多个字符捆绑在一起，当作一个整体处理，如：<code>\(root\)\+</code><br>分组括号中的模式匹配到的内容会被正则表达式引擎记录于内部的变量中，这些变量的命名方式为: \1, \2, \3, …<br><code>\1</code>    表示从左侧起第一个左括号以及与之匹配右括号之间的模式所匹配到的字符<br>    示例：    <code>\(string1\+\(string2\)*\)</code><br><code>\1: string1\+\(string2\)*</code><br><code>\2: string2</code><br>后向引用：引用前面的分组括号中的模式所匹配字符，而非模式本身<br>或者：|<br>示例：a|b: a或b    C|cat: C或cat    (C|c)at:Cat或cat</p><blockquote class="blockquote-center"><p><code>^</code>    行首<br><code>$</code>　行尾　　　<br><code>.</code> 任意单一字符　　　<br><code>[]</code>[]内任意单一字符　　　<br><code>[^]</code> 除[]内任意单一字符　　　<br><code>*</code> 前面字符重复不确定次数　　　<br><code>\+</code> 前面字符重复一次以上不确定次数　　　<br><code>\?</code> 前面字符重复0或1次　　　<br><code>\</code>     转义符<br><code>.*</code> 任意长度字符　　　<br><code>\{n\}</code> 前面字符重复n次　　　<br><code>\{n,\}</code> 前面字符重复n次以上<br><code>\{m,n\}</code> 前面字符重复m次和n次之间</p></blockquote><h1 id="扩展正则"><a href="#扩展正则" class="headerlink" title="扩展正则"></a>扩展正则</h1><p><table><tr><td bgcolor="#003153"><font color="black"><font size="4"><code>egrep = grep -E</code><br>egrep [OPTIONS] PATTERN [FILE…]<br>扩展正则表达式的元字符：<br><i class="fa fa-child fa-2x" aria-hidden="true"></i><font color="36bf36">字符匹配：<code>.</code>任意单个字符 　　<code>[]</code> 指定范围的字符　　<code>[^]</code> 不在指定范围的字符 </font><br><i class="fa fa-male fa-2x" aria-hidden="true"></i><font color="66ff59">次数匹配：<code>*</code>    匹配前面字符任意次　　<code>?</code> 0或1次 　　<code>+</code> 1次或多次　　 <code>{m}</code> 匹配m次　　 <code>{m,n}</code> 至少m，至多n次 </font><br><i class="fa fa-female  fa-2x" aria-hidden="true"></i><font color="4de680">位置锚定：<code>^</code>    行首 　<code>$</code> 行尾　　<code>\&lt;</code>　#锚定单词的开始　　<code>\&gt;</code>　#锚定单词的结束　　<code>\b</code>　#单词锁定符　</font><br><i class="fa fa-child fa-2x" aria-hidden="true"></i><font color="8ce600">分组：<code>()</code>　　后向引用：\1, \2, …<br>或者：<code>a|b</code>a或b　　　<code>C|cat</code>C或cat　　　<code>(C|c)at</code>Cat或cat<br></font></font></font></td></tr></table>.</p><h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><p><code>:r! 命令</code> 可以将命令执行的结果复制到内容里面去</p><h1 id="脚本编程"><a href="#脚本编程" class="headerlink" title="脚本编程"></a>脚本编程</h1><p>　　脚本调试<br>检测脚本中的语法错误<br>bash -n /path/to/some_script<br>　　调试执行<br>bash -x /path/to/some_script</p><h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>变量赋值：name=‘value’<br>可以使用引用value:<br>　　(1)可以是直接字串; name=“root”<br>　　(2)    变量引用：name=”$USER”<br>　　(3)    命令引用：name=<code>COMMAND</code> name=$(COMMAND)<br>变量引用：${name}  $name<br>　　“”：弱引用，其中的变量引用会被替换为变量值<br>　　‘’：强引用，其中的变量引用不会被替换为变量值，而保持原字符串<br>显示已定义的所有变量：set</p><h2 id="删除变量：unset-name"><a href="#删除变量：unset-name" class="headerlink" title="删除变量：unset name"></a>删除变量：unset name</h2><p>查看当前shell进程号：<code>echo $$</code> <code>echo BASHPID</code><br>只读和位置变量<br>只读变量：只能声明，但不能修改和删除<br>声明只读变量：<br>readonly name<br>declare -r name<br>查看只读变量： readonly –p</p><h2 id="位置变量：在脚本代码中调用通过命令行传递给脚本的参数"><a href="#位置变量：在脚本代码中调用通过命令行传递给脚本的参数" class="headerlink" title="位置变量：在脚本代码中调用通过命令行传递给脚本的参数"></a>位置变量：在脚本代码中调用通过命令行传递给脚本的参数</h2><p>$1, $2, …：对应第1、第2等参数，shift [n]换位置 $0: 命令本身<br>$*: 传递给脚本的所有参数，全部参数合为一个字符串<br>$@: 传递给脚本的所有参数，每个参数为独立字符串<br>$#: 传递给脚本的参数的个数<br>$@ $* 只在被双引号包起来的时候才会有差异<br>set – 清空所有位置变量<br><img src="https://s2.ax1x.com/2019/04/14/AXGFYD.png" alt=""></p><h2 id="退出状态"><a href="#退出状态" class="headerlink" title="退出状态"></a>退出状态</h2><p>进程使用退出状态来报告成功或失败<br>•    0 代表成功，1－255代表失败<br>•    $? 变量保存最近的命令退出状态<br>例如：<br><code>ping -c1 -W1 hostdown &amp;&gt; /dev/null echo $?</code><br>返回值可以被指定。<code>exit 100</code><br>退出状态码<br>bash自定义退出状态码 exit [n]：自定义退出状态码<br>注意：脚本中一旦遇到exit命令，脚本会立即终止；终止退出状态取决于exit命令后面的数字<br>注意：如果未给脚本指定退出状态码，整个脚本的退出状态码取决于脚本中执行的最后一条命令的状态码</p><h1 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h1><p>算术运算<br>bash中的算术运算:help let<br><code>+, -, *, /, %取模（取余）, **（乘方）</code><br>实现算术运算：<br>(1)    let var=算术表达式<br>(2)    var=$[算术表达式]<br>(3)    var=$((算术表达式))<br>(4)    var=$(expr arg1 arg2 arg3 …)<br>(5)    declare –i var = 数值<br>(6)    echo ‘算术表达式’ | bc<br>乘法符号有些场景中需要转义，如<code>*</code><br>bash有内建的随机数生成器：$RANDOM（0-32767） echo $[$RANDOM%50] ：0-49之间随机数</p><pre><code>let &quot;a=8+9&quot;    a=$[9+7]        expr 1 + 3    declare -i n=3+6</code></pre><h1 id="颜色指定"><a href="#颜色指定" class="headerlink" title="颜色指定"></a>颜色指定</h1><p>Color=”\e[1;5;$[RANDOM%7+31]m”<br>END=”\e[0m”<br>echo -e “$Color 你好 $END”<br>1：表示亮度；5：表示闪烁<br>表示随机打印出任意颜色的 “你好” </p><h1 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h1><p>增强型赋值：<br><code>+=, -=, *=, /=, %</code><br>let varOPERvalue<br>例如:let count+=3<br>自加3后自赋值<br>自增，自减：<br>let var+=1<br>let var++<br>let var-=1<br>let var–</p><h1 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h1><p>true, false 1, 0<br>与：<br>1 与 1 = 1<br>1 与 0 = 0</p><p>0 与 1 = 0<br>0 与 0 = 0<br>    或:<br>1 或 1 = 1<br>1 或 0 = 1<br>0 或 1 = 1<br>0 或 0 = 0</p><p>非：！<br>! 1 = 0    ! true<br>! 0 = 1    ! false<br>短路运算<br>短路与<br>第一个为0，结果必定为0<br>第一个为1，第二个必须要参与运算短路或<br>第一个为1，结果必定为1<br>第一个为0，第二个必须要参与运算<br>异或：^<br>异或的两个值,相同为假，不同为真<br><code>#str=abcde;[[ &quot;$str&quot; =~ ^abc ]] &amp;&amp; echo true || echo false</code><br>正则表达式<br><code>#str=abcdef;[[ &quot;$str&quot; == abc* ]] &amp;&amp; echo true || echo false</code><br>通配符<br><code>id $1 &amp;&gt; /dev/null &amp; ( echo &amp;1 is exist;exit ) || (useradd $1;echo $1 is created)</code><br><code>echo finined</code><br>小括号会开启子shell。退出只会退出子shell，不会退出脚本本身。</p><h1 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h1><p>判断某需求是否满足，需要由测试机制来实现<br>专用的测试表达式需要由测试命令辅助完成测试过程<br>评估布尔声明，以便用在条件性执行中<br>•    若真，则返回0<br>•    若假，则返回1<br>测试命令：<br>•    test EXPRESSION<br>•    [ EXPRESSION ]<br>•    [[ EXPRESSION ]]<br>注意：EXPRESSION前后必须有空白字符</p><h1 id="Bash的文件权限测试"><a href="#Bash的文件权限测试" class="headerlink" title="Bash的文件权限测试"></a>Bash的文件权限测试</h1><p>存在性测试<br>-a FILE：同-e<br>-e FILE: 文件存在性测试，存在为真，否则为假<br>存在性及类别测试<br>-b FILE：是否存在且为块设备文件<br>-c FILE：是否存在且为字符设备文件<br>-d FILE：是否存在且为目录文件<br>-f FILE：是否存在且为普通文件<br>-h FILE 或 -L FILE：存在且为符号链接文件<br>-p FILE：是否存在且为命名管道文件<br>-S FILE：是否存在且为套接字文件</p><h1 id="Bash的文件属性测试"><a href="#Bash的文件属性测试" class="headerlink" title="Bash的文件属性测试"></a>Bash的文件属性测试</h1><p>文件权限测试：<br>-r FILE：是否存在且可读<br>-w FILE: 是否存在且可写<br>-x FILE: 是否存在且可执行<br>文件特殊权限测试：<br>-u FILE：是否存在且拥有suid权限<br>-g FILE：是否存在且拥有sgid权限<br>-k FILE：是否存在且拥有sticky权限</p><p>文件大小测试：<br>-s FILE: 是否存在且非空<br>文件是否打开：<br>-t fd: fd 文件描述符是否在某终端已经打开<br>-N FILE：文件自从上一次被读取之后是否被修改过<br>-O FILE：当前有效用户是否为文件属主<br>-G FILE：当前有效用户是否为文件属组</p><p>双目测试：<br>FILE1 -ef FILE2: FILE1是否是FILE2的硬链接<br>FILE1 -nt FILE2: FILE1是否新于FILE2（mtime）<br>FILE1 -ot FILE2: FILE1是否旧于FILE2</p><h1 id="Bash的组合测试条件"><a href="#Bash的组合测试条件" class="headerlink" title="Bash的组合测试条件"></a>Bash的组合测试条件</h1><p>第一种方式：<br>COMMAND1 &amp;&amp; COMMAND2 并且<br>COMMAND1 || COMMAND2 或者<br>! COMMAND    非<br>如：<code>[ -f “$FILE” ] &amp;&amp; [[ “$FILE”=~ .*\.sh$ ]]</code><br>第二种方式：<br>EXPRESSION1 -a EXPRESSION2 并且<br>EXPRESSION1 -o EXPRESSION2 或者<br>! EXPRESSION<br>必须使用测试命令进行，[[ ]] 不支持<br>示例：<br><code>[ -z “$HOSTNAME” -o $HOSTNAME &quot;==&quot;localhost.localdomain&quot; ] \ &amp;&amp; hostname www.magedu.com</code><br><code>[ -f /bin/cat -a -x /bin/cat ] &amp;&amp; cat /etc/fstab</code></p><h1 id="read"><a href="#read" class="headerlink" title="read"></a>read</h1><p>使用read来把输入值分配给一个或多个shell变量 -p 指定要显示的提示<br>-s 静默输入，一般用于密码 -n N 指定输入的字符长度N -d ‘字符’ 输入结束符<br>-t N TIMEOUT为N秒<br>read 从标准输入中读取值，给每个单词分配一个变量所有剩余单词都被分配给最后一个变量<br>read -p “Enter a filename: “ FILE</p><h1 id="bash如何展开命令行"><a href="#bash如何展开命令行" class="headerlink" title="bash如何展开命令行"></a>bash如何展开命令行</h1><p>把命令行分成单个命令词<br>展开别名<br>展开大括号的声明（{}）<br>展开波浪符声明（<code>~</code>）<br>命令替换$()  和  <code></code>）<br>再次把命令行分成命令词<br>展开文件通配（<code>*、?、[abc]</code>等等）<br>准备I/0重导向（&lt;、&gt;）<br>运行命令</p><h1 id="防止扩展"><a href="#防止扩展" class="headerlink" title="防止扩展"></a>防止扩展</h1><p>反斜线（\）会使随后的字符按原意解释 $ echo Your cost: \$5.00<br>Your cost: $5.00<br>加引号来防止扩展<br>•    单引号（’）防止所有扩展<br>•    双引号（”）也防止所有扩展，但是以下情况例外：<br>$（美元符号）    －  变量扩展<br>`（反引号）    －  命令替换<br>\（反斜线）    －    禁止单个字符扩展<br>!（叹号）    －    历史命令替换</p><h1 id="bash的配置文件"><a href="#bash的配置文件" class="headerlink" title="bash的配置文件"></a>bash的配置文件</h1><p>按生效范围划分，存在两类：<br>全局配置：<br>/etc/profile<br>/etc/profile.d/*.sh<br>/etc/bashrc<br>个人配置：<br><code>~/.bash_profile ~/.bashrc</code></p><h1 id="shell登录两种方式"><a href="#shell登录两种方式" class="headerlink" title="shell登录两种方式"></a>shell登录两种方式</h1><p>交互式登录：<br>(1)直接通过终端输入账号密码登录<br>(2)使用“su - UserName” 切换的用户<br>执行顺序：<code>/etc/profile --&gt; /etc/profile.d/*.sh --&gt; ~/.bash_profile --&gt; ~/.bashrc --&gt; /etc/bashrc</code><br>非交互式登录：<br>(1)su UserName<br>(2)图形界面下打开的终端<br>(3)执行脚本<br>(4)任何其它的bash实例<br>执行顺序：  <code>/etc/profile.d/*.sh --&gt; /etc/bashrc --&gt;~/.bashrc</code></p><h1 id="Profile类"><a href="#Profile类" class="headerlink" title="Profile类"></a>Profile类</h1><p>按功能划分，存在两类：profile类和bashrc类<br>profile类：为交互式登录的shell提供配置全局：<code>/etc/profile, /etc/profile.d/*.sh 个人：~/.bash_profile</code><br>功用：<br>(1)    用于定义环境变量<br>(2)    运行命令或脚本</p><h1 id="bashrc类：为非交互式和交互式登录的shell提供配置全局：-etc-bashrc"><a href="#bashrc类：为非交互式和交互式登录的shell提供配置全局：-etc-bashrc" class="headerlink" title="bashrc类：为非交互式和交互式登录的shell提供配置全局：/etc/bashrc"></a>bashrc类：为非交互式和交互式登录的shell提供配置全局：/etc/bashrc</h1><p>个人：<code>~/.bashrc</code><br>功用：<br>(1)    定义命令别名和函数<br>(2)    定义本地变量</p><h1 id="编辑配置文件生效"><a href="#编辑配置文件生效" class="headerlink" title="编辑配置文件生效"></a>编辑配置文件生效</h1><p>修改profile和bashrc文件后需要生效：<br>两种方法：<br>.重新启动shell进程<br><strong>.或source</strong><br>例：<code>.~/.bashrc</code></p><h1 id="Bash-退出任务"><a href="#Bash-退出任务" class="headerlink" title="Bash 退出任务"></a>Bash 退出任务</h1><p>保存在~/.bash_logout文件中(用户)<br>在退出登录shell时运行<br>用于：创建自动备份<br>清除临时文件<br>想要登出后系统自动执行操作可以将执行动作放在：  ~/.bash_logot</p><h1 id=""><a href="#" class="headerlink" title="$-"></a>$-</h1><p>h：hashall，打开这个选项后，Shell 会将命令所在的路径hash下来，避免每次都要查询。通过set +h将h选项关闭<br>i：interactive-comments，包含这个选项说明当前的 shell 是一个交互式的shell。所谓的交互式shell,在脚本中，i选项是关闭的。<br>m：monitor，打开监控模式，就可以通过Job control来控制进程的停止、继续，后台或者前台执行等。<br>B：braceexpand，大括号扩展<br>H：history，H选项打开，可以展开历史列表中的命令，可以通过!感叹号来完成，例如“!!”返回上最近的一个历史命令，“!n”返回第 n 个历史命令</p><h1 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h1><p>-i 不区分大小写的搜索<br>-n N 只列举前N个匹配项目<br>-r 使用正则表达式<br>例：搜索名称或路径中带有”conf”的文件<br><code>locate conf</code></p><h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1><p><i class="fa fa-dot-circle-o"></i>指搜索层级<br>-maxdepth level 最大搜索目录深度，指定目录为第1级<br>-maindepth level 最小搜索目录深度<br><code>find /data -maxdepth 2 -mindepth 2 -name &quot;*.sh&quot;</code> 表示只在/data下的二级目录下搜索<br><i class="fa fa-dot-circle-o"></i>先处理目录内的文件，再处理目录<br>　-depth<br><i class="fa fa-dot-circle-o"></i>根据文件名和inode查找：<br>　-name “文件名称”:支持使用glob<br>　　*,?,[],[^]<br>　-iname “文件名称”:不区分字母大小写<br>　-inum n 按inode号查找<br>　-samefile name 相同inode号的文件<br>　-links n 链接数为n的文件<br>　-reges “PATTERN”:以PATTERN匹配整个文件路径，而非文件名称</p><h2 id="查找条件"><a href="#查找条件" class="headerlink" title="查找条件"></a>查找条件</h2><p><i class="fa fa-dot-circle-o"></i>根据属主，属组查找：<font color="red"><br>-user USERNAME</font> :查找属主为指定用户(UID)的文件 <font color="red"><br>-group GROUPNAME</font> :查找属组为指定组(GID)的文件 <font color="red"><br>-uid UserID</font> :查找属主为指定的UID号的文件 <font color="red"><br>-gid GroupID</font> :查找属组为指定的GID号的文件 <font color="red"><br>-nouser</font> :查找没有属主的文件 <font color="red"><br>-nogroup</font> :查找没有属组的文件</p><h2 id="根据文件类型查找："><a href="#根据文件类型查找：" class="headerlink" title="根据文件类型查找："></a>根据文件类型查找：</h2><p>-type TYPE: <font color="red"><br>f</font> :普通文件 <font color="red"><br>d</font> :目录文件 <font color="red"><br>l</font> :符号链接文件 <font color="red"><br>s</font> :套接字文件 <font color="red"><br>b</font> :块设备文件 <font color="red"><br>c</font> :字符设备文件 <font color="red"><br>p</font> :管道文件<br>空文件或目录： -empty<br><code>find /app -type d -empty</code></p><h2 id="查找条件-1"><a href="#查找条件-1" class="headerlink" title="查找条件"></a>查找条件</h2><p><i class="fa fa-dot-circle-o"></i>组合条件：<br> 与：-a<br> 或：-o<br> 非：-not,!<br><i class="fa fa-dot-circle-o"></i>德 摩根定律：<br>(非A)或(非B)=非(A或B)<br>(非A)且(非B)=非(A或B)<br>示例：<br> !A -a !B = !(A -o B)<br> !A -o !B = !(A -a B)<br><img src="/2018/08/28/马哥笔记/find查找条件非或图.png" alt=""></p><h2 id="根据文件大小来查找"><a href="#根据文件大小来查找" class="headerlink" title="根据文件大小来查找"></a>根据文件大小来查找</h2><p> -size[+|-]#UNIT<br> 　常用单位:k,M,G,c(byte)<br> #UNIT:(#-1,#]<br> 　如: 6k表示(5k,6k]<br> -#UNIT:[0,#-1]<br> 　如: +6k表示(0,5k]<br> +#UNIT:(#,∞)<br> 　如: +6k表示(6k,∞)</p><h2 id="根据时间戳："><a href="#根据时间戳：" class="headerlink" title="根据时间戳："></a>根据时间戳：</h2><p>以”天”为单位<br>-atime [+|-]#,<br>　#:[#,#+1)<br>　+#:[#+1,∞]<br>　-#:[0,#)<br>-mtime<br>-ctiime<br>以”分钟”为单位<br>-amin<br>-mmin<br>-cmin</p><p><div class="note warning"><p><br>atime、ctime、mtime的区别<br>atime：上一次访问这个文件是什么时候<br>ctime：上一次改变这个文件的属性(元数据)是什么时候<br>mtime：上一次改变这个文件的内容是什么时候 </p></div>.</p><h2 id="根据权限查找："><a href="#根据权限查找：" class="headerlink" title="根据权限查找："></a>根据权限查找：</h2><p>-perm[/|-]MODE<br>　MODE:精确权限匹配<br>　/MODE:任何一类(u,g,o)对象的权限中只要能一位匹配即可，或关系，从centos7开始淘汰<br>　-MODE:每一类对象都必须同时拥有指定权限，与关系<br>　０:表示不关注<br><span id="inline-green">find -perm 755会匹配权限模式恰好是755的文件<br>只有当任意人有写权限时，find -perm +222就会匹配<br>只要当每个人都有写权限时，find -perm -222才会匹配<br>只要当其他人(other)有写权限时，find -perm -002 才会匹配 </span>.</p><h2 id="处理动作"><a href="#处理动作" class="headerlink" title="处理动作"></a>处理动作</h2><p><code>-exec COMMAND {} \;</code>:对查到的每个文件执行有COMMAND指定的命令<br><code>{}</code>:用于引用查找到的文件名称自身<br>find传递查找到的文件至后面的命令时，查找到所有符合条件的文件一次性传递给后面的命令</p><h2 id="参数替换xargs"><a href="#参数替换xargs" class="headerlink" title="参数替换xargs"></a>参数替换xargs</h2><p><div class="alert alert-info"><i class="fa fa-info"></i>由于很多命令不支持管道<code>|</code>来传递参数，而日常工作中有这个必要，所以就有了xargs命令<br><i class="fa fa-pencil"></i>xargs用于产生某个命令的参数，xargs可以读入stdin的数据，并且已空格符或回车将stdin的数据分隔为arguments<br><i class="fa fa-pencil"></i>注意:文件名或者是其他意义的名词内含有空格符的情况<br><i class="fa fa-pencil"></i>有些命令不能接受过多参数，命令执行可能会失败，xargs可以解决<br>示例：<br>ls f* | xargs rm<br>find /sbin -perm +700 | ls -l　这个命令是错误的,ls不支持标准输入<br>find /sbin -perm +7000 | xargs ls -l 查找特殊权限的文件<br>find和xargs格式:find | xargs COMMAND </div>.</p><h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><p>compress [-dfvcVr]\[-b maxbits]\[file…] <font color="red"><br>-d</font> :解压缩，相当于gunzip <font color="red"><br>-c</font> :结果输出至标准输出，不删除原文件 <font color="red"><br>-v</font> :显示详情 <font color="red"><br>uncompress</font> 解压缩<br>zcat file.Z &gt; file</p><h2 id="gzip-gunzip"><a href="#gzip-gunzip" class="headerlink" title="gzip/gunzip"></a>gzip/gunzip</h2><p>-d:解压缩，相当于gunzip<br>-c :结果输出至标准输出，保留源文件不改变 <font color="red"><br>-#</font> :1-9，指定压缩比，值越大压缩比越大 <font color="red"><br>zcat:不解压缩的前提下查看文本文件内容</font><br>示例：<div class="alert alert-danger"><i class="fa fa-bug"></i> gzip -c messages &gt; messages.gz<br>gzip -c -d message.gz &gt; messages<br>zcat messages.gz &gt; messages<br>cat messages | gzip &gt; m.gz</div>.</p><h2 id="bzip2-bunzip2-bzcat"><a href="#bzip2-bunzip2-bzcat" class="headerlink" title="bzip2/bunzip2/bzcat"></a>bzip2/bunzip2/bzcat</h2><p>bzip2 [option]…FILE… <font color="red"><br>-k</font> :keep，保留原文件 <font color="red"><br>-d</font> :解压缩 <font color="red"><br>-#</font> :1-9,压缩比，默认为9 <font color="red"><br>bzcat:不显示解压缩的前提下查看文件文件内容</font></p><h2 id="xz-unxz-xzcat"><a href="#xz-unxz-xzcat" class="headerlink" title="xz/unxz/xzcat"></a>xz/unxz/xzcat</h2><p>xz[OPTION]…FILE… <font color="red"><br>-k</font> :keep，保留原文件 <font color="red"><br>-d</font> :解压缩 <font color="red"><br>-#</font> :1-9，压缩比，默认为6<br>unxz file.xz 解压缩<br>xzcat: 不显示解压缩的前提下查看文本文件内容 <font color="red"><br>-J：使用xz归档压缩；<br>-Jcf /PATH/TO/SOMEFILES.tar FILE…|DIR：归档压缩；<br>-Jxf /PATH/TO/SOMEFILES.tar：展开归档解压缩</font>.</p><h2 id="zip-unzip"><a href="#zip-unzip" class="headerlink" title="zip/unzip"></a>zip/unzip</h2><p><i class="fa fa-compress"></i> 打包压缩<br><code>zip -r /backup/sysconfig /etc/sysconfig</code><br>解包解压缩<br><code>unzip sysconfig.zip</code><br><code>cat /var/log/messages | zip messages -</code><br><code>unzip -p message &gt; message</code></p><h1 id="tar工具"><a href="#tar工具" class="headerlink" title="tar工具"></a>tar工具</h1><p>-exclude 排除文件<br><code>tar zcvf /root/a3.tgz --exclude=/app/host1 --exclude=/app/host2/app</code><br>-T选项指定输入文件，-X选项指定包含要排除的文件列表<br><code>tar zcvf mybackup.tgz -T /root/includefilelist -X /root/excludefilelist</code></p><p><div class="alert alert-info">splist:: 分割一个文件为多个文件<br>分割大的tar文件为多份小文件<br>split -b Size -d tar-file-name prefix-name<br>split -b 1M -d mybackup.tgz mybackup-parts<br>split -b 1m mybackup.taz mybackup-parts<br>合并：<br>cat mybackup-parts* &gt; mybackup.tar.gz<br></div>.</p><p><code>spilt -b 2M -d /root/data.tar.xz databak</code> -d会以数字结尾</p><h1 id="cpio"><a href="#cpio" class="headerlink" title="cpio"></a>cpio</h1><p>功能：cpio用于创建、解压归档文件，也可以对归档文件执行拷入拷出的动作，即向归档文件中追加文件，或从归档文件中提取文件。它也支持tar格式的归档文件，但是对压缩后的tar(如.tar.gz格式)就没法支持了，cpio毕竟不会调用对应的(解)压缩工具。<div class="alert alert-warning"><i class="fa fa-cog"></i>cpio命令是通过重定向的方式将文件进行打包备份，还原恢复的工具，它可以解压以<code>.cpio</code>或者<code>.tar</code>结尾的文件</div> cpio [选项] &gt; 文件名或者设备名<br>cpio [选项] &lt; 文件名或者设备名 <font color="red"><br>-o</font>    将文件拷贝打包成文件或者将文件输出到设备上 <font color="red"><br>-O</font> filename    输出到指定的归档文件名 <font color="red"><br>-A</font>    向已存在的归档文件中追加文件 <font color="red"><br>-i</font>    解包，将打包文件解压或将设备上的备份还原到系统 <font color="red"><br>-I</font> filename    对指定的归档文件名解压 <font color="red"><br>-t</font>    预览，查看文件内容或者输出到设备上的文件内容 <font color="red"><br>-F</font> filename    使用指定的文件名替代标准输入或输出 <font color="red"><br>-d</font>    解包生成目录，在cpio还原时，自动的建立目录 <font color="red"><br>-v</font>    显示打包过程中的文件名称</p><p><table><tr><td bgcolor="#00808c"> <i class="fa fa-pencil-square-o" aria-hidden="true"></i><font color="red"> 将etc目录备份</font>：<code>find ./etc -print |cpio -ov &gt;bak.cpio</code><br><i class="fa fa-pencil-square-o" aria-hidden="true"></i><font color="red">  将/data内容追加bak.cpio</font> <code>find /data | cpio -oA -F bak.cpio</code><br><i class="fa fa-pencil-square-o" aria-hidden="true"></i><font color="red">  内容预览</font><br><code>cpio –tv &lt; etc.cpio</code><br><i class="fa fa-pencil-square-o" aria-hidden="true"></i><font color="red">  解包文件</font> <code>cpio –idv &lt; etc.cpio</code> </td></tr></table>.</p><h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><p><font color="red">-n </font> 不输出模式空间内容到屏幕，即不自动打印 <font color="red"><br>-e</font> 多点编辑 <font color="red"><br>-f</font> /PATH/SCRIPT_FILE    从指定文件中读取编辑脚本 <font color="red"><br>-r</font> 支持使用扩展正则表达  <font color="red"><br>-i.bak</font>     备份文件并原处编辑<br>-i 直接修改<br>script:<br>　　<code>&#39;地址命令&#39;</code><br>地址定界：　<table><tr><td bgcolor="003153"><font size="3"><font color="36bf36"><font face="Microsoft YaHei">(1)    不给地址：对全文进行处理<br>(2)    单地址：<br>　　<code>#</code>: 指定的行，<code>$</code>：最后一行  <code>/pattern/</code>：被此处模式所能够匹配到的每一行<br>(3)    地址范围：<br>　　<code>#,#</code>  <code>#,+#</code>  <code>pat1/,/pat2/</code><br>　　<code>#,/pat1/</code><br>(4)    <code>~</code>：步进  1~2 奇数行,  2~2 偶数行<br><code>sed -i.back &#39;/^root/aadmin line passwd&#39;</code> 插入并备份原文件</font></font></font></td></tr></table></p><p>使用sed将/etc/httpd/conf/httpd.conf中#NameVirtualHost *:80去掉#号,同时将最后7行的#都去掉<br>解:<code>sed -e &#39;s/#Name/Name/&#39; -e &#39;/#&lt;VirtualHost/,/#&lt;\/Virtual/s/#//&#39; /etc/httpd/conf/httpd.conf</code><br>.</p><h2 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h2><p><table><tr><td bgcolor="003366"><font size="3"><font face="Microsoft YaHei"><font color="2aae2a"><code>d</code> 删除模式空间匹配的行，并立即启用下一轮循环<br><code>p</code> 打印当前模式空间内容，追加到默认输出之后<br><code>a</code> []text在指定行后面追加文本，支持使用\n实现多行追加<br><code>i</code> []text在行前面插入文本<br><code>c</code> []text    替换行为单行或多行文本<br><code>w</code> /path/file 保存模式匹配的行至指定文件<br><code>r</code> /path/file读取指定文件的文本至模式空间中匹配到的行后<br><code>=</code> 为模式空间中的行打印行号<br><code>!</code> 模式空间中匹配行取反处理<br></font></font></font></td></tr></table> <code>sed  &#39;/^UUID/r /etc/issue&#39; /etc/fstab</code> 读取/etc/issue中的内容到/etc/fstab UUID开头的行后 </p><pre><code>     seq 10 | sed  &#39;1~2d&#39; 输出双数的行       seq 10 | sed &#39;axxx\nyyy\nzzz&#39;        sed &#39;/^root/i\  admin line&#39; /etc/passwd 加入了空格       sed &#39;/^root/aadmin line&#39; /etc/passwd       sed &#39;/^UUID/w f1&#39; /etc/fstab       sed  &#39;/^UUID/=&#39; /etc/fstab  打印UUID开头的行显示行号  </code></pre><pre><code>[root@centos7 ~]# seq -s + 10  -s指定分隔符1+2+3+4+5+6+7+8+9+10</code></pre><h2 id="sed替换"><a href="#sed替换" class="headerlink" title="sed替换"></a>sed替换</h2><p><code>s///</code>    查找替换,支持使用其它分隔符，<code>s@@@</code>，<code>s###</code><br>替换标记：<br><code>g</code>    行内全局替换<br><code>p</code>    显示替换成功的行<br><code>w /PATH/FILE</code>  将替换成功的行保存至文件中<br>例：<br><code>sed -n  &#39;s/UUID/tempfilesystem/gp&#39; /etc/fstab</code><br><code>ifconfig | sed -n &#39;2p&#39; | sed &#39;s/.*inet //&#39;|sed &#39;s@ netmask.*$@@&#39;</code><br><code>ifconfig | sed -nr &#39;2s/.*t (.*) net.*/\1/gp&#39;</code><br><code>ifconfig ens33 | sed -r &#39;2!d;s/.*inet (addr:)?//;s/  .*//&#39;</code> sed取IP地址<br><code>echo /etc/sysconfig/network-scripts/ | sed -nr &#39;s#(^.*/)([^/].*)/?$#\1#p&#39;</code>取基名（不理解）<br>sed大小写转换：<br><code>sed -r &#39;s/[[:alpha:]]/\u&amp;/g&#39; /etc/fstab</code><br><code>sed -r &#39;s/[[:alpha:]]/\l&amp;/g&#39; /etc/fstab</code></p><h2 id="sed-示例"><a href="#sed-示例" class="headerlink" title="sed 示例"></a>sed 示例</h2><pre><code>sed ‘2p’ /etc/passwdsed –n ‘2p’ /etc/passwdsed –n ‘1,4p’ /etc/passwdsed –n ‘/root/p’  /etc/passwdsed –n ‘2,/root/p’  /etc/passwd 从2行开始sed -n ‘/^$/=’ file 显示空行行号sed –n –e ‘/^$/p’ –e ‘/^$/=’ filesed  ‘/root/a\superman’ /etc/passwd行后sed ‘/root/i\superman’ /etc/passwd 行前sed ‘/root/c\superman’ /etc/passwd 代替行c:是表示将我现在所写的字符与所找到的行全部替换。不是字符替换。</code></pre><pre><code>sed ‘/^$/d’ filesed ‘1,10d’  filenl  /etc/passwd | sed ‘2,5d’nl  /etc/passwd | sed ‘2a tea’sed &#39;s/test/mytest/g&#39; examplesed –n ‘s/root/&amp;superman/p’ /etc/passwd 单词后sed –n ‘s/root/superman&amp;/p’ /etc/passwd 单词前sed -e ‘s/dog/cat/’ -e ‘s/hi/lo/’ petssed –i.bak ‘s/dog/cat/g’ petsnl:表示显示行号，空行不显示&amp;：代表前面找到的内容 </code></pre><h2 id="sed高级"><a href="#sed高级" class="headerlink" title="sed高级"></a>sed高级</h2><p>P：打印模式空间开端至\n内容，并追加到默认输出之前<br>h: 把模式空间中的内容覆盖至保持空间中<br>H：把模式空间中的内容追加至保持空间中<br>g: 从保持空间取出数据覆盖至模式空间<br>G：从保持空间取出内容追加至模式空间<br>x: 把模式空间中的内容与保持空间中的内容进行互换<br>n: 读取匹配到的行的下一行覆盖至模式空间<br>N：读取匹配到的行的下一行追加至模式空间<br>d: 删除模式空间中的行<br>D：如果模式空间包含换行符，则删除直到第一个换行符的模式空间中的文本，并不会读取新的输入行，而使用合成的模式空间重新启动循环。如果模式空间不包含换行符，则会像发出d命令那样启动正常的新循环</p><pre><code>sed -n &#39;n;p&#39; FILEsed &#39;1!G;h;$!d&#39; FILEsed‘N;D’FILEsed &#39;$!N;$!D&#39; FILEsed &#39;$!d&#39; FILEsed ‘G’ FILEsed ‘g’ FILEsed ‘/^$/d;G’ FILEsed &#39;n;d&#39; FILEsed -n &#39;1!G;h;$p&#39; FILE</code></pre><h1 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h1><p><font color="red">–test</font>: 测试安装，但不真正执行安装，即dry run模式<font color="red"><br>–nodeps</font>：忽略依赖关系<font color="red"><br>–replacepkgs</font> 强制重新安装已经安装的软件包<font color="red"><br>–replacefiles</font> 替换属于其他软件包的文件<font color="red"><br>–nosignature</font>: 不检查来源合法性 <font color="red"><br>–nodigest</font>：不检查包完整性<font color="red"><br>–noscripts</font>：不执行程序包脚本<br>　　　%pre:安装前脚本　–nopre<br>　　　%post: 安装后脚本 –nopost<br>　　　%preun: 卸载前脚本 –nopreun　<br>　　　%postun:卸载后脚本 –nopostun</p><h2 id="rpm升级"><a href="#rpm升级" class="headerlink" title="rpm升级"></a>rpm升级</h2><p><font color="red">upgrade</font>：安装有旧版程序包，则“升级”<br>如果不存在旧版程序包，则“安装” freshen：安装有旧版程序包，则“升级”<br>如果不存在旧版程序包，则不执行升级操作 rpm -Uvh PACKAGE_FILE …<br>rpm -Fvh PACKAGE_FILE …<font color="red"><br>–oldpackage</font>：降级  <font color="red"><br>–force</font>: 强制安装 <div class="alert alert-warning"><i class="fa fa-bell"></i> 注意：<br>(1)    不要对内核做升级操作；Linux支持多内核版本并存，因此，可以直接安装新版本内核<br>(2)    如果原程序包的配置文件安装后曾被修改，升级时，新版本的提供的同一个配置文件并不会直接覆盖老版本的配置文件，而把新版本的文件重命名(FILENAME.rpmnew)后保留</div>.</p><h2 id="包查询"><a href="#包查询" class="headerlink" title="包查询"></a>包查询</h2><p><font color="red">-a</font>: 所有包 <font color="red"><br>-f</font>: 查看指定的文件由哪个程序包安装生成 <font color="red"><br>-p rpmfile</font>：针对尚未安装的程序包文件做查询操作 <font color="red"><br>–whatprovides CAPABILITY</font>：查询指定的CAPABILITY由哪个包所提供 <font color="red"><br>–whatrequires CAPABILITY</font>：查询指定的CAPABILITY被哪个包所依赖<br><code>rpm2cpio 包文件|cpio –itv 预览包内文件</code><br><code>rpm2cpio 包文件|cpio –id &quot;\*.conf&quot; 释放包内文件</code> <font color="red"><br>–changelog</font>：查询rpm包的changelog  <font color="red"><br>-c</font>: 查询程序的配置文件 <font color="red"><br>-d</font>: 查询程序的文档 <font color="red"><br>-i</font>: information <font color="red"><br>-l</font>: 查看指定的程序包安装后生成的所有文件 <font color="red"><br>–scripts</font>：程序包自带的脚本 <font color="red"><br>–provides</font>: 列出指定程序包所提供的CAPABILITY <font color="red"><br>-R</font>: 查询指定的程序包所依赖的CAPABILITY</p><h2 id="包校验"><a href="#包校验" class="headerlink" title="包校验"></a>包校验</h2><p><font color="lime">#</font>rpm -V 已安装的包名<br>选项：-V 校验指定RPM包中的文件。(verify)  <font color="lime"><br>[root@Tiger ~]#</font>rpm -V httpd<br><strong>S.5….T.  c /etc/httpd/conf/httpd.conf</strong><br>验证内容中的8个信息的具体内容如下：  <font color="red"><br>S</font>：文件大小是否改变；  <font color="red"><br>M</font>：文件的类型或文件的权限(r w x)是否被改变；  <font color="red"><br>5</font>：文件MD5校验和是否改变(可以看成文件的内容是否改变)；  <font color="red"><br>D</font>：设备的主，从设备号是否改变；  <font color="red"><br>L</font>：文件路径是否改变；  <font color="red"><br>U</font>：文件的属主(所有者)是否改变；  <font color="red"><br>G</font>：文件的属组是否改变；  <font color="red"><br>T</font>：文件的修改时间是否改变；<br><strong>文件类型：</strong> <font color="red"><br>c</font> :配置文件(config file)  <font color="red"><br>d</font> :普通文档(documentation)  <font color="red"><br>g</font> :”鬼”文件(ghost file),很少见，就是该文件不应该被这个RPM包包含  <font color="red"><br>l</font> :授权文件(license file)  <font color="red"><br>r</font> :描述文件(read me)</p><h2 id="秘钥"><a href="#秘钥" class="headerlink" title="秘钥"></a>秘钥</h2><p>包来源合法性验正及完整性验证完整性验证：SHA256<br>来源合法性验证：RSA<br>公钥加密<br>对称加密：加密、解密使用同一密钥非对称加密：密钥是成对儿的<br>public key: 公钥，公开所有人<br>secret key: 私钥, 不能公开<br>导入所需要公钥<br><code>rpm -K|checksig rpmfile</code> 检查包的完整性和签名<br><code>rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</code> CentOS 7发行版光盘提供：RPM-GPG-KEY-CentOS-7<br><code>rpm -qa &quot;gpg-pubkey*&quot;</code></p><p>检查系统公钥 <code>rpm -qa &quot;gpg-pubkey*&quot;</code><br><code>[root@centos7 Packages]# rpm --import /mnt/RPM-GPG-KEY-CentOS-7</code><br><code>[root@centos7 Packages]# rpm -K tree-1.6.0-10.el7.x86_64.rpm</code></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据库重建：/var/lib/rpm<br>rpm {–initdb|–rebuilddb} initdb: 初始化<br>如果事先不存在数据库，则新建之否则，不执行任何操作<br>rebuilddb：重建已安装的包头的数据库索引目录</p><h1 id="centos6-内核救援"><a href="#centos6-内核救援" class="headerlink" title="centos6 内核救援"></a>centos6 内核救援</h1><p>rpm -e kernel –nodeps 忽略依赖卸载内核<br>修复:进入centos6光盘救援模式<br>df<br>mkdir /mnt/cdrom<br>mount /dev/sr0 /mnt/cdrom<br>df -h<br>rpm -ivh /mnt/cdrom/Pack…… –root=/mnt/sysimage/ 告诉系统真根在/mnt/sysimage这个目录里面<br><img src="https://s2.ax1x.com/2019/05/03/ENOeun.png" alt=""><br>命令执行后，会没有启动菜单，进单用户编辑一个<br>两行命令输完后，<br>boot 回车<br><img src="https://s2.ax1x.com/2019/05/03/ENOnH0.png" alt=""></p><h1 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h1><p><code>yum repolist</code> 查看仓库信息<br>仓库的元数据<br>[root@centos7 ~]# cd /var/cache/yum/x86_64/7/<br><code>yum history</code> 查看yum安装历史<br><code>yum history info 2</code> 查看历史中的第二项</p><pre><code>[epel]name=EPELbaseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/$releasever/$basearchgpgcheck=0</code></pre><p><img src="https://s2.ax1x.com/2019/05/04/EauSmR.png" alt="">yum客户端配置文件：<br><code>/etc/yum.conf</code>：为所有仓库提供公共配置<code>/etc/yum.repos.d/*.repo</code>：为仓库的指向提供配置仓库指向的定义：<pre>[repositoryID]<br>name=Some name for this repository<br>baseurl=url://path/to/repository/<br>enabled={1|0}<br>gpgcheck={1|0}<br>gpgkey=URL<br>enablegroups={1|0}<br>failovermethod={roundrobin|priority}<br>roundrobin：意为随机挑选，默认值<br>priority:按顺序访问<br>cost=    默认为1000</pre> yum的repo配置文件中可用的变量：<br><code>$releasever</code>: 当前OS的发行版的主版本号<br><code>$arch</code>: 平台，i386,i486,i586,x86_64等<br><code>$basearch</code>：基础平台；i386, x86_64<br><code>$YUM0-$YUM9</code>:自定义变量<br>实例:</p><pre><code>http://server/centos/$releasever/$basearch/ http://server/centos/7/x86_64 http://server/centos/6/i384</code></pre><h2 id="实验基于httpd搭建的yum服务器："><a href="#实验基于httpd搭建的yum服务器：" class="headerlink" title="实验基于httpd搭建的yum服务器："></a>实验基于httpd搭建的yum服务器：</h2><pre><code>yum install -y httpdmkdir -pv centos/{6,7}/os/x86_64 html/└── centos    ├── 6    │   └── os    │       └── x86_64    └── 7        └── os            └── x86_64                ├── EFI                │   └── BOOT                │       └── fonts                ├── images                │   └── pxeboot                ├── isolinux                ├── LiveOS                ├── Packages                └── repodatamount /dev/sr0 html/centos/7/os/x86_64/[base]name=Centos\#baseurl=file:///run/media/pan/CentOS\ 7\ x86_64/baseurl=http://192.168.134.138/centos/$releasever/os/$basearchgpgcheck=0</code></pre><h2 id="yum-调用文件路径："><a href="#yum-调用文件路径：" class="headerlink" title="yum 调用文件路径：`"></a>yum 调用文件路径：<code>`</code></h2><p>mirrorlist=<a href="http://192.168.134.138/list.txt" target="_blank" rel="noopener">http://192.168.134.138/list.txt</a><br>[root@centos7 html]# ls<br>centos  list.txt<br>[root@centos7 html]# cat list.txt<br>file:///var/www/html/centos/7/os/x86_64<br>baseurl=<a href="http://192.168.134.138/centos/$releasever/os/$basearch```" target="_blank" rel="noopener">http://192.168.134.138/centos/$releasever/os/$basearch```</a></p><h2 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h2><pre><code>yum groupinstall &quot;development tools&quot;tar xf cmatrix-1.2a.tar.gzcd cmatrix-1.2a./configure --prefix=/app/cmatrixmake &amp;&amp; make installyum install -y ncurses-devel(缺的包)make &amp;&amp; make installcd /app/cmtrix/bin./cmatrix 写入PATHecho &#39;PATH=/app/httpd/bin:$PATH&#39; &gt; /etc/profile.d/httpd.sh. /etc/profile.d/httpd.sh</code></pre><h1 id="centos7-支持神奇目录："><a href="#centos7-支持神奇目录：" class="headerlink" title="centos7:支持神奇目录："></a>centos7:支持神奇目录：</h1><p><code>rpm -q autofs</code><br><code>systemctl enabled autofs</code><br><code>systemctl start autofs</code></p><p><div class="alert alert-warning"><i class="fa fa-bell"></i><br>建立仓库元数据：createrepo /data/repodb<br>yum仓库必须要仓库元数据才能使用</div>.</p><h1 id="centos-防火墙"><a href="#centos-防火墙" class="headerlink" title="centos 防火墙"></a>centos 防火墙</h1><p>cnetos7:<br>下次开机不启用 <code>systemctl disable firewalld</code><br>现在马上关掉：<code>systemctl stop firewalld</code></p><p>centos6:<br><code>chkconfig iptables off</code><br><code>service iptables stop</code></p><p><script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/highlight.min.js"></script></p><p><script>hljs.initHighlightingOnLoad();</script></p><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.8/styles/an-old-hope.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;FZShuTi&quot;&gt;linux 培训的笔记 &lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="command" scheme="http://yoursite.com/tags/command/"/>
    
  </entry>
  
</feed>
