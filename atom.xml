<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tiger-ghost</title>
  
  <subtitle>This is a memory</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-10T07:41:49.211Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>panxiaohu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>技巧集合</title>
    <link href="http://yoursite.com/2019/04/29/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2019/04/29/小技巧/</id>
    <published>2019-04-29T03:16:03.000Z</published>
    <updated>2019-05-10T07:41:49.211Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="KaiTi">linux 小技巧 </font></center><br><a id="more"></a></p><h1 id="simple-command"><a href="#simple-command" class="headerlink" title="simple command"></a>simple command</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">uname -a              # 查看Linux内核版本信息</span><br><span class="line">cat /proc/version     # 查看内核版本</span><br><span class="line">cat /etc/issue        # 查看系统版本</span><br><span class="line">lsb_release -a        # 查看系统版本  需安装 centos-release</span><br><span class="line">locale -a             # 列出所有语系</span><br><span class="line">locale                # 当前环境变量中所有编码</span><br><span class="line">hwclock               # 查看时间</span><br><span class="line">who                   # 当前在线用户</span><br><span class="line">w                     # 当前在线用户</span><br><span class="line">whoami                # 查看当前用户名</span><br><span class="line">logname               # 查看初始登陆用户名</span><br><span class="line">uptime                # 查看服务器启动时间</span><br><span class="line">sar -n DEV 1 10       # 查看网卡网速流量</span><br><span class="line">dmesg                 # 显示开机信息</span><br><span class="line">lsmod                 # 查看内核模块</span><br></pre></td></tr></table></figure><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><div class="alert alert-info"><i class=""></i><font color="black"><center>sed 执行系统命令。查找当前目录以及子目录中以 “.sh”,并改为以”.shell”结尾。</center></font><code>find ./a -type f  -regex &quot;.*/.sh$&quot; | sed -r -n &#39;s#(.*\.)sh$#mv &amp; \1shell#e&#39;</code> <font color="red"><br>-regex</font>: 使用正则表达式<br><code>&quot;.*/.sh$&quot;</code> <font size="4">给出的正则表达式必须要匹配完整的文件路径,比如：<code>find / -regex &quot;find&quot;</code> 这样子是找不到/usr/bin/find的，要像这样<code>find / -regex &quot;.*find&quot;</code>或者更精确一点<code>find / -regex &quot;.*/find&quot;</code></font> <font color="red"><br>&amp;</font>: 匹配前面找到的内容 <font color="red"><br>e</font>: 末尾的e表示<font color="red"># #这里允许执行命令然后得到结果#</font>,也就是<code>mv 前面匹配到的.sh文件 任意内容.shell</code><br></div><h2 id="Bash中-的用法和变量的间接引用"><a href="#Bash中-的用法和变量的间接引用" class="headerlink" title="Bash中${}的用法和变量的间接引用"></a>Bash中${}的用法和变量的间接引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&#123;STR^^&#125;, 把STR中的所有小写字母转换为大写输出(不改变值)</span><br><span class="line">[root@junun ~]# str=abcde</span><br><span class="line">[root@junun ~]# echo $&#123;str^^&#125;</span><br><span class="line">ABCDE</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&#123;STR,,&#125;, 把STR中的所有大写字母转换为小写输出(不改变值)</span><br><span class="line">[root@junun ~]# str1=ABCDE</span><br><span class="line">[root@junun ~]# echo $&#123;str1,,&#125;</span><br><span class="line">abcde</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;KaiTi&quot;&gt;linux 小技巧 &lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="Document" scheme="http://yoursite.com/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>ghost</title>
    <link href="http://yoursite.com/2018/08/28/%E5%89%8D%E8%A8%80/"/>
    <id>http://yoursite.com/2018/08/28/前言/</id>
    <published>2018-08-28T09:28:03.000Z</published>
    <updated>2019-05-07T07:20:10.083Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="KaiTi"><font size="5">As long as it starts it will not end！</font></font></center><br><a id="more"></a></p><style type="text/css"> body{background-image:url(https://ws1.sinaimg.cn/large/005RRiqRly1fvw1bz9he2j33dc28w4qu.jpg);background-position:center;           background-repeat:repeat-y；}</style><h1 id="魔术"><a href="#魔术" class="headerlink" title="魔术"></a>魔术</h1><p><center><font size="2">剪辑届 “巫男” 的创意新作《魔术》本文作分享，请勿用于商业用途。</font></center><video playsinline="" webkit-playsinline="" preload="auto" controls src="https://cdn-video.xinpianchang.com/5bbebf46c2b87.mp4 " width="100%"></video></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;KaiTi&quot;&gt;&lt;font size=&quot;5&quot;&gt;As long as it starts it will not end！&lt;/font&gt;&lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>style</title>
    <link href="http://yoursite.com/2018/08/28/%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/08/28/样式/</id>
    <published>2018-08-28T09:28:03.000Z</published>
    <updated>2019-05-07T09:18:53.075Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="KaiTi">本文章写作样式 </font></center><br><a id="more"></a></p><h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><p id="div-border-left-red">且不问结果如何，尽自己之所能，积极的面对。</p><br><div class="note default"><p>Content (md partial supported) </p></div><br><br><span id="inline-blue"> 站点配置文件 </span><br><span id="inline-purple"> 主题配置文件 </span><br><span id="inline-yellow"> 站点配置文件 </span><br><span id="inline-green"> 主题配置文件 </span><br><br><a id="download" href="https://git-scm.com/download/win" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span> </a><br><p id="div-border-left-red">如果没有安装成功，那可能就是墙的原因。建议下载 <code>Node.js</code> 直接安装。</p><br><p id="div-border-top-blue">关于更多基本操作和基础知识，请查阅 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 与 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a> 官方文档.</p><a class="btn" href="https://reishin.me" target="_blank" rel="noopener"><i class="fa fa-home fa-fw"></i>点击访问博客</a><blockquote class="blockquote-center"><p>居中引用</p></blockquote><p><span id="inline-toc">1.数字块定义</span></p><p><i class="fa fa-pencil"></i><br><i class="fa fa-github fa-2x"></i></p><p><i class="fa fa-quora fa-2x"></i></p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i>5.命令历史相关环境变量</div><br><div class="alert alert-info"><i class="fa fa-info"></i> 本文旨在介绍样式的使用规则。</div><br><div class="alert alert-warning"><i class="fa fa-bell"></i> 本文旨在介绍样式的使用规则。</div><br><div class="alert alert-danger"><i class="fa fa-bug"></i> 本文旨在介绍样式的使用规则。</div><p><a id="tube" href="https://www.youtube.com/watch?v=Gl23T9aOfoE" target="_blank" rel="noopener"><i class="fa fa-youtube-play"></i><span> GA17 </span><a id="tube" href="https://www.youtube.com/watch?v=Gl23T9aOfoE" target="_blank" rel="noopener"><i class="fa fa-bug"></i><span> YouTube </span></a></a></p><p><a id="download" href="https://holyghost.me" target="_blank" rel="noopener"><i class="fa fa-bug"></i><span> ghost.me</span> </a><br><blockquote class="blockquote-center"><p>I heard the echo, <span class="label default">from the valleys and the heart</span><br>Open to the lonely soul of <span class="label info">sickle harvesting</span><br>Repeat outrightly, but also repeat the well-being of<br>Eventually <span class="label warning">swaying in the desert oasis</span><br><span class="label success">I believe</span> I am<br><span class="label primary">Born as the bright summer flowers</span><br>Do not withered undefeated fiery demon rule<br>Heart rate and breathing to bear <span class="label danger">the load of the cumbersome</span><br>Bored</p></blockquote></p><div class="tabs" id="ga17"><ul class="nav-tabs"><li class="tab active"><a href="#ga17-1">GA17 1</a></li><li class="tab"><a href="#ga17-2">GA17 2</a></li><li class="tab"><a href="#ga17-3">GA17 3</a></li><li class="tab"><a href="#ga17-4">GA17 4</a></li></ul><div class="tab-content"><div class="tab-pane active" id="ga17-1"><p><strong>你是谁，你来自哪里</strong></p></div><div class="tab-pane" id="ga17-2"><p><strong>我是一个怪物，<code>来自我也不知道的地方</code></strong></p></div><div class="tab-pane" id="ga17-3"><p><strong><em>f</em></strong></p></div><div class="tab-pane" id="ga17-4"><p><strong>你觉得你死了，还有有人记得你吗</strong></p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;KaiTi&quot;&gt;本文章写作样式 &lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="write" scheme="http://yoursite.com/categories/write/"/>
    
    
      <category term="note" scheme="http://yoursite.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2018/08/28/%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>http://yoursite.com/2018/08/28/练习题/</id>
    <published>2018-08-28T09:28:03.000Z</published>
    <updated>2019-05-07T09:18:54.497Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="KaiTi">题目归档</font></center><br><a id="more"></a></p><h1 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h1><ol><li><p>描述linux目录结构以及目录结构命名规定<br>所有的目录都是按照一定的类别有规律的组织和命名的.FHS（目录层次结构）是Linux的目录规范标准.不要使用特殊字符来命令目录名。和glob字符或许会有冲突<br>FHS（目录层次结构）: <a href="http://www.pathname.com/fhs/" target="_blank" rel="noopener">http://www.pathname.com/fhs/</a><br>总结流程图:<a href="http://naotu.baidu.com/file/90bbd454b261551260c4e75ca6564f0d" target="_blank" rel="noopener">http://naotu.baidu.com/file/90bbd454b261551260c4e75ca6564f0d</a></p></li><li><p>显示/etc目录下，所有以.d结尾的文件或目录<br><code>ls -d /etc/*.d</code> <font color="red">-d</font> 只显示当前文件夹</p></li><li><p>显示/etc目录下，所有.conf结尾，且以m,n,r,p开头的文件或目录<br><code>ls /etc/[mnrp]*.conf</code></p></li><li><p>创建/app/rootdir目录，并复制/root下所有文件到该目录内， 要求保留原有权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 /]# mkdir -p /app/rootdir</span><br><span class="line">[root@centos7 /]# cp -a /root/ !$</span><br><span class="line">cp -a /root/ /app/rootdir</span><br><span class="line">[root@centos7 /]# ls /app/rootdir/</span><br><span class="line">root</span><br></pre></td></tr></table></figure></li><li><p>使用命令行展开功能，创建/tmp/a1, /tmp/a2, /tmp/a1/a, /tmp/a1/b，在/tmp目录下创建目录：x_y, x_z, q_y, q_z<br><code>mkdir {x,q}_{y,z}</code></p></li><li><p>总结用户、用户组管理命令并演示命令以及常见用法<br>useradd 创建用户 <font color="red"> <a href="http://holyghost.me/2018/08/28/linux%20command/" target="_blank" rel="noopener">http://holyghost.me/2018/08/28/linux%20command/</a><br>-u</font> 指定UID <font color="red"><br>-g</font> 指定所属组或gid <font color="red"><br>-c</font> “文字” 用户的注释信息 <font color="red"><br>-d</font> 指定家目录 <font color="red"><br>-s</font> 指定用户的默认登录的shell,可用列表在/etc/shells文件中 <font color="red"><br>-G</font> 指定用户的附加组，要先创建<br><code>useradd -u 678 -g pan -c &quot;测试&quot; -d /data -s /bin/sh aaa</code><br>userdel -r username 删除用户及所属的家目录和邮件<br>groups username 显示linux用户所属的组<br>groupadd groupname 创建组<br><code>usermod -g root username</code>将用户username的组修改为root组<br><code>usermod -a -G</code>-a -G 无限增加到附加组，可拥有多个附加组.将a1添加附加组user3 usermod -a -G user3 a1</p><pre>某一用户拥有多个附加组之后，使用usemod -G会修改附加组，则多个组消失掉变成唯一当前修改的附加组</pre></li><li><p>文件权限，属主属组管理命令有哪些，并演示命令以及用法<br>chmod 更改文件权限：<code>chmod 777 a</code>  <a href="http://holyghost.me/2018/08/28/linux%20command/" target="_blank" rel="noopener">http://holyghost.me/2018/08/28/linux%20command/</a><br>chown 更改文件拥有者和所属组：<code>chown USER:GROUP 对象</code>  <code>chown USER 对象</code>　<code>chown :group 对象</code><br>chgrp 改变文件或目录所属的组: chgrp - R book /opt/local /book 改变/opt/local /book/及其子目录下的所有文件的属组为book</p></li><li>创建用户gentoo，附加组为bin和root，默认shell为/bin/csh，注释信息为 “Gentoo Distribution”<br><code>useradd  -G bin,root -s /bin/sh -c &quot;Gentoo Distribution&quot;  gentoo</code></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;KaiTi&quot;&gt;题目归档&lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="write" scheme="http://yoursite.com/categories/write/"/>
    
    
      <category term="note" scheme="http://yoursite.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>document</title>
    <link href="http://yoursite.com/2018/08/28/document/"/>
    <id>http://yoursite.com/2018/08/28/document/</id>
    <published>2018-08-28T09:28:03.000Z</published>
    <updated>2019-05-06T06:09:07.983Z</updated>
    
    <content type="html"><![CDATA[<center><font face="FZShuTi">Linux 文档</font></center><a id="more"></a><h1 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h1><h2 id="etc-passwd-用户信息文件"><a href="#etc-passwd-用户信息文件" class="headerlink" title="/etc/passwd:用户信息文件"></a>/etc/passwd:用户信息文件</h2><p><strong><code>user1:x:500:500::/home/user1:/bin/bash</code></strong><br>第一字段:用户名称；<br>第二字段:密码标志；<br>第三字段:UID(用户ID)；<br>　0：超级用户；<br>　1-499：系统用户(伪用户)；<br>　500-65535:普通用户；<br>第4字段：GID(用户初始组ID)<br>第5字段：用户说明<br>第6字段：家目录<br>　普通用户：/home/用户名/<br>　超级用户：/root/<br>第7字段：登录之后的Shell  </p><h2 id="影子文件-etc-shadow"><a href="#影子文件-etc-shadow" class="headerlink" title="影子文件:/etc/shadow"></a>影子文件:<font color="blue">/etc/shadow</font></h2><p>第1字段：用户名<br>第2字符：加密密码<br>　加密算法升级为SHA512散列加密算法<br>　如果密码位是“ ！”或“ * ”代表没有密码，不能登录。<br>第3字段：密码最后一次修改日期：使用1970年1月1号作为标准时间，每过一天时间戳加1。<br>第4字段：两次密码的修改间隔时间(和第3字段相比)间隔多少时间后才可以修改密码。<br>第5字段：密码有效期(和第3字段相比)<br>第6字段：密码修改到期前的警告天数(和第5字段相比)<br>第7字段：密码过期后的宽限天数(和第5字段相比)<br>　0：代表密码过期后立即失效。<br>　-1：则代表密码永远不会失效。<br>第8字段：账号失效时间，要用时间戳表示<br>第9字段：保留<br>把时间戳换算为日期：<br><code>date -d &quot;1970-01-01 17740 days&quot;</code><br>把日期换算为时间戳：<br><code>echo $(($(date --date=&quot;2018/07/28&quot; +%s)/86400+1))</code></p><h2 id="组信息文件-etc-group"><a href="#组信息文件-etc-group" class="headerlink" title="组信息文件/etc/group"></a>组信息文件/etc/group</h2><p>第一字段：组名<br>第二字段：组密码标志<br>第三字段：GID<br>第四字段：组中附加用户  </p><h2 id="组密码文件-etc-gshadow"><a href="#组密码文件-etc-gshadow" class="headerlink" title="组密码文件/etc/gshadow"></a>组密码文件/etc/gshadow</h2><p>第一字段：组名<br>第二字段：组密码<br>第三字段：组管理员用户名<br>第四字段：组中附加用户  </p><h2 id="用户的家目录"><a href="#用户的家目录" class="headerlink" title="用户的家目录"></a>用户的家目录</h2><ol><li>普通用户：/home/用户名/,所有者和所属者都是此用户，权限是700  </li><li>超级用户：/root/,所有者和所属者都是root用户，权限是550。  </li><li>用户的邮箱：/var/spool/mail/用户名/  </li><li>用户模板目录：/etc/skel:创建用户时，用户的家目录会自动创建一些隐藏文件，这些文件是从<font color="blue">/etc/skel/</font> 过去的。想要每个新添加用户时家目录自动出现共享文件可在此目录添加。</li></ol><h1 id="linux的特殊权限"><a href="#linux的特殊权限" class="headerlink" title="linux的特殊权限"></a>linux的特殊权限</h1><p>特殊权限：<font color="red"> SUID,SGID,STICKY </font><br>1.进程以某用户的身份运行；进程是发起此进程用户的代理，因此以此用户的身份和权限完成所有操作；<br>2.权限匹配模型：<br>(1)判断进程的属主，是否为被访问的文件属<font color="red"> 主 </font>；如果是，则应用属主的权限；否则进入第2步；<br>(2)判断进程的属主，是否属于被访问的文件属<font color="red"> 组 </font>；如果是，则应用属组的权限；否则进入第3步;<br>(3)应用other的权限；</p><h2 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h2><p>SetUID的功能:<table><tr><td style="background-image:url(https://ws1.sinaimg.cn/large/005Kjut6gy1frtsfwbtjdg30p00cinpd.jpg)"><font color="red"><br><strong>1、只有可以执行的二进制程序才能设定SUID权限。<br>2、命令执行者要对该程序拥有X(执行)权限<br>3、命令执行者在执行该程序时获得该程序文件属主的身份<br>4、SetUID权限只在该程序执行过程中有效，也就是说身份改变只在程序执行过程中有效。</strong></font></td></tr></table>  <font color="red"><br>SUID </font>:默认情况下:用户发起的进程，进程的属主是其发起者；因此，其以发起者的身份运行；  <font color="red"><br>SUID </font>的功用：用户运行某程序时，如果此程序拥有SUID的权限，那么程序运行为进程时，进程的属主不是发起者，而程序文件自己的属主;<br>管理文件的SUID权限：   <font color="red"><br>chmod u+|-s FILe </font><br>展示位置：属主的执行权限位。  <font color="blue"><font color="lime"><br>#</font>chomod <strong><font color="red">4</font></strong></font>644 filename<br>取消suid权限：<font color="lime">#</font>chmod 644 filename<font color="red"> 大写S为报错,检查是否有x权限</font>.</p><h2 id="SGID"><a href="#SGID" class="headerlink" title="SGID"></a>SGID</h2><p><table><tr><td bgcolor="#778899"><font color="red">用户在执行程序时候，组身份变为该程序文件的属组与SUID类似。</font><br></td></tr></table> 管理文件的<font color="#FF1493"> SGID </font> 的权限：    <font color="red"><br>chmod g+|-s FILE </font> <font color="#FF1493"><br>SGID </font>:  功用：当目录属组有写的权限，且SGID权限时，当你给一个目录添加了sgid之后，后面不管谁来这个目录下创建文件，文件的所属组都会继承目录的所属组<br>展示位置：属组的执行权限位<br>如果属组原本有执行权限，则显示为小写s;否则，显示为大写S;    <font size="5">  <font color="blue"><font color="lime"><br>#</font>ll /usr/bin/locate  <font color="lime"><br>#</font>ll /var/lib/mlocate/mlocate.db</font><br><img src="https://ws1.sinaimg.cn/large/005RRiqRly1fu69jv3zkqj30mm0d8tac.jpg" alt=""></font></p><h2 id="STICKY"><a href="#STICKY" class="headerlink" title="STICKY"></a>STICKY</h2><p><table><tr><td style="background-image:url(https://ws1.sinaimg.cn/large/005Kjut6gy1frtsfwbtjdg30p00cinpd.jpg)"><br> <img src="https://ws1.sinaimg.cn/large/005RRiqRly1fu6b4yptk4j30mv0dn0uq.jpg" alt=""><br> <font color="red"> <strong>sticky</strong> </font><font color="white">:t权限只能给目录添加，当你给一个目录添加了t权限之后，后面所有人在这个目录下不能删除其他人的文件,只能删除自己的文件；<br> 管理文件的Sticky权限：<font color="red"> chmod o+|-t FILE</font><br> 展示位置：其他用户的执行权限位<br> 如果其他用户原本有执行权限，显示为小写t;否则为大写T。<br> 系统上的/tmp和/var/tmp目录下默认均有Sticky权限<br> <img src="https://ws1.sinaimg.cn/large/005RRiqRly1fvpljquenhj30fh0gz3zp.jpg" alt="">基于八进制方式赋权时，可于默认的三位八进制数字左侧再加一位八进制数字；  <font color="blue"><br><code>chmod 1777 中的 1 表示特殊权限</code> </font></font><br> </td></tr></table>.</p><h1 id="facl"><a href="#facl" class="headerlink" title="facl"></a>facl</h1><p>facl:file access control lists 文件访问控制列表<br>文件的额外赋权机制：在原有的u,g,o之外，另一层让普通用户控制赋权给另外的用户或组的赋权机制；<br>查看分区ACL权限是否开启<br><code>dumpe2fs -h /dev/sda3</code><br>dumpe2fs命令是查询指定分区详细文件系统信息的命令.选项：  <font color="red"><br>-h</font> 仅显示超级块中的信息，而不显示磁盘块组的详细信息  <font color="#FF6347"><br>临时开启分区ACL权限：</font>  <code>mount -o remount,acl /</code> 重新挂载根分区，并挂载加入acl权限。  <font color="#FF6347"><br>永久开启分区ACL权限</font><font color="lime">#</font>vi /etc/fstab<br><strong><pre>  UUID=c2ca6f57-b15c-43ea-bca0-f239083d8bd2 / ext4 dufaults,acl 1 1  　      加入ACL</pre></strong><br><code>mount -o remount /</code>:重新挂载文件系统或重启动系统，使修改生效。<br><code>getfacl filename</code>:查看文件额外的权限<br>setfacl命令：<font color="blue"> setfacl -m u:username:rw filename </font><br>赋权给用户：<font color="red"> setfacl -m u:USERNAME:MODE file </font><br>赋权给组：<font color="red"> serfacl -m g:GROUPNAME:MODE file </font>   <font color="#FF1493"><br>    撤销赋权:serfacl -x u:USERNAME file<br>　　　　serfacl -x g:USERNAME file  </font><br>递归ACL权限：<font color="lime">#</font>setfacl -m u:用户名:权限 -R 目录名  <table><tr><td bgcolor="#20B2AA"><font color="black">默认ACL权限:默认acl权限的作用是如果给父目录设定了默认的ACL权限，那么父目录中所有新建的子文件都会继承父目录ACL的权限。<font color="red"><font color="lime">#</font>setfacl -m d:u:用户名:权限 文件名</font></font></td></tr></table><img src="https://ws1.sinaimg.cn/large/005RRiqRly1ftyzym1ewvj30wt0adgpe.jpg" alt="">  setfacl 选项 文件名<br>选项：   <font color="red"><br>-m</font> :设定ACL权限  <font color="red"><br>-x</font> :删除指定的ACL权限  <font color="red"><br>-b</font> :删除文件<font color="red">所有</font>的ACL权限  <font color="red"><br>-d</font> :设定默认ACL权限  <font color="red"><br>-k</font> :删除默认ACL权限  <font color="red"><br>-R</font> :递归设定ACL权限  <font color="#FF6347">最大有效权限mask</font><br>mask是用来指定最大有效权限的。如果我给用户赋予了ACL权限，是需要和mask的权限”相与”才能得到用户的真正权限。  </p><table><thead><tr><th>A</th><th style="text-align:center">B</th><th>and</th></tr></thead><tbody><tr><td><strong>r</strong></td><td style="text-align:center"><strong>r</strong></td><td><strong>r</strong></td></tr><tr><td><strong>r</strong></td><td style="text-align:center"><strong>-</strong></td><td><strong>-</strong></td></tr><tr><td><strong>-</strong></td><td style="text-align:center"><strong>r</strong></td><td><strong>-</strong></td></tr><tr><td><strong>-</strong></td><td style="text-align:center"><strong>-</strong></td><td><strong>-</strong></td></tr></tbody></table><p>修改最大有效权限：<font color="lime">#</font>setfacl -m m:rx filename 设定mask权限为r-x。使用“m:权限”格式。</p><p><table><tr><td bgcolor="RED"><font color="black">  mask值只能添加ACL权限之后后期更改，当更改mask值以后再添加ACL权限，mask值就会变为777</font></td></tr></table>.  </p><h1 id="文件系统属性chattr权限"><a href="#文件系统属性chattr权限" class="headerlink" title="文件系统属性chattr权限"></a>文件系统属性chattr权限</h1><p><font color="lime">#</font>chattr [+-=] [选项] 文件或目录名<br>+：增加权限<br>-：删除权限<br>=：等于权限<br> 选项：<table><tr><td style="background-image:url(https://ws1.sinaimg.cn/large/005RRiqRly1fvklq1wjadj30go0aft8l.jpg)"><font color="red">-i:</font><font color="#008B8B">如果对文件设置i属性，那么不允许对文件进行删除、改名，也不能添加和修改数据；如果对目录设置i属性，那么只能修改目录下文件的数据还可以cp，但不允许建立和删除文件  <font color="red"><br> -a:</font>如果对文件设置a属性，那么只能在文件中增加数据(只能用echo增加数据，不能用vim)，但是不能删除也不能修改数据；如果对目录设置a属性，那么只允许在目录中建立和修改文件，但是不允许删除。</font></td></tr></table><code>chattr +i a.txt</code><br><code>lsattr -a a.txt</code><br><code>----i--------e- a.txt</code>　　 e:代表此文件在ext4文件系统下建立的。<br>查看文件系统属性：<br>lsattr 选项 文件名  <font color="red"><br>-a</font>显示所有文件和目录  <font color="red"><br>-d</font>若目标是目录，仅列出目录本身的属性，而不是子文件。</p><h1 id="sudo权限"><a href="#sudo权限" class="headerlink" title="sudo权限"></a>sudo权限</h1><p>root把本来只能超级用户执行的命令赋予普通用户执行。<br>sudo的操作对象是系统命令  <font color=""><br>whereis 命令 查看命令的绝对路径<br><code>visudo</code>  实际修改的是/etc/sudoers文件<br>root 　ALL=(ALL)　　　ALL<br>用户名　 被管理主机的地址=(可使用的身份)　 授权命令(绝对路径)  <font color="red"><br>被管理的主机地址可写成主机ip和ALL</font><br>%wheel　 ALL=(ALL) 　ALL<br>组名　 　被管理的主机地址=(可使用的身份) 　授权命令(绝对路径)   <font color="blue"><br>root　 ALL=(ALL) 　　ALL<br>st　　192.168.81.137=/sbin/shutdown -r now  添加内容  <font color="red"><strike><br>st　　 ALL=/usr/bin/vim 危险操作</strike></font><br><code>su - st</code>:切换用户<br><code>sudo -l</code>:查看可用的sudo命令<br><code>sudo /sbin/shutdown -r now</code> 普通用户执行sudo赋予的命令</font></font></p><h1 id="linux下查看帮助命令"><a href="#linux下查看帮助命令" class="headerlink" title="linux下查看帮助命令"></a>linux下查看帮助命令</h1><p><font color="red"> whatis </font> :用于查询一个命令执行什么功能，并将查询结果打印到终端上<br><code>whatis ls</code>  <font color="red"><br>man</font> :Linux提供了丰富的帮助手册，当你需要查看某个命令的参数时不必到处上网查找，只要man一下即可 man command</p><h1 id="linux根目录结构和文件系统"><a href="#linux根目录结构和文件系统" class="headerlink" title="linux根目录结构和文件系统"></a>linux根目录结构和文件系统</h1><p>进程的类型：<br>　　终端:硬件设备，关联一个用户接口。<br>　　与终端相关:通过终端启动。<br>　　与终端无关:操作引导启动过程中自动启动<br>操作系统的组成:<br>　　静态:kernel,application<br>　　文件系统:层级结构<br>FHS:　　Filesystem Hierarchy Standard  <font color="blue"><br>　/bin</font>:所有用户可用的基本命令程序文件；  <font color="blue"><br>　/sbin</font>:供系统管理使用的工具程序；  <font color="blue"><br>　/boot</font>:引导加载器必须用到的各种静态文件：Kernel,initramfs(initrd),grub等；  <font color="blue"><br>　/dev</font>:存储特殊文件或设备文件；<br>　　　设备有两种类型：字符设备(线性设备)、块设备(随机设备)；  <font color="blue"><br>　/etc</font>:系统程序的配置文件，只能为静态：  <font color="blue"><br>　/home</font>：普通的家目录的集中位置：一般每个普通用户的家目录默认为此目录下与用户名同名的子目录，/home/USERNAME；  <font color="blue"><br>　/lib</font>:为系统启动或根文件系统上的应用程序（/bin,/sbin）等提供共享库，以及为内核提供内核模块  <font color="red"><br>　　<strong>libc.so.*</strong></font>:动态链接的C库；  <font color="red"><br>　　<strong>ld*</strong></font>:运行时链接器/加载器；<br>　　　modules:用于存储内核模块的目录；  <font color="blue"><br>　/lib64</font>:64位系统特有的存放64位共享的路径；  <font color="blue"><br>　/media</font>:便携式设备挂载点，cdrom,floppy等；  <font color="blue"><br>　/mnt</font>:其他文件系统的临时挂载点；  <font color="blue"><br>　/opt</font>：附加应用程序的安装位置：可选路径；  <font color="blue"><br>　/srv</font>:当前主机为服务提供的数据；  <font color="blue"><br>　/tmp</font>:为那些会产生临时文件的程序提供的用于临时文件的目录：可供所用户执行写入操作：有特殊权限；  <font color="blue"><br>　/usr</font>:usr Hierarchy,全局共享的只读数据路径：<br>　　　bin,lib64<br>　　　include:C程序头文件；<br>　　　share:命令手册页和自带文档等架构特有的文件的存储位置<br>　　　local:另一个层级目录；<br>　　　X11R6:X-widow程序的安装位置<br>　　　src:程序源代码文件的存储位置</p><h1 id="多命令顺序执行"><a href="#多命令顺序执行" class="headerlink" title="多命令顺序执行"></a>多命令顺序执行</h1><p><table><tr><th>多命令执行符</th><th>格式</th><th>作用</th></tr><tr><td><strong>&amp;&amp;</strong></td><td>命令1 &amp;&amp; 命令2</td><td>逻辑与,当命令1正确执行,则命令2才会执行。当命令1执行不正确,则命令2不会执行</td></tr><tr><td><strong>||</strong></td><td>命令1 || 命令2</td><td>逻辑或,当命令1执行不正确,则命令才会执行。当命令1正确执行,则命令2不会执行</td></tr></table></p><h1 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h1><p><table><tr><th>通配符</th><th>作用</th></tr><tr><td><strong>?</strong></td><td>匹配一个任意字符</td></tr><tr><td><strong>*</strong></td><td>匹配0个或任意多个字符，也就是可以匹配任何内容</td></tr><tr><td>[]</td><td>匹配括号中任意一个字符。例如：[abc]代表一定匹配一个字符，或者a,或者b,或者c。</td></tr><tr><td>[^]</td><td>逻辑非，表示不匹配中括号内的任意一个字符。例如:[^0-9]代表匹配一个不是数字的字符。</td></tr></table></p><h2 id="Bash中其他特殊符号"><a href="#Bash中其他特殊符号" class="headerlink" title="Bash中其他特殊符号"></a>Bash中其他特殊符号</h2><p> <table><tr><th>符号</th><th>作用</th></tr><tr><td><code>&#39;&#39;</code></td><td>单引号。在单引号中所有的特殊符号，如<code>$</code>,<font color="red"><font size="5"><strong>`</strong>(反引号)</font></font>都没有特殊含义。</td></tr><tr><td><code>&quot;&quot;</code></td><td>双引号。在双引号中特殊符号都没有特殊含义，但是<code>$</code>,和<code>\</code>是例外,拥有<code>&quot;调用变量的值&quot;</code> <font color="red"><font size="5">`反引号</font></font>引用命令,和<code>&quot;转义符&quot;的特殊含义&quot;</code></td></tr><tr><td><font color="red"><font size="5">``</font></font></td><td>反引号。反引号括起来的内容是系统命令，在Bash中会先执行它。和$()作用一样，不过推荐使用$()，因为反引号非常容易看错。</td></tr><tr><td><code>$()</code></td><td>和反引号作用一样，用来引用系统命令。</td></tr><tr><td><code>#</code></td><td>在shell脚本中，#开头的行代表注释。</td></tr><tr><td><code>$</code></td><td>用于调用变量的值,如需要调用变量name的值时，需要用$name的方式得到变量的值时，需要用$name的方式得到变量的值。</td></tr><tr><td><code>\</code></td><td>转义符,跟在\之后的特殊符号将失去特殊含义，变为普通字符。如\$将输出<code>$</code>符号，而不当做是变量引用。</td></tr></table>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger ~]# name=test  </span><br><span class="line">[root@Tiger ~]# echo &apos;$name&apos;  </span><br><span class="line">$name  </span><br><span class="line">[root@Tiger ~]# echo &quot;$name&quot;  </span><br><span class="line">test</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger ~]# abc=`date`  </span><br><span class="line">[root@Tiger ~]# echo `date`  </span><br><span class="line">2018年 09月 09日 星期日 13:10:57 CST  </span><br><span class="line">[root@Tiger ~]# echo $abc  </span><br><span class="line">2018年 09月 09日 星期日 13:10:49 CST</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger ~]# abc=$(date)   </span><br><span class="line">[root@Tiger ~]# echo $abc  </span><br><span class="line">2018年 09月 09日 星期日 13:12:44 CST  </span><br><span class="line">[root@Tiger ~]# echo &quot;abc&quot;  </span><br><span class="line">abc</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger ~]# echo &quot;$abc&quot;  </span><br><span class="line">2018年 09月 09日 星期日 13:12:44 CST  </span><br><span class="line">反引号和$ #echo `ls`   </span><br><span class="line">#echo $(date)</span><br></pre></td></tr></table></figure><h1 id="Bash-变量"><a href="#Bash-变量" class="headerlink" title="Bash 变量"></a>Bash 变量</h1><p><table><tr><td style="background-image:url(https://ws1.sinaimg.cn/large/005RRiqRly1fvv4ilw3yug30dw0dtdo5.jpg)"><font size="3"><font face="FZYaoti">什么是变量：变量是计算机内存单元，其中存放的值可以改变。当Shell脚本需要保存一些信息时，如一个文件名或一个数字,就把它存放在一个变量中，每个变量有一个名字，所以很容易引用它，使用变量可以保存有用信息，使系统获知用户相关设置，变量也可以用于保存暂时信息。</font></font></td></tr></table>变量设置规则：<br>explanation  </p><ol><li>变量名称可以由字母、数字和下划线组成，但是不能以数字开头。如果变量名是”2name”则是错误的。  </li><li>在Bash中，变量的默认类型都是字符串型，如果要进行数值运算，则必修指定变量类型为数值型。  </li><li>变量用等号连接值，等号左右两侧不能有空格。  </li><li>变量的值如果有空格，需要使用单引号或双引号包括。  </li><li>在变量的值中，可以使用”\”转义符。  </li><li>如果需要增加变量的值，那么可以进行变量值的叠加，不过变量需要用双引号包含”$变量名”或用${变量名}包含。  </li><li>如果是把命令的结果作为变量值赋予变量，则需要使用反引号或$()包含命令。  </li><li>环境变量名建议大写，便于区分。<h2 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h2></li><li>用户自定义变量  </li><li>环境变量:这种变量中主要保存的是和系统操作环境相关的数据。 </li><li>位置参数变量:这种变量主要是用来向脚本当中传递参数或数据的，变量名不能自定义，变量作用是固定的。  </li><li>预定义变量:是Bash中已经定义好的变量，变量名不能自定义，变量作用也是固定好的。</li></ol><h2 id="本地变量"><a href="#本地变量" class="headerlink" title="本地变量"></a>本地变量</h2><p>变量定义：<font color="lime">#</font>name=<code>&quot;bianliang&quot;</code><br>变量叠加：  <font color="lime"><br>#</font>aa=123  <font color="lime"><br>#</font>aa=$aa456  <font color="lime"><br>#</font>aa=${aa}789<br>变量调用：<code>echo $name</code><br>变量查看：<code>set</code><br>变量删除：<code>&gt;unset name</code></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p><table><tr><td bgcolor="2f4f4f"><font color="ff4d40">环境变量是什么:用户自定义变量只在当前的Shell中生效，而环境变量会在当前Shell和这个Shell的所有子Shell当中生效。如果把环境变量写入相应的配置文件,那么这个环境变量就会在所有Shell中生效。</font></td></tr></table>  <font color="red"> pstree:查看进程数,查看当前shell</font><br>设置环境变量：export 变量名=变量值<br>申明变量:<br><code>env</code> :查询变量,专门查看环境变量。<code>set</code>:查看所有变量<br><code>unset 变量名</code> #删除变量  <font color="blue"><br>name=sc 本地变量<br>export age=18  环境变量<br>sex=man 本地变量。把已经定义好的本地变量变成环境变量，只需要：export sex<br></font></p><h2 id="系统常见环境变量"><a href="#系统常见环境变量" class="headerlink" title="系统常见环境变量"></a>系统常见环境变量</h2><p>PATH:系统查找命令的路径  <font color="lime"><br>#</font>echo $PATH<br>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin<br><strong>PATH变量叠加：<code>PATH=&quot;$PATH&quot;:/root/sh(脚本保存目录)</code></strong>  </p><h2 id="ps1-定义系统提示符的变量："><a href="#ps1-定义系统提示符的变量：" class="headerlink" title="ps1:定义系统提示符的变量："></a>ps1:定义系统提示符的变量：</h2><p>\d:显示日期，格式为”星期 月 日”<br>\h:显示简写主机名。如默认主机名”localhost”<br>\t:显示24小时制时间，格式为”HH:MM:SS”<br>\T:显示12小时制时间，格式为”HH:MM:SS”<br>\A:显示12小时制时间，格式为”HH:MM”<br>\u:显示当前用户名<br>\w:显示当前所在目录的完整名称<br>\W:显示当前所在目录的最后一个目录<br>#:执行的第几个命令<br>\$:提示符。如果为root用户会显示提示符为”#”,如果普通用户会显示提示符为”$”。<br>\@:时间 上下午 <font color="blue"><br><code>echo $PS1</code> :查看提示符<br>[root@Tiger ~]# <code>PS1=&#39;[\u@\t \w]\$ &#39;</code><font color="red">这里的空格生成以后,提示符后会有一个SPACE的距离。</font><br>[root@16:10:52 ~]#<code>cd /usr/local/src/</code><br>[root@16:11:08 /usr/local/src]#<br>　　　　　　　　　#PS1=<code>&#39;[\u@\@]\$&#39;</code><br>[root@04:13 下午]#PS1=<code>&#39;[\u@\@ \h]\$&#39;</code><br>[root@04:17 下午 Tiger]#PS1=<code>&#39;[\u \@@]\$&#39;</code><br>[root 04:18 下午@]#^<br></font></p><h2 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h2><p><table><tr><th>位置参数变量</th><th>作用</th></tr><tr><td>$n</td><td>n为数字,$0代表命令本身,$1-$9代表第一到第九个参数,十以上的参数需要用大括号包含,如${10}</td></tr><tr><td>$<em></em></td><td>这个变量代表命令行中所有的参数,$把所有的参数看成一个整体</td></tr><tr><td>$@</td><td>这个变量也代表命令行中所有的参数,不过$@把每个参数区别对待</td></tr><tr><td>$#</td><td>这个变量代表命令行中所有参数的个数</td></tr></table>位置参数变量的名称和作用是固定的，他是为了接受用户向程序传入不同的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim ceshi.sh    </span><br><span class="line">#!/bin/bash  </span><br><span class="line">echo $0</span><br><span class="line">echo $1</span><br><span class="line">echo $2</span><br><span class="line">echo $3 :wq</span><br><span class="line">chmod 755 ceshi.sh</span><br><span class="line">./ceshi.sh</span><br><span class="line">./ceshi.sh 输出结果是本身</span><br><span class="line"></span><br><span class="line">./ceshi.sh 11 22 33</span><br><span class="line">./ceshi.sh   输</span><br><span class="line">11   出</span><br><span class="line">22   接</span><br><span class="line">33   果</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">num1=$1</span><br><span class="line">num2=$2</span><br><span class="line">sum=$(($num1 + $num2)) //变量sum的和是num1加num2</span><br><span class="line">echo $sum //打印sum的值</span><br><span class="line">chmod 755 ceshi.sh</span><br><span class="line">./ceshi.sh 11 22</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo $#</span><br><span class="line">echo $*</span><br><span class="line">echo $@</span><br><span class="line">chmod 755 ceshi.sh</span><br><span class="line">./ceshi.sh 11 22 33 44 55 66   </span><br><span class="line">6 </span><br><span class="line">11 22 33 44 55 66</span><br><span class="line">11 22 33 44 55 66</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/005RRiqRly1fvw5je76t1j30te0h9acq.jpg" alt=""></p><h2 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h2><p><table><tr><th>预定义变量</th><th>作用</th></tr><tr><td>$?</td><td>最后一次执行的命令的返回状态，如果这个变量的值为0，证明上一个命令正确执行;如果这个变量的值非0(具体是哪个数，由命令自己来决定)，则证明上一个命令执行不正确了。</td></tr><tr><td>$$</td><td>当前进程的进程号(PID)</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的进程号(PID)/td&gt;</td></tr></table><br>在Linux里面输入一条命令正确执行以后，输入<font color="red">echo $?</font> ，默认输出<font color="red"> 0</font><br>当输出一条错误的命令以后，会系统报错，输入<font color="red">echo $?</font> ，默认输出 127</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;$$&quot;</span><br><span class="line"></span><br><span class="line">find /root -name hello.sh $    // $符号的作用是把程序放在后台</span><br><span class="line">echo &quot;$!&quot;</span><br><span class="line">chmod 755 ceshi.sh</span><br><span class="line">./ceshi.sh</span><br><span class="line">27888</span><br><span class="line">27888</span><br></pre></td></tr></table></figure><h2 id="接受键盘输入"><a href="#接受键盘输入" class="headerlink" title="接受键盘输入"></a>接受键盘输入</h2><p><code>read [选项][变量名]</code>  <font color="red"><br>-p<code>&quot;提示信息&quot;</code></font>:在等待read输入时,输出提示信息  <font color="red"><br>-t 秒数</font>:read命令会一直等待用户输入，使用此选项可以指定等待时间。  <font color="red"><br>-n 字符数</font>:read命令只接受指定的字符数，就会执行  <font color="red"><br>-s</font>:隐藏输入的数据，适用于机密信息输入。 <font color="blue"><br><img src="https://ws1.sinaimg.cn/large/005RRiqRly1fvw6gy4zbrj30tf0gun1h.jpg" alt=""> </font></p><h1 id="数值运算与运算符"><a href="#数值运算与运算符" class="headerlink" title="数值运算与运算符"></a>数值运算与运算符</h1><p>declare声明变量类型<br><code>declare [+/-][选项] 变量名</code>  <font color="red"><br><strong>-</strong></font>:给变量设定类型属性  <font color="red"><br><strong>+</strong></font>取消变量的类型属性  <font color="red"><br><strong>-i</strong></font>:将变量声明为整数型(integer)  <font color="red"><br><strong>-x</strong></font>:将变量声明为环境变量  <font color="red"><br><strong>-p</strong></font>:显示指定变量的被声明的类型<br>数值运算方法1:  <font color="lime"><br>[root@Tiger data]#</font>aa=11  <font color="lime"><br>[root@Tiger data]#</font>bb=22<br>给变量aa和bb赋值  <font color="lime"><br>[root@Tiger data]#</font>declare -i cc=$aa+$bb<br>方法2:expr或let数值运算工具  <font color="lime"><br>[root@Tiger data]#</font>aa=11<font color="lime"><br>[root@Tiger data]#</font>bb=22<br>给变量aa和变量bb赋值  <font color="lime"><br>[root@Tiger data]#</font>dd=$(expr $aa + $bb)<br>$dd的值是aa和bb的和,注意”+”号左右两侧必须有空格<br><strong>方法3:<code>$((运算式))</code>或<code>$[运算式]</code></strong>  <font color="blue"><br>aa=11<br>bb=22<br>gg=$(($aa+$bb))<br>ff=$[$aa+$bb]</font></p><h2 id="运算优先级-优先级从上到下"><a href="#运算优先级-优先级从上到下" class="headerlink" title="运算优先级 优先级从上到下"></a>运算优先级 优先级从上到下</h2><p><table><tr><th>优先级</th><th>运算符</th><th>说明</th></tr><tr><td>13</td><td>-，+</td><td>单目负,单目正</td></tr><tr><td>12</td><td>!，~</td><td>逻辑非，按位取反或补码</td></tr><tr><th>11</th><th>*，/，%</th><th>乘、除、取余</th></tr><tr><th>10</th><th>+，-</th><th>加、减</th></tr><tr><th>9</th><th>&lt;&lt;，&gt;&gt;</th><th>按位左移、按位右移</th></tr><tr><th>8</th><th>&lt;=，&gt;=，&lt;，&gt;</th><th>小于或等于、大于或等于、小于、大于</th></tr><tr><th>7</th><th>==，!==</th><th>等于、不等于</th></tr><tr><td>6</td><td>&amp;</td><td>按位与</td></tr><tr><th>5</th><th>^</th><th>按位异或</th></tr><tr><th>4</th><th>|</th><th>按位或</th></tr><tr><th>3</th><th>&amp;&amp;</th><th>逻辑与</th></tr><tr><th>2</th><th>||</th><th>逻辑或</th></tr><td>1</td><td>=，+=，-=， ，*=，/=，%=，&amp;=，^=，|=，&lt;&lt;=，&gt;&gt;=</td><td>赋值、运算且赋值</td></table>.</p><h2 id="变量测试与内容替换"><a href="#变量测试与内容替换" class="headerlink" title="变量测试与内容替换"></a>变量测试与内容替换</h2><p><img src="https://ws1.sinaimg.cn/large/005RRiqRly1fvbgd4xikrj30r70h0ahi.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger ~]# unset y</span><br><span class="line">[root@Tiger ~]# x=$&#123;y-new&#125;</span><br><span class="line">[root@Tiger ~]# echo $y</span><br><span class="line"></span><br><span class="line">[root@Tiger ~]# echo $x</span><br><span class="line">new</span><br><span class="line">[root@Tiger ~]# y=&quot;&quot;</span><br><span class="line">[root@Tiger ~]# x=$&#123;y-new&#125;</span><br><span class="line">[root@Tiger ~]# echo $x</span><br><span class="line"></span><br><span class="line">[root@Tiger ~]# y=old</span><br><span class="line">[root@Tiger ~]# x=$&#123;y-new&#125;</span><br><span class="line">[root@Tiger ~]# echo $x</span><br><span class="line">old</span><br><span class="line">[root@Tiger ~]#</span><br></pre></td></tr></table></figure><h1 id="环境变量配置文件"><a href="#环境变量配置文件" class="headerlink" title="环境变量配置文件"></a>环境变量配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source 配置文件</span><br></pre></td></tr></table></figure><p>或　　　　调用文件的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. 配置文件</span><br></pre></td></tr></table></figure></p><p>环境变量配置文件简介：<table><tr><td bgcolor="black"><font color="white">环境变量配置文件中主要是定义对系统的操作环境生效的系统默认环境变量，比如PATH,HISTSIZE,PS1,HOSTNAME等默认环境变量。</font></td></tr></table>环境变量配置文件:<br>①/etc/profile<br>②/etc/profile.d/*.sh   *是通配符，代表这个目录下所有以.sh结尾的文件。<br>③~/.bash_profile<br>④~/.bashrc<br>⑤/etc/bashrc<br>其中3个在/etc/下面的变量配置文件是对所有登录Linux用户生效。另外两个是用户家目录下的隐藏文件只对当前用户生效。<br><img src="https://ws1.sinaimg.cn/large/005RRiqRly1fvxo7rs5icj311x0oc40z.jpg" alt=""></p><h2 id="其他的配置文件和登录信息"><a href="#其他的配置文件和登录信息" class="headerlink" title="其他的配置文件和登录信息"></a>其他的配置文件和登录信息</h2><ol><li>注销时生效的环境变量配置文件：<br>~/.bash_logout :这个文件默认是空的，如果想要每次登录比如清空历史命令或者把自己的环境变量清空等，写入后，注销时他会自动执行</li><li>~/bash_history :保存的历史命令，但是有一些他还保存在内存当中，除非是手工写入<code>history -w</code>或者注销登录才会把内存中的命令转移到这个文件中去。</li><li>Shell登录信息 本地终端欢迎信息:<code>/etc/issue</code>只对本地登录有显示效果</li></ol><p><table><tr><th>转义符</th><th>作用</th></tr><tr><td>\d</td><td>显示当前系统日期</td></tr><tr><td>\s</td><td>显示操作系统名称</td></tr><tr><td>\l</td><td>显示登录的终端号,这个比较常用</td></tr><tr><td>\m</td><td>显示硬件体系结构,如i386、i686等</td></tr><tr><td>\n</td><td>显示主机名</td></tr><tr><td>\o</td><td>显示域名</td></tr><tr><td>\r</td><td>显示内核版本</td></tr><tr><td>\t</td><td>显示当前系统时间</td></tr><tr><td>\u</td><td>显示当前登录用户的序列号</td></tr></table><img src="https://ws1.sinaimg.cn/large/005RRiqRly1fvxpnbni1hj310f02z3yd.jpg" alt=""> <img src="https://ws1.sinaimg.cn/large/005RRiqRly1fvxpjnlcopj30ne027we9.jpg" alt=""><font color="red">远程终端欢迎信息:</font> /etc/issue.net (上图的转义符本文件不能使用,只能使用纯文本信息)<br>转义符在/etc/issue.net文件中不能使用<br>是否显示此欢迎信息,由ssh的配置文件 /etc/ssh/sshd_config决定，加入<code>&quot;Banner /etc/issue.net&quot;</code>行才能显示(记得重启SSH服务) <img src="https://ws1.sinaimg.cn/large/005RRiqRly1fvxq4io3wqj30z807711c.jpg" alt=""> <img src="https://ws1.sinaimg.cn/large/005RRiqRly1fvxq8rrhzzj30so03ot8t.jpg" alt=""></p><p><table><tr><td bgcolor="red"><strong>登录后显示</strong> 欢迎信息:</td></tr></table> <code>/etc/motd</code> 不管是本地登录,还是远程登录,都可以显示此欢迎信息.直接写入此文件即可</p><h1 id="正则表达式与通配符"><a href="#正则表达式与通配符" class="headerlink" title="正则表达式与通配符"></a>正则表达式与通配符</h1><p><li img="" src="lower-roman">正则表达式用来在文件中匹配符合条件的字符串,正则是<font color="red">包含匹配</font>。grep、awk、sed等命令可以支持正则表达式。</li></p><p><li img="" src="lower-roman">通配符用来匹配符合条件的文件名，通配符是<font color="red">完全匹配</font>。ls、find、cp这些命令不支持正则表达式，所以只能使用shell自己的通配符来进行匹配。</li></p><p><table><tr><th>元字符　　　</th><th>作用</th></tr><tr><td>*</td><td>前一个字符匹配0次或任意多次</td></tr><tr><td>.</td><td>匹配除了换行字符外任意一个字符</td></tr><tr><td>^</td><td>匹配行首。例如：^hello 会匹配以hello开头的行。</td></tr><tr><td>$</td><td>匹配行尾。例如：hello$ 会匹配以hello结尾的行</td></tr><tr><td>[]</td><td>匹配中括号中指定的任意一个字符，只匹配一个字符。例如：[aeiou]匹配任意一个元音字母，[0-9]匹配任意一位数字，[a-z][0-9]匹配小写字母和一位数字构成的两位字符</td></tr><tr><td>[^]</td><td>匹配除中括号的字符以外的任意一个字符。例如：[^0-9]匹配任意一位非数字字符，[^a-z]表示任意一位非小写字母。</td></tr><tr><td>\</td><td>转义符。用于取消将特殊符号的含义取消。</td></tr><tr><td>\{n\}</td><td>表示其前面的字符恰好出现n次。例如：[0-9]\{4\}匹配4为数字，[1][3-8][0-9]\{9\}匹配手机号码</td></tr><tr><td>\{n,\}</td><td>表示其前面的字符出现不小于n次。例如：[0-9]\{2,\}表示两位及以上的数字</td></tr><tr><td>\{n,m\}</td><td>表示其前面的字符至少出现n次，最多出现m次。例如：[a-z]\{6,8\}匹配6到8位的小写字母</td></tr></table></p><p><table><tr><td bgcolor="#003153"><font color="36bf36"><code>*</code>前一个字符匹配0次，或任意多次<br><code>grep &quot;a*&quot; ceshi.txt</code> 匹配所有内容，包括空白行<br><code>grep &quot;aa*&quot; ceshi.txt</code> 匹配至少包含有一个a的行<br><code>grep &quot;aaa*&quot; ceshi.txt</code> 匹配最少包含两个连续a的字符串<br><code>grep &quot;aaaaa&quot; a.txt</code> 则会匹配最少包含四个连续的a的字符串</font><font color="00a15c"><br><code>.</code> 匹配除了换行符外任意一个字符<br><code>grep &quot;s..d&quot; a.txt</code> <code>s..d</code>会匹配s和d这两个字符之间一定有两个字符的单词<br><code>grep &quot;s.*d&quot; a.txt</code> 匹配在s和d字母之间有<strong>任意字符</strong><br><code>grep &quot;.*&quot; a.txt</code> <font color="red"><strong>匹配所有内容</strong></font></font><font color="8ce600"><br><code>^</code> 匹配行首，<code>$</code>匹配行尾<br><code>grep &quot;^M&quot; a.txt</code> 匹配以大写M开头的行<br><code>grep &quot;n$&quot; a.txt</code> 匹配以小写n结尾的行<br><code>grep -n &quot;^$&quot; a.txt</code> 会匹配空白行,-n 显示行号</font><font color="66ff59"><br><code>[]</code> 匹配中括号中指定的任意一个字符，只匹配一个字符<br><code>grep &quot;s[ao]id&quot; a.txt</code> 匹配s和i字母中，要么是a要么是o<br><code>gep &quot;[0-9]&quot; a.txt</code> 匹配任意一个数字<br><code>grep &quot;^[a-z] a.txt</code> 匹配用小写字母开头的行<br><code>grep &quot;^[a-z]&quot; a.txt</code> 匹配用小写字母开头的行 </font><font color="4de680"><br><code>^</code> 匹配除中括号的字符以外的任意一个字符<br><code>grep &quot;^[^a-z]&quot; a.txt</code> 匹配不用小写字母开头的行<br><code>grep &quot;^[^a-zA-Z]&quot; a.txt</code> 匹配不多字母开头的行</font><font color="de3163"><br><code>\</code> 转义符<br><code>grep &quot;\.$&quot; a.txt</code> 匹配使用<code>.</code>结尾的行</font><font color="ff8033"><br><code>\{n\}</code> 表示其前面的字符恰好出现n次<br><code>grep &quot;a\{3\}&quot; a.txt</code> 匹配a字母连续出现三次的字符串<br><code>grep &quot;[0-9]\{3\}&quot; a.txt</code> 匹配包含连续的三个数字的字符串</font><font color="dc143c"><br><code>{n,\}</code> 表示其前面的字符出现不小于n次<br><code>grep &quot;^[0-9]\{3,\}&quot; a.txt</code> 匹配最少用连续三个数字开头的行</font><font color="dda0dd"><br><code>\{n,m}</code> 匹配其前面的字符至少出现n次，最多出现m次<br><code>grep &quot;sa\{1,3\}i&quot; a.txt</code> 匹配在字母s和字母i之前有最少一个a,最多三个a</font><br></td></tr></table></p><h1 id="字符截取命令"><a href="#字符截取命令" class="headerlink" title="字符截取命令"></a>字符截取命令</h1><p>cut 字段提取命令<br>printf 命令 (严格意义上讲他不属于字符截取命令，因为awk要用到，在这里提出)<br>awk 命令<br>sed 命令<br><code>cut [选项][文件名]</code> <font color="red"><br>-f 列号:</font> 提取第几列 <font color="red"><br>-d 分隔符:</font> 按照指定分隔符分割列.他的默认分隔符是Tab<br><code>cut -f &quot;:&quot; -f 1,3 /etc/passwd</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# vim b.txt　　　　这里的空格是Tab键</span><br><span class="line">  1 ID      NAME    gender  mark</span><br><span class="line">  2 1       liming  M       86</span><br><span class="line">  3 2       sc      M       90</span><br><span class="line">  4 3       cao     M       83</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# cut -f 2 b.txt</span><br><span class="line">NAME</span><br><span class="line">liming</span><br><span class="line">sc</span><br><span class="line">cao</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# cut -f 2,4 b.txt </span><br><span class="line">NAME    mark</span><br><span class="line">liming  86</span><br><span class="line">sc      90</span><br><span class="line">cao     83</span><br></pre></td></tr></table></figure><p><code>cat /etc/passwd | grep /bin/bash | grep -v root | cut -d &quot;:&quot; -f 1</code> 常和grep结合使用，查看用户文件，查找普通用户，过滤root，提取用户名称</p><h2 id="cut命令的局限"><a href="#cut命令的局限" class="headerlink" title="cut命令的局限"></a>cut命令的局限</h2><p><code>df -h | grep /dev/sda3 | cut -d &quot; &quot; -f 5</code> df命令使用的是空格分隔符，这条命令不能使用，cut对空格使用不友好</p><h2 id="printf-39-输出类型输出格式-39-输出内容"><a href="#printf-39-输出类型输出格式-39-输出内容" class="headerlink" title="printf &#39;输出类型输出格式&#39; 输出内容"></a>printf <code>&#39;输出类型输出格式&#39;</code> 输出内容</h2><p>输出类型:<br>%ns：输出字符串。n是数字指代输出几个字符<br>%ni：输出整数。n是数字指代输出几个数字<br>%m.nf：输出浮点数。m和n是数字，指代输出的整数位数和小数位数。如%8.2f代表共输出8位数，其中2是小数，6位是整数。</p><p><table><tr><th>输出格式</th><th>作用</th></tr><tr><td>\a</td><td>输出警告音</td></tr><tr><td>\b</td><td>输出退格键，也就是Backspace键</td></tr><tr><td>\f</td><td>清除屏幕</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>回车，也就是Enter键</td></tr><tr><td>\t</td><td>水平输出退格键，也就是Tab键</td></tr><tr><td>\v</td><td>垂直输出退格键，也就是Tab键</td></tr></table><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# printf %s 1 2 3 4 5 6</span><br><span class="line">123456[root@Tiger data]# </span><br><span class="line">[root@Tiger data]# printf %s %s %s  1 2 3 4 5 6</span><br><span class="line">%s%s123456[root@Tiger data]# </span><br><span class="line">[root@Tiger data]# printf &apos;%s %s %s&apos; 1 2 3 4 5 6</span><br><span class="line">1 2 34 5 6[root@Tiger data]# </span><br><span class="line">[root@Tiger data]# printf &apos;%s %s %s\n&apos; 1 2 3 4 5 6</span><br><span class="line">1 2 3</span><br><span class="line">4 5 6</span><br><span class="line">[root@Tiger data]#</span><br></pre></td></tr></table></figure></p><p>printf输出文件内容格式：<code>printf &#39;%s\n&#39; $(cat a.txt)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# printf &apos;%s\t %s\t %s\t %s\n&apos; $(cat b.txt) 调整格式输出</span><br><span class="line">ID       NAME    gender  mark</span><br><span class="line">1        liming  M       86</span><br><span class="line">2        sc      M       90</span><br><span class="line">3        cao     M       83</span><br><span class="line">[root@Tiger data]#</span><br></pre></td></tr></table></figure></p><p><table><tr><td bgcolor="2f4f4f"><font color="#ffffff">在awk命令的输出中支持print和printf命令<br>print：print会在每个输出之后自动加入一个换行符(linux 默认没有print命令)<br>printf：printf是标准格式输出命令，并不会自动加入换行符，如果需要换行，需要手工换行符。</font></td></tr></table></p><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>awk ‘条件1{动作1} 条件2{动作2}…’ 文件名<br>条件：一般使用关系表达式作为条件<br>x &gt; 10 判断变量x是否大于10<br>x &gt;= 10 大于等于<br>x &lt;= 10 小于等于<br>动作：格式化输出<br>流程控制语句<br><code>df -h | awk &#39;{print $1 &quot;\t&quot; $5 &quot;\t&quot; $6}&#39;</code> print 自动加入换行符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# df -h | grep sda3 | awk &apos;&#123;print $5&#125;&apos; | awk -F &apos;%&apos; &apos;&#123;print $1&#125;&apos;</span><br><span class="line">62</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# df -h | grep sda3 | awk &apos;&#123;print $5&#125;&apos; | cut -d &quot;%&quot; -f 1</span><br><span class="line">62</span><br></pre></td></tr></table></figure><p>BEGIN END<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">awk &apos;BEGIN &#123;printf &quot;打印这里的文字\n&quot;&#125;&#123;printf $2 &quot;\t&quot; $6 &quot;\n&quot;&#125;&apos; a.txt</span><br><span class="line">打印这里的文字</span><br><span class="line">NAME    gender</span><br><span class="line">liming  M</span><br><span class="line">sc      M</span><br><span class="line">cao     M</span><br></pre></td></tr></table></figure></p><p><code>awk &#39;{FS=&quot;:&quot;}{print $1 &quot;\t&quot; $3}&#39; /etc/passwd</code> 这样执行的话第一条会无法分割，所以可以在<code>awk &#39;BEGIN{FS=&quot;:&quot;}{print $1 &quot;\t&quot; $3}&#39; /etc/passwd</code>, awk是先读取一行在再执行命令，这样文件的第一行会来不及执行默认空格换行打印出。But但是可以直接用<code>awk -F &quot;:&quot; &#39;{print $2 &quot;\t&quot; $3}&#39; /etc/passwd</code><br><code>awk -F &quot;:&quot; &#39;END{print &quot;所有的命令执行完以后再执行&quot;&quot;}{print $2 &quot;\t&quot; $3}&#39; /etc/passwd</code><br>关系运算符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# cat b.txt</span><br><span class="line">ID      NAME    gender  mark</span><br><span class="line">1       liming  M       86</span><br><span class="line">2       sc      M       90</span><br><span class="line">3       cao     M       83</span><br><span class="line">[root@Tiger data]# cat b.txt | grep -v NAME | awk &apos;$3 &gt;= 87 &#123;print $2&#125;&apos; </span><br><span class="line">liming</span><br><span class="line">sc</span><br><span class="line">cao</span><br><span class="line">[root@Tiger data]#</span><br></pre></td></tr></table></figure></p><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p><table><tr><td bgcolor="5686bf"><font color="0000">sed 是一种几乎包括在所有UNIX平台(包括linux)的轻量级流量编辑器。sed主要是用来将数据进行选取、替换、删除、新增的命令。</font></td></tr></table><br>vi 只能修改文件，但是vi不能修改命令的输出，他只能先把命令的输出保存在文件中，然后修改文件的输出。但是sed可以修改命令的输出结果，结合管道符。<br><code>sed [选项] &#39;[动作]&#39;</code>文件名<font color="red"><br>-n </font>:一般sed命令会把所有数据都输出到屏幕，如果加入此选择，则只会把经过sed命令处理的行输出到屏幕。 <font color="red"><br>-e :</font>允许对输入数据应用多条sed命令编辑<font color="red"><br>-i :</font>用sed的修改结果直接修改读取数据的文件，而不是由屏幕输出。</p><p><table><tr><th>动作</th><th>作用</th></tr><tr><td><code>a\</code></td><td>追加，在当前行后添加一行或多行。添加多行时，除最后一行外，每行末尾需要用<code>\</code>代表数据未完结</td></tr><tr><td><code>c\</code></td><td>行替换，用c后面的字符串替换原数据行，替换多行时，除最后一行外，每行末尾需要用<code>\</code>代表数据未完结</td></tr><tr><td><code>i\</code></td><td>插入，在当期行前插入一行或多行。插入多行时，除最后一行外，每行末尾需要用<code>\</code>代表数据未完结</td></tr><tr><td><code>d</code></td><td>删除，删除指定的行</td></tr><tr><td><code>p</code></td><td>打印，输出指定的行</td></tr><tr><td><code>s</code></td><td>字符替换，用一个字符串替换另外一个字符串。格式为<code>行范围s/旧字符串/新字符串/g</code>(和vim中的替换格式类似)</td></tr></table>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# cat a.txt　　　例:</span><br><span class="line">ID      name    PHP     Linux   Mysql   Average</span><br><span class="line">1       Liming  82      95      86      87.66</span><br><span class="line">2       Sc      74      96      87      85.66</span><br><span class="line">3       Gao     99      83      93      91.66</span><br></pre></td></tr></table></figure><h3 id="行操作"><a href="#行操作" class="headerlink" title="行操作"></a>行操作</h3><p>查看文件的第二行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# sed &apos;2p&apos; a.txt</span><br><span class="line">ID      name    PHP     Linux   Mysql   Average</span><br><span class="line">1       Liming  82      95      86      87.66</span><br><span class="line">1       Liming  82      95      86      87.66</span><br><span class="line">2       Sc      74      96      87      85.66</span><br><span class="line">3       Gao     99      83      93      91.66</span><br><span class="line">[root@Tiger data]# sed -n &apos;2p&apos; a.txt</span><br><span class="line">1       Liming  82      95      86      87.66</span><br></pre></td></tr></table></figure></p><p>删除文件第2行到第4行，可以看到没有对文件本身造成影响<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# sed &apos;2,4d&apos; a.txt</span><br><span class="line">ID      name    PHP     Linux   Mysql   Average</span><br><span class="line">[root@Tiger data]# cat a.txt</span><br><span class="line">ID      name    PHP     Linux   Mysql   Average</span><br><span class="line">1       Liming  82      95      86      87.66</span><br><span class="line">2       Sc      74      96      87      85.66</span><br><span class="line">3       Gao     99      83      93      91.66</span><br></pre></td></tr></table></figure></p><p>在第二行后追加hello<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &apos;2a hello&apos; a.txt</span><br></pre></td></tr></table></figure></p><p>在第二行前插入两行数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed &apos;2i hello\</span><br><span class="line">world&apos; a.txt</span><br></pre></td></tr></table></figure></p><p>修改第四行文件。将第四行的99替换成55<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# sed &apos;4c no file&apos; a.txt</span><br><span class="line">ID      name    PHP     Linux   Mysql   Average</span><br><span class="line">1       Liming  82      95      86      87.66</span><br><span class="line">2       Sc      74      96      87      85.66</span><br><span class="line">no file</span><br><span class="line">[root@Tiger data]# sed &apos;4s/99/55/g&apos; a.txt</span><br><span class="line">ID      name    PHP     Linux   Mysql   Average</span><br><span class="line">1       Liming  82      95      86      87.66</span><br><span class="line">2       Sc      74      96      87      85.66</span><br><span class="line">3       Gao     55      83      93      91.66</span><br></pre></td></tr></table></figure></p><h3 id="字符替换-sed-39-s-旧字符-新字符-g-39-文件名"><a href="#字符替换-sed-39-s-旧字符-新字符-g-39-文件名" class="headerlink" title="字符替换 sed &#39;s/旧字符/新字符/g&#39; 文件名"></a>字符替换 <code>sed &#39;s/旧字符/新字符/g&#39; 文件名</code></h3><p>在第3行中，把74换成99<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &apos;3s/74/99/g&apos; a.txt</span><br></pre></td></tr></table></figure></p><p>sed操作的数据直接写入文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &apos;3s/74/99/g a.txt&apos;</span><br></pre></td></tr></table></figure></p><p>同时把<code>linux</code>和<code>Gao</code>替换为空<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e &apos;s/Linux//g;s/Gao//g/a.txt&apos; 前面没有加行号代表整篇文档</span><br></pre></td></tr></table></figure></p><h1 id="字符处理命令"><a href="#字符处理命令" class="headerlink" title="字符处理命令"></a>字符处理命令</h1><p>统计命令 wc <font color="red"><br>-l :</font>只统计行数 <font color="red"><br>-w :</font>只统计单词数 <font color="red"><br>-m :</font>只统计字符数</p><p>sort见command</p><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><h2 id="按照文件类型判断"><a href="#按照文件类型判断" class="headerlink" title="按照文件类型判断"></a>按照文件类型判断</h2><p><table><tr><th>测试选型</th><th>作用</th></tr><tr><td>-b 文件</td><td>判断该文件是否存在，并且是否为块设备文件(是块设备文件为真)</td></tr><tr><td>-c 文件</td><td>判断该文件是否存在，并且是否为字符设备文件(是字符设备文件为真)</td></tr><tr><td>-d 文件</td><td>判断该文件是否存在，并且是否为目录文件(是目录为真)</td></tr><tr><td>-e 文件</td><td>判断该文件是否存在，(存在为真)</td></tr><tr><td>-f 文件</td><td>判断该文件是否存在，并且是否为普通文件(是普通文件为真)</td></tr><tr><td>-L 文件</td><td>判断该文件是否存在，并且是否为符号链接文件(是符号链接文件为真)</td></tr><tr><td>-p 文件</td><td>判断文件是否存在，并且是否为管道文件(是管道文件为真)</td></tr><tr><td>-s 文件</td><td>判断该文件是否存在，并且是否为非空(非空为真)</td></tr><tr><td>-S 文件</td><td>判断该文件是否存在，并且是否为套接字文件(是套接字文件为真)</td></tr></table> 判断文件是否存在(两种格式)<br><code>test -e /root/install.log</code><br><code>-e /root/install.log]</code><br>第一个判断命令如果正确执行，则打印”yes”，否则打印”no”<br><code>[ -d /root ] &amp;&amp; echo &quot;yes&quot; || &quot;no&quot;</code>注意空格 </p><h2 id="按照文件权限进行判断"><a href="#按照文件权限进行判断" class="headerlink" title="按照文件权限进行判断"></a>按照文件权限进行判断</h2><p><table><tr><th>测试选项</th><th>作用</th></tr><tr><td>-r 文件</td><td>判断该文件是否存在，并且是否该文件拥有读权限(有读权限为真)</td></tr><tr><td>-w 文件</td><td>判断该文件是否存在，并且是否该文件拥有写权限</td></tr><tr><td>-x 文件</td><td>判断该文件是否存在，并且是否该文件拥有执行权限(有执行权限为真)</td></tr><tr><td>-u 文件</td><td>判断该文件是否存在，并且是否该文件拥有SUID权限(有SUID权限为真)</td></tr><tr><td>-g 文件</td><td>判断该文件是否存在，并且是否该文件拥有SGID权限(有SGID权限为真)</td></tr><tr><td>-k 文件</td><td>判断该文件是否存在，并且是否该文件拥有SBit权限(有SBit权限为真)</td></tr></table>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test -w /data/a.txt &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot; 他只要UGO只要有一个有写权限就会执行出来</span><br></pre></td></tr></table></figure><h2 id="两个文件之间进行比较"><a href="#两个文件之间进行比较" class="headerlink" title="两个文件之间进行比较"></a>两个文件之间进行比较</h2><p><table><tr><th>测试选项</th><th>作用</th></tr><tr><td>文件1 -nt 文件2</td><td>判断文件1的修改时间是否比文件2的新(如果新则为真)</td></tr><tr><td>文件1 -ot 文件2</td><td>判断文件1的修改时间是否比文件2的旧(如果旧则为真)</td></tr><tr><td>文件1 -ef 文件2</td><td>判断文件1是否和文件2的Inode号一致，可以理解为两个文件是否为同一个文件。这个判断用于判断硬链接是很好的方法</td></tr></table><br>比较硬链接的文件Inode号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test a.txt -ef /tmp/a1.txt &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</span><br></pre></td></tr></table></figure></p><h2 id="两个整数之间比较"><a href="#两个整数之间比较" class="headerlink" title="两个整数之间比较"></a>两个整数之间比较</h2><p><table><tr><th>测试选项</th><th>作用</th></tr><tr><td>整数1 -eq 整数2</td><td>判断整数1是否和整数2相等 (相等为真)</td></tr><tr><td>整数1 -ne 整数2</td><td>判断整数1是否和整数2不相等 (不相等为真)</td></tr><tr><td>整数1 -gt 整数2</td><td>判断整数1 是否大于整数2 (大于为真)</td></tr><tr><td>整数1 -lt 整数2</td><td>判断整数1是否小于整数2 (小于为真)</td></tr><tr><td>整数1 -ge 整数2</td><td>判断整数1是否大于等于整数2 (大于等于为真)</td></tr><tr><td>整数1 -le 整数2</td><td>判断整数1是否小于等于整数2 (小于等于真)</td></tr></table><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 23 -gt 22 ] &amp;&amp; echo &quot;Y&quot; || echo &quot;N&quot;  注意[]左右的空格</span><br></pre></td></tr></table></figure></p><h2 id="字符串的判断"><a href="#字符串的判断" class="headerlink" title="字符串的判断"></a>字符串的判断</h2><p><table><tr><th>测试选项</th><th>作用</th></tr><tr><td>-z 字符串</td><td>判断字符串是否为空(为空返回真)</td></tr><tr><td>-n 字符串</td><td>判断字符串是否为非空(非空返回真)</td></tr><tr><td>子串1 == 子串2</td><td>判断子串1是否和子串2相等(相等返回真)</td></tr><tr><td>子串1 ！= 子串2</td><td>判断字符串1是否和字符串2不相等(不相等为真)</td></tr></table>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# name=sc</span><br><span class="line">You have new mail in /var/spool/mail/root</span><br><span class="line">[root@Tiger data]# [ -z &quot;$name&quot; ] &amp;&amp; echo &quot;Y&quot; || echo &quot;N&quot;</span><br><span class="line">N</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# aa=abc</span><br><span class="line">[root@Tiger data]# bb=abc</span><br><span class="line">[root@Tiger data]# [ &quot;$aa&quot; == &quot;$bb&quot; ] &amp;&amp; echo &quot;y&quot; || echo &quot;N&quot;</span><br><span class="line">y</span><br></pre></td></tr></table></figure><h2 id="多重条件判断"><a href="#多重条件判断" class="headerlink" title="多重条件判断"></a>多重条件判断</h2><p><table><tr><th>测试选项</th><th>作用</th></tr><tr><td>判断1 -a 判断2</td><td>逻辑与，判断1和判断2都成立，最终的结果才为真</td></tr><tr><td>判断1 -o 判断2</td><td>逻辑或，判断1和判断2有一个成立，最终的结果就为真</td></tr><tr><td>! 判断</td><td>逻辑非，使原始的判断式取反</td></tr></table><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# aa=24</span><br><span class="line">[root@Tiger data]# [ -n &quot;$aa&quot; -a &quot;$aa&quot; -gt 23 ] &amp;&amp; echo &quot;yes&quot; || echo &quot;NO&quot;</span><br><span class="line">yes</span><br><span class="line">[root@Tiger data]# [ -z &quot;$aa&quot; -a &quot;$aa&quot; -gt 23 ] &amp;&amp; echo &quot;yes&quot; || echo &quot;NO&quot;  </span><br><span class="line">NO</span><br></pre></td></tr></table></figure></p><h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">单分支if条件语句：</span><br><span class="line">if [ 条件判断 ] ;then</span><br><span class="line">程序</span><br><span class="line">fi</span><br><span class="line">或者</span><br><span class="line">if[ 条件判断 ]</span><br><span class="line">then</span><br><span class="line">程序</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><table><tr><td style="background-image:url(https://s1.ax1x.com/2018/10/14/iU3e6x.jpg)"><font color="ff4d40"><br>单分支条件语句需要注意几个点<br>if语句使用fi结尾,和一般语言使用大括号结尾不同<br>[ 条件判断 ]就是使用test命令判断，所以中括号和条件判断式之间必须有空格<br>then后面跟符合条件之后执行的程序，可以放在[]之后，用<code>:</code>分割，也可以换行写入，就不需要<code>；</code>了<br></font>.</td></tr></table></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">判断用户输入的是什么文件</span><br><span class="line">#!/bin/bash</span><br><span class="line">read -p &quot;Please input a filename: &quot; file</span><br><span class="line">if [ -z $file ] </span><br><span class="line">        then</span><br><span class="line">                echo &quot;Error please input a filenmae&quot;</span><br><span class="line">                exit 1 1</span><br><span class="line">elif [ ! -e $file ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;Your input is not file!&quot;</span><br><span class="line">elif [ -f $file ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;$file is a reguare file&quot;</span><br><span class="line">elif [ -d $file ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;$file is a directory file!&quot;</span><br><span class="line">else</span><br><span class="line">                echo &quot;$file is a other file&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">备份/etc/目录</span><br><span class="line">#!/bin/bash</span><br><span class="line">date=$(date +%F)</span><br><span class="line">size=$(du -sh /home)</span><br><span class="line">if [ -d /tmp/date ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;date is:$date&quot; &gt; /tmp/date/a.txt</span><br><span class="line">                echo &quot;size is:$date&quot; &gt;&gt; /tmp/date/a.txt</span><br><span class="line">                cd /tmp/date</span><br><span class="line">                tar -zcf home_$date.tar.gz /home a.txt &amp;&gt;/dev/null</span><br><span class="line">                rm -fr /tmp/date/a.txt</span><br><span class="line">else</span><br><span class="line">                mkdir /tmp/date</span><br><span class="line">                echo &quot;date is:$date&quot; &gt; /tmp/date/a.txt</span><br><span class="line">                echo &quot;size is:$date&quot; &gt;&gt; /tmp/date/a.txt</span><br><span class="line">                cd /tmp/date</span><br><span class="line">                tar -zcf home_$date.tar.gz /home a.txt &amp;&gt;/dev/null</span><br><span class="line">                rm -fr /tmp/date/a.txt</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>nmap -sT ip地址：-sT作用扫描指定服务器查找的开放端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">判断sshd服务是否开启</span><br><span class="line">#!/bin/bash</span><br><span class="line">port=$(nmap -sT 192.168.100.136 | grep ssh | awk &apos;&#123;print $2&#125;&apos;)</span><br><span class="line">if [ $port == &quot;open&quot; ]</span><br><span class="line">        then</span><br><span class="line">                echo &quot;$(date) sshd is ok!!&quot; &gt;&gt; /tmp/sshd_acc.log</span><br><span class="line">        else</span><br><span class="line">                /etc/rc.d/init.d/sshd restart &amp; &gt;/dev/null</span><br><span class="line">                echo &quot;$(date) sshd reboot!!&quot; &gt;&gt; /tmp/sshd_err.log</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><h2 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h2><p>多分支case条件语句 <table><tr><td style="background-image:url(https://s1.ax1x.com/2018/10/18/iwAR3T.jpg)"><font color="000000"><font size="4"><br>case语句和if…elif…else语句一样，都是多分支条件语句，不过和if多分支条件语句不同的是，case语句只能判断一种条件关系，而if语句可以判断多种条件关系。</font></font></td></tr></table><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> 1 #!/bin/bash</span><br><span class="line"> 2 echo &apos;shanghai please input &quot;dddd&quot;&apos;</span><br><span class="line"> 3 echo &apos;guangzhou please input &quot;2&quot;&apos;</span><br><span class="line"> 4 echo &apos;chengdu please input &quot;3&quot;&apos;</span><br><span class="line"> 5 read -t 30 -p &quot;Please input your weizhi: &quot; u</span><br><span class="line"> 6 case $u in</span><br><span class="line"> 7         &quot;dddd&quot;)</span><br><span class="line"> 8                 echo &quot;shanghai de &quot;</span><br><span class="line"> 9                 ;;</span><br><span class="line">10         &quot;2&quot;)</span><br><span class="line">11                 echo &quot;guangzhou&quot;</span><br><span class="line">12                 ;;</span><br><span class="line">13         &quot;3&quot;)</span><br><span class="line">14                 echo &quot;chengdu&quot;</span><br><span class="line">15                 ;;</span><br><span class="line">16         *)</span><br><span class="line">17                 echo &quot;error 1/2/3&quot;</span><br><span class="line">18 esac</span><br></pre></td></tr></table></figure></p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>语法一：<br>for 变量 in 值1 值2 值3<br>    do<br>        程序<br>    done<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">查看当前目录有多少.sh结尾的文件。</span><br><span class="line"> #!/bin/bash</span><br><span class="line">  2 cd /home/ceshi.sh</span><br><span class="line">  3 ls *.sh &gt; ls.log</span><br><span class="line">  4 y=1</span><br><span class="line">  5 for i in $(cat ls.log)</span><br><span class="line">  6         do</span><br><span class="line">  7                 echo $y</span><br><span class="line">  8                 y=$(( $y + 1))</span><br><span class="line">  9         done</span><br></pre></td></tr></table></figure></p><p>语法二：<br>for((初始值；循环控制条件；变量变化))<br>    do<br>        程序<br>    done<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">从1加到100</span><br><span class="line"> #!/bin/bash</span><br><span class="line">  2 s=0</span><br><span class="line">  3 for (( i=1;i&lt;=100;i=i+1 ))</span><br><span class="line">  4         do</span><br><span class="line">  5                 s=$(( $s+$i ))</span><br><span class="line">  6         done</span><br><span class="line">  7 echo $s</span><br></pre></td></tr></table></figure></p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>while循环是不定循环，也称作条件循环。只要条件判断式成立，循环就会一直继续，直到条件判断式不成立，循环才会停止。这就和for的固定循环不太一样了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while [ 条件判断式 ]</span><br><span class="line">do </span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 #!/bin/bash</span><br><span class="line"> 2 i=1</span><br><span class="line"> 3 s=0</span><br><span class="line"> 4 while [ $i -le 100  ]</span><br><span class="line"> 5         do</span><br><span class="line"> 6                 s=$(( $s+$i ))</span><br><span class="line"> 7                 i=$(( $i+1 ))</span><br><span class="line"> 8         done</span><br><span class="line"> 9 echo $s</span><br></pre></td></tr></table></figure><h2 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h2><p>until循环，和while循环相反，until循环时只要条件判断式不成立则进行循环，并执行循环程序。一旦循环条件成立，则终止循环。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">i=1</span><br><span class="line">s=0</span><br><span class="line">until [ $i -gt 100  ]</span><br><span class="line">        do</span><br><span class="line">                s=$(( $s+$i ))</span><br><span class="line">                i=$(( $i+1 ))</span><br><span class="line">        done</span><br><span class="line">echo $s</span><br></pre></td></tr></table></figure></p><h1 id="服务的简介与分类"><a href="#服务的简介与分类" class="headerlink" title="服务的简介与分类"></a>服务的简介与分类</h1><p><img src="https://s1.ax1x.com/2018/11/07/iT5eJA.png" alt="">启动与自启动</p><ol><li>服务器启动: 就是在当前系统中让服务运行，并提供功能。</li><li>服务自启动: 自启动是指让服务在系统开机重启动之后，随着系统的启动而自动启动服务。<br>rpm包安装的服务：<br><code>chkconfig --list</code> :查看服务自启动状态，可以看到所有RPM包安装的服务<br>源码包安装的服务：<br>查看服务安装位置，一般是/usr/local下<br><table><tr><td style="background-image:url(https://ws1.sinaimg.cn/large/005RRiqRly1fvw23os85zg31hc0u07wh.jpg)"><strong>RPM安装服务和源码包安装服务的区别：<br> 就是安装位置的不同<br> 源码包安装包安装在指定位置，一般是/usr/local/<br>RPM包安装在默认位置中</strong><br><font color="red">service 不能用于源码包，因为service默认搜索的是/etc/rc.d/init.d/这个路径，也就是RPM包安装的路径</font></td></tr></table><table><tr><td style="background-image:url(https://ws1.sinaimg.cn/large/005RRiqRly1fttgf25sjxj31hc0xctbq.jpg)"><font color="fffafa">RPM包的一般存放的默认位置：<br>/etc/init.d/ :启动脚本位置<br>/etc/sysconfig/ :初始化环境配置文件位置<br>/etc/ :配置文件位置<br>/etc/xinted.conf ：xinetd配置文件<br>/etc/xinetd.d/ :基于xinetd服务的启动脚本<br>/var/lib/ :服务产生的数据放在这里<br>/var/Log/ :日志 </font></td></tr></table></li></ol><h2 id="独立服务的启动："><a href="#独立服务的启动：" class="headerlink" title="独立服务的启动："></a>独立服务的启动：</h2><p>/etc/init.d/独立服务名 start|stop|status|restart<br>service 独立服务名 start|stop|status|restart</p><p><font color="red">status</font> 查询服务的状态</p><p><font color="red">service</font> 红帽专有命令</p><p><font color="red">service –status-all</font> 列出系统所有已经安装的RPM包服务的状态</p><blockquote><p>独立服务的自启动<br>chkconfig命令 （详见command）<br>修改/etc/rc.d/rc.local文件<br>使用ntsysv命令管理自启动(红帽专有命令)</p></blockquote><h2 id="基于xinetd服务"><a href="#基于xinetd服务" class="headerlink" title="基于xinetd服务"></a>基于xinetd服务</h2><p> yum -y install xinetd<br>这是可以用chkconfig –list 查看服务可以看到基于xinetd的服务<br> yum -y install telnet-server 安装telnet服务端<br>chkconfig –list 查看安装的服务<br>Telnet的默认端口是23，netstat -tlun telnet服务还没有开启<br>xinetd服务的启动：<code>vim /etc/xinetd.d/telnet</code> 修改文件<br>service xinetd restart 重启xinetd服务</p><blockquote><p>基于xinetd服务的自启动<br>chkconfig telnet on<br>ntsysv <font color="red"><br><strong>基于xinetd 服务的启动与自启动区别不明显，若关闭telnet(chkconfig telnet off)的自启动会将运行的telnet一并关闭，配置文件也会显示关闭状态。</strong> </font>.</p></blockquote><h2 id="源码包安装服务的启动"><a href="#源码包安装服务的启动" class="headerlink" title="源码包安装服务的启动"></a>源码包安装服务的启动</h2><p><table><tr><td style="background-image:url(https://ws1.sinaimg.cn/large/005RRiqRly1fvw23os85zg31hc0u07wh.jpg)"><strong>使用绝对路径，调用启动脚本来启动。不同的源码包的启动脚本不同。可以查看源码包的安装说明，查看启动脚本的方法。</strong></td></tr></table>源码包服务的自启动：<br>vi /etc/rc.d/rc.local 开机自启文件，加入下面的标准启动命令<br>/usr/local/apache2/bin/apachectl start</p><blockquote><p>让源码包的apache服务能被chkconfig与ntsysv命令管理自启动<br>vi /etc/init.d/apache<br># chkconfig: 35 86 76<br>指定httpd脚本可以被chkconfig命令管理。格式是:<code>chkconfig: 运行级别 启动顺序 关闭顺序</code><br>#descriptaion:source package apache 说明，内容随意</p></blockquote><p><em>启动顺序和关闭顺序不能和系统中现有服务的启动关闭顺序一样</em>在<code>/etc/rc.d/</code>可以看到各个启动级别的服务启动关闭文件。例<code>/etc/rc.d/rc3.d</code>里面的文件S01表示依次启动，K01表示依次关闭。不能存在一样的启动关闭级别。</p><h2 id="服务的总结："><a href="#服务的总结：" class="headerlink" title="服务的总结："></a>服务的总结：</h2><p><a href="http://naotu.baidu.com/file/5bf31d7a9584e16965e0bcb733ccea11?token=096d51a20e782b04" target="_blank"><img src="https://ws1.sinaimg.cn/large/005RRiqRly1fxklfj6e6wj31fk0k6q86.jpg" alt="iwAR3T.jpg" title="请点击图片"></a></p><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><p><table><tr><td style="background-image:url(https://ws1.sinaimg.cn/large/005RRiqRly1fvklq1wjadj30go0aft8l.jpg)"><font color="#008B8B">进程是正在执行的一个程序或命令，每一个进程都是一个运行的实体，都有自己的地址空间，并占用一定的系统资源</font></td></tr></table>.</p><style type="text/css"> body{background-image:url(https://ws1.sinaimg.cn/large/005RRiqRly1fvyygdfzt6j31hc0u0138.jpg);background-position:center;           background-repeat:repeat-y；}</style>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;font face=&quot;FZShuTi&quot;&gt;Linux 文档&lt;/font&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="Document" scheme="http://yoursite.com/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>mage</title>
    <link href="http://yoursite.com/2018/08/28/%E9%A9%AC%E5%93%A5%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/08/28/马哥笔记/</id>
    <published>2018-08-28T09:28:03.000Z</published>
    <updated>2019-05-10T03:04:53.458Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="KaiTi">linux 培训的笔记 </font></center><br><a id="more"></a></p><h1 id="命令积累"><a href="#命令积累" class="headerlink" title="命令积累"></a>命令积累</h1><p><code>lscpu 查看cpu信息</code>     <code>lsblk （列出块设备）命令用于列出所有可用块设备的信息</code><br><code>sosreport 收集日志</code>　　<code>查看内存：cat /proc/meminfo</code></p><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">00</span><br><span class="line">11</span><br><span class="line">102</span><br><span class="line">113</span><br><span class="line">1004</span><br><span class="line">1015</span><br><span class="line">110 6</span><br><span class="line">111 7</span><br><span class="line">1000 8(2^3)</span><br><span class="line">10000 16(2^4)</span><br><span class="line">10000032(2^5)</span><br><span class="line">100000064(2^6)</span><br><span class="line">10000000 128(2^7)</span><br></pre></td></tr></table></figure><p>2^0=1 2^1=2 2^2=4 2^3=8 16 32 64 128<br>例：97(十进制)=64+32+1=1000000+100000+1=1100001。<br>例：10101010(二进制)=128+32+8+2=170。<br>1Gbps：每秒传输1g的位。1Gbit/second<br>1Byte=8bit</p><h1 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h1><p>建立带-的文件:<br>touch -- -a<br>touch ./-b</p><h1 id="DAS-NAS-SAM"><a href="#DAS-NAS-SAM" class="headerlink" title="DAS NAS SAM"></a>DAS NAS SAM</h1><p>　　　　　　　　　　　　　存储基础知识—存储网络</p><table><thead><tr><th></th><th style="text-align:center">DAS</th><th>NAS</th><th>SAM</th></tr></thead><tbody><tr><td>传输类型</td><td style="text-align:center">SCSI、FC</td><td>IP</td><td>IP、FC、SAS</td></tr><tr><td>数据类型</td><td style="text-align:center">数据块</td><td>文件</td><td>数据块</td></tr><tr><td>典型应用</td><td style="text-align:center">任何</td><td>文件服务器</td><td>数据库应用</td></tr><tr><td>优点</td><td style="text-align:center">磁盘与服务器分离，便于统一管理</td><td>不占用应用服务器资源</td><td>高扩展性，高可用性，数据集中，易管理</td></tr><tr><td>缺点</td><td style="text-align:center">连接距离短，数据分散，共享困难，存储空间利用率不高，扩展性有限</td><td>不适合存储大量的块级应用，数据备份已恢复占用网络带宽</td><td>相比NAS成本较高，安装和升级比NAS复杂</td></tr></tbody></table><h1 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h1><p>分区分配一个目录名mount point,名为挂载<br>分区：MBR,GPT<br>主：一个硬盘最多有四个，只有一个是活动，1-4<br>扩展：最多一个，划分更小的分区，扩展+主分区&lt;=4 1-4<br>逻辑分区：5,6  </p><h1 id="运行模式："><a href="#运行模式：" class="headerlink" title="运行模式："></a>运行模式：</h1><p><code>runlevel</code><br><code>3 5</code>.3表示前一次的运行级别，5表示现在的运行级别<br>N:表示前一次没有运行级别 。<br>init 3：切换到3级别，init要登录<br>startx:切换到？级别，startx不需要登录<br>5：字符界面  0：关机  6：重启  </p><h1 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h1><p><code>tty</code>显示终端号<br>chvt 2:表示ctrl+Alt+F2切换到的界面 </p><h1 id="centos7启动网络"><a href="#centos7启动网络" class="headerlink" title="centos7启动网络"></a>centos7启动网络</h1><p>启动网络：<code>nmcli connection modify ens33 connection.autoconnect yes</code><br>id -u:当前用户的UID，root为0，非0为普通用户。</p><h1 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h1><p><code>cat /etc/centos-release</code>  <code>lsb_release -a</code></p><h1 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h1><p>查看：<code>echo $PS1</code><br>更改：<code>PS1=&quot;\[\e[1;33m\][\u@\h \w \!]\\$\[\e[0m\]&quot;</code><br>命令提示符:prompt <font color="red"><br>#</font> :管理员 <font color="red"><br>$</font> :普通用户<br>显示提示符格式：<code>echo $PS1</code><br>修改提示符格式：<code>PS1=&quot;\e[1;5;41;33m\[\u@h\W]\\$\[\e[0m&quot;</code><font color="red"><br>\e \033</font>　<font color="red"> \u</font> 当前用户  <font color="red"><br>\h </font>主机名称　<font color="red"> \H</font> 主机名   　　<font color="red"><br>\w</font> 当前工作目录　<font color="red">\W</font> 当前工作目录基名     <font color="red"><br>\t</font> 24小时时间格式　<font color="red">\T</font> 12小时时间格式  <font color="red"><br>\！</font>命令历史数　 　　<font color="red">\#</font> 开机后命令历史数<br><code>cat ~/.bashrc</code> 命令提示符当前用户修改路径</p><h1 id="虚拟机取消密码进入"><a href="#虚拟机取消密码进入" class="headerlink" title="虚拟机取消密码进入"></a>虚拟机取消密码进入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gdm/custom.conf    </span><br><span class="line">AutomaticLoginEnable=true  </span><br><span class="line">AutomaticLogin=root</span><br></pre></td></tr></table></figure><h1 id="查看命令类型"><a href="#查看命令类型" class="headerlink" title="查看命令类型"></a>查看命令类型</h1><p><code>type pwd</code>:显示命令的类型外部命令或者内部命令 <font color="red"><br>-a </font>:显示所有的内部命令后外部命令的列表<br><img src="https://s2.ax1x.com/2019/03/23/AGyo9S.png" alt=""></p><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/04/28/EQWP0S.gif);"><font color="#F0FFFF"><font face="KaiTi"><font size="5">执行命令<br>输入命令后回车:提请shell程序找到键入命令所对应的可执行程序或代码，并由其分析后提交给内核分配资源将其运行起来。<br>在shell中可执行的命令有两类<br>1.内部命令：由shell自带的，而且通过某种命令形式提供　　<br>help内部命令列表<br>enable cmd 启动内部命令<br>enable -n cmd 禁用内部命令<br>enable -n 查看所有禁用的内部命令<br>2.外部命令：在文件系统路径下有对应的可执行程序文件<br>查看路径：which -a |–skip-alias; whereis<br>3.区别指定的命令是内部或外部命令<br>type COMMAND<br>whereis:查看外部命令路径和他的配置文件文档路径<br></font></font></font></td></tr></table></p><h1 id="命令执行路径"><a href="#命令执行路径" class="headerlink" title="命令执行路径"></a>命令执行路径</h1><p><font color="red">alias –内部 –hash表(记录外部命令的路劲) –$PATH –命令找不到 </font><br>Hash缓存表    <table><tr><td bgcolor="#FF8DC"><font size="4">系统初始hash表为空，当外部命令执行时，默认会从PATH路径下寻找该命令，找到后会将这条命令的路径记录到hash表中，当再次使用该命令时，shell解释器首先会查看hash表，存在将执行之，如果不存在，将会去PATH路径下寻找，利用hash缓存表可大大提高命令的调用率。</font></td></tr></table> hash常见用法 <font color="red">　hash</font> 显示hash缓存    <font color="red">　<br>hash -l</font> 显示hash缓存，可作为输入使用  <font color="red">　<br>hash -p path name</font> 将命令全路径path起别名为name  <font color="red">　<br>hash -t name</font> 打印缓存中name的路径  <font color="red">　<br>hash -d name</font> 清除name缓存  <font color="red">　<br>hash -r</font> 清除缓存</p><h1 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h1><p><table><tr><td bgcolor="20b2aa"><font size="4">显示当前shell进程所有可用的命令别名<br><code>alias</code><br>定义别名NAME，其相当于执行命令VALUE<br><code>alias NAME=&#39;VALUE&#39;</code><br>在命令行中定义的别名，仅对当前shell进程有效<br>如果想要永久有效，要定义在配置文件中<br>　仅对当前用户：<font color="blue"> ~/.bashrc </font>　<br>　对所有用户有效：<font color="blue"> /etc/bashrc </font>　　<br>写入文件后，文件存储在磁盘上没有生效，必须让他在内存中才会生效，使用命令<code>source.bashrc</code><br>删除别名<font color="red">(指在内存中删除)</font>：<code>unalias 别名</code><br>编辑配置给出的新配置不会立即生效<br>bash进程重新读取配置文件</font></td></tr></table>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source /path/to/config_file</span><br><span class="line">./path/to/config_file</span><br></pre></td></tr></table></figure><p>撤销别名: unalias [name]  <font color="red"><br>-a</font>取消所有别名<br>如果别名同原命令同名，如果要执行原命令，可使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\ALIASNAME</span><br><span class="line">&quot;ALIASNAME&quot;</span><br><span class="line">&apos;ALIASNAME&apos;</span><br><span class="line">command ALIASNAME</span><br><span class="line">/path/command 针对外部命令</span><br></pre></td></tr></table></figure></p><p>.</p><h1 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h1><p>linux的两种时钟<br>系统时钟：由Linu内核通过CPU的工作频率进行的<br>硬件时钟：主板<br>相关命令:<br>date 显示和设置系统时间<br>　<code>date +%s</code><br>　date -d @1509536033<br>hwclock,clock:显示硬件时钟<br>-s,–hctosys 以硬件时钟为准，校正系统时钟<br>-w,–systohc 以系统时钟为准，校正硬件时钟<br>时区：/etc/localtime<br>显示日历：<code>cal</code></p><h1 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h1><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/04/20/E9zkw9.jpg)"><font color="#F0FFFF"><font face="微软雅黑"><li class="b">用户登录信息查看命令:<br><code>whoami</code> :显示当前登录有效用户<br><code>who</code> :系统当前所有的登录会话<br><code>w</code> :系统当前所有的登录会话及所做的操作<br></li></font></font></td></tr></table>.</p><h1 id="远程协助：screen"><a href="#远程协助：screen" class="headerlink" title="远程协助：screen"></a>远程协助：screen</h1><p><font size="5">  <li class="g">screen 命令：</li><li class="while">创建新screen会话</li><li class="while">　　<font color="red">screen -S [SESSION]</font></li><li class="while">加入screen会话</li><li class="while">　　<font color="red">screen -x [SESSION]</font></li><li class="while">退出并关闭screen会话</li><li class="while">　　<font color="red">exit</font></li><li class="while">剥离当前screen会话</li><li class="while">　　<font color="red">Ctrl+a,d</font></li><li class="while">显示所有已经打开的screen会话</li><li class="while">　　<font color="red">screen -ls</font></li><li class="while">恢复screen会话</li><li class="while">　　<font color="red">screen -r [SESSION]</font>.</li></font></p><h1 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h1><p><table><tr><td bgcolor="ff66cc"><font size="4">linux中换行表示：移动到下一行</font></td></tr></table><table><tr><td bgcolor="ff66cc"><font size="4">回车：光标移动到行首</font></td></tr></table>说明：echo会将输入的字符送往输出。输出的字符串间以空白字符隔开，并在最后加上换行号。<font color="red"><br>-E :(默认)不支持\解释功能</font>  <font color="red"><br>-n :不自动换行  </font><font color="red"><br>-e :启用\字符的解释功能</font> <li class="a">显示变量：<br><code>echo &quot;$VAR_NAME&quot;</code> 变量会替换，弱引用  单双引号的区别<br><code>echo &#39;$VAR_NAME&#39;</code><br> 变量会替换，强引用反引号里面可执行命令（可用$(命令)代替）<font color="red"><font size="6">``</font> <font color="blue"><br> ls -l `echo $SHELL` 得到的是/bin/bash 文件的详细信息</font></font></li></p><p><table><tr><td bgcolor="#778899"> <font color="black">  启用命令选项：-e,若字符串中出现以下字符，则特别加以处理，而不会将他当成一般文字输出<br>\a :发出警告声<br>\b :退格键<br>\c :最后不加上换行符号<br>\n :换行且光标移动至行首<br>\r :回车，即光标移动至行首，但不换行<br>\t :插入Tab字符<br>\ :插入\字符<br>\0nnn :插入nnn(八进制)所代表的ASCII字符<br> <code>echo -e &#39;\033[43;31;5mmagedu\033[0m&#39;</code><br>\xHH插入HH(十六进制)所代表的ASCII数字(man 7 ascii)</font></td></tr></table></p><h1 id="hexdump"><a href="#hexdump" class="headerlink" title="hexdump"></a>hexdump</h1><p>查看”二进制”文件的十六进制编码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7localdomain ~]# hexdump -C a</span><br><span class="line">00000000  31 0a                                             |1. |</span><br><span class="line">00000002</span><br><span class="line">[root@centos7localdomain ~]# hexdump -C a</span><br><span class="line">00000000  31 32 0a 33 0a 61 0a                              |12.3.a. | </span><br><span class="line">00000007</span><br></pre></td></tr></table></figure></p><p>查看文件a的十六进制和ASCII码。<br>偏移量；十六进制；ASCII码；　　　　原始数据 （最后有空格）<br>文件原始数据每行一个数。</p><h1 id="Centos7设置语言"><a href="#Centos7设置语言" class="headerlink" title="Centos7设置语言"></a>Centos7设置语言</h1><p>localectl list-locales查看语言列表<br>localectl set-locale LANG=en_US.utf8 修改<br>修改后要注销再登录<br><code>cat /etc/locale.conf</code></p><h1 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h1><p>命令行扩展，被括起来的集合<li class="d">命令行扩展: $()或``<br>把一个命令的输出打印给另一个命令的参数</li></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;This system&apos;s name is $(hostname)&quot;</span><br><span class="line">This system&apos;s name is server1.example.com  </span><br><span class="line">echo &quot;i am `whoami`&quot;</span><br><span class="line">i am root</span><br></pre></td></tr></table></figure><p><li class="d">括号扩展:{}<br>打印重复字符串的简化形式<font color="blue"><br>echo file{1,3,5} 结果为: file1 file3 file5<br>rm -fr file{1,3,5}<br>echo {1..10}<br>echo {a..z}</font>.</li></p><h1 id="whatis"><a href="#whatis" class="headerlink" title="whatis"></a>whatis</h1><p>centos6生成whatis数据库:<code>makewhatis</code><br>Centos7: <code>mandb</code><br>whatis:<br>显示命令的简短叙述;<br>使用数据库;<br>刚安装后不可立即使用<br>makewhatis | mandb 制作数据库<br>使用示例: <code>whatis cal 或 man -f cal</code></p><h1 id="history"><a href="#history" class="headerlink" title="history"></a>history</h1><p><table><tr><td bgcolor="778899"><font size="4"> 重复前一个命令使用上方向键，并且执行<br>　按!!并回车执行<br>　输入!-1执行倒数第一个命令<br>　按Ctrl+p 并回车执行<br>!:0 执行前一条命令(去除参数)<br>Ctrl+n 显示当前历史中的下一条命令，但不执行<br>Ctrl+j 执行当前密令<br>!n 执行history命令输出对应序号n的命令<br>!-n 执行history历史中倒数的第n个命令</font></td></tr></table><table><tr><td bgcolor="778899"><font size="4">!string 重复前一个以”string”开头的命令<br>!?string 重复前一个包含string的命令<br>!string:p 仅打印命令历史，而不执行<br>!$:p 打印输出!$(上一条命令的最后一个参数)的内容<br>!*:p 打印输出!*(上一条命令的所有参数)的内容<br>^string 删除上一条命令中的第一个string<br>^string1^string2 将上一条命令中的第一个string1替换为string2<br>!:g/s/string/string2 将上一条命令中所有的string1都替换为string2</font></td></tr></table> <table><tr><td bgcolor="778899"><font size="4">3. 使用up(向上)和down(向下)键上下浏览从前输入的命令<br>ctrl+r 在历史命令中搜索<br>ctrl+g 从历史搜索模式中退出<br>要重新调用前一个命令中最后一个参数：<br>!$<br>ESC,.(点击ESC键后松开，然后点击.键)<br>Alt+. (按住Alt键的同时点击.键) </font></td></tr></table> <table><tr><td bgcolor="778899"><font size="4">4. command !^ 利用上一个命令的第一个参数做cmd的参数.<br>command !$ 利用上一个命令的最后一个参数做cmd的参数<br>command !* 利用上一个命令的全部参数做cmd的参数<br>command !:n 利用上一个命令的第n个参数做cmd的参数<br>command !n:m 调用第n条命令的第m个参数<br>command !n:* 调用第n条命令的所有参数</font></td></tr></table> <font color="red">-c </font>:清空命令历史 <font color="red"><br>-d offser </font>:删除历史中指定的第offser个命令 <font color="red"><br>n </font>:显示最近的n条历史 <font color="red"><br>-a </font>:追加本次会话新执行的命令历史列表至历史文件 <font color="red"><br>-r </font>:读历史文件附加到历史列表 <font color="red"><br>-w </font>:保存历史列表到指定的历史文件 <font color="red"><br>-n </font>:读取历史文件中未读过的行到历史列表 <font color="red"><br>-p </font>:展开历史参数成多行，但不存在历史列表中 <font color="red"><br>-s </font>:展开参数成一行，附加在历史列表后 <font color="ff73b3"><br>-p:可以执行命令但不存在历史记录中。<br>-s:伪造历史，不执行命令。<br><code>HISTTIMEFORMAT=&quot;%F %T &quot;</code>历史加上时间</font>. <table><tr><td bgcolor="1e90ff"><font size="4">5.命令历史相关环境变量 <li class="h">HISTSIZE :命令历史记录的条数</li><li class="h">HISTFILE :指定历史文件，默认为~/.bash_history </li><li class="h">HISTFILESIZE :命令历史文件记录历史的条数 </li><li class="h">HISTTIMEFORMAT= “%F %T” 显示时间  </li><li class="h">HISTIGNORE= “str1:str2*……” 忽略str1命令，str2开头的历史 </li><li class="h">控制命令历史的记录方式：<br>　环境变量：HISTCONTROL<br>　　ignoredups 默认，忽略重复的命令，连续且相同为”重复”<br>　　ignorespace 忽略所有已空白开头的命令<br>　　ignoreboth 相当于ignoredups,ignorespace的组合<br>　　erasedups 删除重复命令<br>export 变量名=”值”<br>存放在 /etc/profile 或 ~/.bash_profile</li></font></td></tr></table>.</p><h1 id="man"><a href="#man" class="headerlink" title="man"></a>man</h1><p>查看man手册页<br>　　man [章节] keyword<br>列出所有帮助<br>　　man -a keyword<br>搜索man手册<br>　　man -k keyword 列出所有匹配的页面<br>相当于whatis 数据库<br>　　man -f keyword<br>打印man帮助文件的路径<br>　　man -w [章节] keyword</p><h2 id="man-命令的操作方法：使用less-命令实现"><a href="#man-命令的操作方法：使用less-命令实现" class="headerlink" title="man 命令的操作方法：使用less 命令实现"></a>man 命令的操作方法：使用less 命令实现</h2><p>待续写</p><h2 id="man搜索"><a href="#man搜索" class="headerlink" title="man搜索"></a>man搜索</h2><p>待续写</p><h1 id="bash-的快捷键"><a href="#bash-的快捷键" class="headerlink" title="bash 的快捷键"></a>bash 的快捷键</h1><p>待续写</p><h1 id="基名，目录名"><a href="#基名，目录名" class="headerlink" title="基名，目录名"></a>基名，目录名</h1><p><code>basename</code> :取文件基名<br><code>dirname</code> :取文件目录名</p><h1 id="centos6自动挂载"><a href="#centos6自动挂载" class="headerlink" title="centos6自动挂载"></a>centos6自动挂载</h1><p><code>cd /misc/cd</code> 目录磁盘会自动挂载</p><h1 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h1><p><code>*</code> 匹配零个或多个字符<br><code>?</code> 匹配任何单个字符<br><code>~</code> 当前用户家目录 <code>~mage</code> 用户mage家目录<br><code>~+</code> 当前工作目录<br><code>~-</code> 前一个工作目录<br><code>[0-9]</code> 匹配数字范围 <code>[a-z]</code>:字母　　<code>[A-Z]</code>:字母　　<code>[wang]</code>匹配列表中的任何的一个字符<br><code>[^wang]</code> 匹配列表中的所有字符以外的字符<br><code>ls 1[a-z].txt</code>:不会显示出小写字母到大写字母的文件，他会以小写大写的顺序排列出来<br>预定义的字符类：man 7 glob <div class="alert alert-success"><i class=""></i>[:digit:] :任意数字，相当于0-9<br>[:lower:] :任意小写字母<br>[:upper:] :任意大写字母<br>[:alpha:] :任意大小写字母<br>[:alnum:] :任意数字或字母<br>[:blank:] :水平空白字符<br>[:space:] :水平或垂直空白字符<br>[:punct:] :标点符号<br>[:print:] :可打印字符<br>[:cntrl:] :控制(非打印)字符<br>[:graph:] :图形字符<br>[:xdigit:] :十六进制字符</div><br><code>ls .[^.]*</code>显示当前目录下的隐藏目录<br><code>ls -d .*</code><br><code>ls -l &quot;[^.]*&quot; -a</code>　　三种显示方式</p><h1 id="atime-mtime-ctime"><a href="#atime-mtime-ctime" class="headerlink" title="atime mtime ctime"></a>atime mtime ctime</h1><p>touch命令<br>-a 仅改变 atime和ctime<br>-m 仅改变 mtime和ctime<br>-t [[CC]YY]MMDDhhmm[.ss] <code>touch -t 201802062036.18 linuxidc.txt</code><br>　指定atime和mtime的时间戳<br>-c 如果文件不存在，则不予创建, 如果文件存在，touch将更新访问时间</p><h1 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h1><p><code>cp -r</code>递归<br><code>cp /etc/passwd ./a --backup</code>将文件cp到a文件夹并备份<br>-d:保留链接属性<br>-a:归档，相当于-d,-p,-r<br>-v:显示复制过程<br>-p:此时cp除复制源文件的内容外，还将把其修改时间和访问权限也复制到新文件中<br>-u:两个同样的文件覆盖时，只复制新的到旧的上去。<br>-f:复制已经存在的目标文时件不提示<br>-i:询问，如果目标文件已经存在，则会询问是否覆盖<br>-l:把目标文件建立为源文件的硬链接文件，而不是复制源文件；<br>-b:覆盖前，目标存在先备份<br><code>cp /etc/passwd ./a1 --backup=numbered</code><br>例：cp -av /etc/ app/back <code>date +%F</code>    :/etc/目录下所有文件，备份到/app独立的子目录下，要求子目录格式为backYYY-mm-dd,备份过程可见。</p><h1 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h1><p><fon color="red">-b</fon>: 如果有相同的文件，覆盖前先备份。 <font color="red"><br>-t</font>移动文件路径和目标路径颠倒  <code>alias rm=&#39;mv -t /data&#39;</code></p><h1 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h1><p>将main1.c重命名为main.c  <code>rename main1.c main.c main1.c</code><br><span id="inline-purple">如果使用rename foo foo0 foo?，会把foo1到foo9的文件重命名为foo01到foo09，重命名的文件只是有4个字符长度名称的文件，文件名中的foo被替换为foo0。<br>　如果使用rename foo foo0 foo??，foo01到foo99的所有文件都被重命名为foo001到foo099，只重命名5个字符长度名称的文件，文件名中的foo被替换为foo0。</span><br>rename支持正则表达式:<br><code>rename &quot;s/AA/aa/&quot;</code>  //把文件名中的AA替换成aa<br>修改文件的后缀 <code>rename &quot;s//.html//.php/&quot;</code>  //把.html 后缀的改成 .php后缀<br>批量添加文件后缀 <code>rename &quot;s/$//.txt/&quot;</code>  //把所有的文件名都以txt结尾<br>批量删除文件名 <code>rename &quot;s//.txt//&quot;</code>  //把所有以.txt结尾的文件名的.txt删掉<br>如我们想把文件扩展名为.bak 的文件扩展名去掉，可以这样 <code>rename &#39;s/.bak$//&#39; \*.bak</code>*.bak 为通配符(wildcard)，会被shell展开为各个文件名 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">去除文件名中的空格  rename &apos;s/ //g&apos;</span><br><span class="line">g 是global的意思，替换所有的空格为空字符（也就是删除啦） </span><br><span class="line">文件名转为小写:  rename &apos;y/A-Z/a-z/&apos;</span><br></pre></td></tr></table></figure><h1 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h1><p><i class="fa fa-tree fa-2x"></i>显示目录树 <font color="red"><br> -d</font> :只显示目录 <font color="red"><br> -L level</font> :指定显示的层级数目 <font color="red"><br> -P pattern</font> :只显示由指定pattern匹配到的路径<code>tree -P /etc/rc*</code></p><h1 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h1><p><i class="fa fa-folder fa-x"></i>创建目录 <font color="red"><br>-p</font> :存在于不报错，且可自动创建所需的各目录 <font color="red"><br>-v</font> :显示详细信息 <font color="red"><br>-m MODE</font> :创建目录时直接指定权限</p><h1 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h1><p>删除空目录 <font color="red"><br>-p</font> :递归删除父目录(rmdir -p:从下往上删除，从深往浅删除) <font color="red"><br>-v</font> :显示详细信息<br><span id="inline-green">rm -r :递归删除目录树 </span></p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i> 例：<br>1.创建/testdir/dir1/x,/testdir/dir1/y,/testdir/dir1/x/a,/testdir/dir1/x/b,/testdir/dir1/y/a,/testdir/dir1/y/b<br><code>mkdir -p ./testdir/dir1/{x,y}/{a,b}</code><br>2.创建/testdir/dir2/x,/testdir/dir2/y,/testdir/dir2/x/a,testdir/dir2/x/b<br><code>mkdir -p testdir/dir2{x/{a,b},y}</code><br>3.创建/testdir/dir3,/testdir/dir4,/testdir/dir5,/testdir/dir5/dir6,testdir/dir5/dir7<br><code>mkdir -p ./testdir/dir{3,4,5/dir{6,7}}</code><br></div><h1 id="inode"><a href="#inode" class="headerlink" title="inode"></a>inode</h1><p>索引节点:inode(index node)表中包含文件系统所有文件列表<br>一个节点(索引节点)是在一个表项，包含有关文件的信息(元数据),包括：<br>　文件类型,权限,UID,GID<br>　链接数(指向这个文件名路径名称个数)<br>　该文件的大小和不同的时间戳<br>　指向磁盘上文件的数据块指针<br>　有关文件的其他数据</p><h1 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h1><div class="note warning"><p><br>创建硬链接会增加额外的记录项以引用文件<br>对应于同一文件系统上一个物理文件<br>每个目录引用相同的inode号<br>创建时链接数递增<br>删除文件时：<br>rm命令递减计数的链接<br>文件要存在，至少有一个链接数<br>当链接数为零时，该文件被删除<br>不能跨越驱动器或分区<br>语法:<code>ln filename</code> </p></div><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2> <div class="note primary"><p>一个符号链接指向另一个文件<br><code>ls -l</code>的 显示链接的名称和引用的文件<br>一个符号链接的内容是它引用文件的名称<br>可以对目录进行<br>可以跨分区<br>指向的是另一个文件的路径；其大小为指向的路径字符串的长度；不增加或减少目标文件inode的引用计数；<br>语法：<code>ln -s filename</code>  </p></div><h1 id="file"><a href="#file" class="headerlink" title="file"></a>file</h1><p>文件可以包含多种类型的数据。检查文件的类型，然后确定适当的打开命令或应用程序使用<br>file [options] <filename>… <font color="red"><br>-b</font> 列出文件辨识结果时，不显示文件名称<font color="red"><br>-f</font> filelist 列出文件filelist中文件名的文件类型<font color="red"><br>-F</font> 使用指定分隔符号替换输出文件名后默认的”:”分隔符<font color="red"><br>-L</font> 查看对应软链接对应文件的文件类型</filename></p><h1 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h1><p>-c:取反<br>-s:压缩重复字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 data]# tr &apos;a-z&apos; &apos;A-Z&apos;</span><br><span class="line">dfsjfidshijfidsijifjdisjidishifj</span><br><span class="line">DFSJFIDSHIJFIDSIJIFJDISJIDISHIFJ</span><br><span class="line">jdihsifjdisjfiiehuHIHIJ</span><br><span class="line">JDIHSIFJDISJFIIEHUHIHIJ</span><br><span class="line">[root@centos7 data]#</span><br><span class="line">[root@centos7 data]# tr -t &quot;a-d&quot; &quot;1-3&quot; </span><br><span class="line">fdjfreg</span><br><span class="line">fdjfreg</span><br><span class="line">aaaaaasdfdsadfgh</span><br><span class="line">111111sdfds1dfgh</span><br><span class="line">abcfg</span><br><span class="line">123fg</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 data]#</span><br><span class="line">[root@centos7 data]# tr -d &apos;0-9&apos;</span><br><span class="line">dsgds546y7ujyr564wef5</span><br><span class="line">dsgdsyujyrwef</span><br><span class="line">[root@centos7 data]#</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 data]# tr -dc &apos;0-9&apos; </span><br><span class="line">dsgrere54545tg653r45</span><br><span class="line">5454565345[root@centos7 data]#  </span><br><span class="line">[root@centos7 data]# tr -s &apos;dfg&apos;</span><br><span class="line">ddfsggvffcddd</span><br><span class="line">dfsgvfcd</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/04/03/AcrCrj.png" alt=""></p><h1 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h1><p>管理员：root, 0<br>普通用户：1-60000 自动分配<br>系统用户：1-499, 1-999 （CentOS7）<br>对守护进程获取资源进行权限分配登录用户：500+, 1000+（CentOS7）</p><h2 id="Linux安全上下文"><a href="#Linux安全上下文" class="headerlink" title="Linux安全上下文"></a>Linux安全上下文</h2><p>运行中的程序：进程 (process) 以进程发起者的身份运行：<br>root: /bin/cat<br>mage: /bin/cat<br>进程所能够访问资源的权限取决于进程的运行者的身份</p><h2 id="组"><a href="#组" class="headerlink" title="组"></a>组</h2><p>Linux组：Groupname/GID<br>管理员组：root, 0<br>普通组：<br>　系统组：1-499, 1-999（CENTOS7）<br>　普通组：500+, 1000+（CENTOS7）</p><div class="alert alert-success"><i class="fa fa-lightbulb-o"></i> Linux组的类别:<br>用户的主要组(primary group)<br>用户必须属于一个且只有一个主组<br>组名同用户名，且仅包含一个用户，私有组<br>用户的附加组(supplementary group)<br>一个用户可以属于零个或多个辅助组</div><h2 id="用户和组的配置文件"><a href="#用户和组的配置文件" class="headerlink" title="用户和组的配置文件"></a>用户和组的配置文件</h2><div class="alert alert-danger"><i class="fa fa-bug"></i> Linux用户和组的主要配置文件：<br>/etc/passwd：用户及其属性信息(名称、UID、主组ID等）<br>/etc/group：组及其属性信息<br>/etc/shadow：用户密码及其相关属性<br>/etc/gshadow：组密码及其相关属性 </div><h2 id="passwd-文件格式"><a href="#passwd-文件格式" class="headerlink" title="passwd 文件格式"></a>passwd 文件格式</h2><p>login name：登录用名（wang）<br>passwd：密码 (x)<br>UID：用户身份编号 (1000)<br>GID：登录默认所在组编号 (1000)<br>GECOS：用户全名或注释<br>home directory：用户主目录 (/home/wang)<br>shell：用户默认使用shell (/bin/bash)</p><p>##shadow文件格式<br>登录用名<br>用户密码:一般用sha512加密<br>从1970年1月1日起到密码最近一次被更改的时间<br>密码再过几天可以被变更（0表示随时可被变更）<br>密码再过几天必须被变更（99999表示永不过期）<br>密码过期前几天系统提醒用户（默认为一周）<br>密码过期几天后帐号会被锁定<br>从1970年1月1日算起，多少天后帐号失效</p><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">groupmems -a p2 -g p1:将用户p2加入p1组   </span><br><span class="line">groupmems -d p2 -g p1:将用户p2从p1组删除   </span><br><span class="line">[root@centos7 ~]# getent group p1  </span><br><span class="line">p1:x:1001:p2  </span><br><span class="line">[root@centos7 ~]# getent group p2  </span><br><span class="line">p2:x:1002:  </span><br><span class="line">[root@centos7 ~]#</span><br><span class="line">newgrp p1：将当前用户的主组临时修改为p1,要求当前用户必须在p1组。</span><br></pre></td></tr></table></figure><div class="note success"><p><br>vipw == vi /etc/passwd<br>vigr == vi /etc/grow<br>useradd<br>-o:忽略id的唯一性检查<br>-r:建立系统用户，他默认不会创建家目录<br>-s:指定shell类型<br>-c:描述<br>groups x:查看用户x属于那些组<br>-N：不要创建以用户名称为名的群组(默认加组users)  </p></div><p>新建用户默认属性文件： </p><h1 id="id"><a href="#id" class="headerlink" title="id"></a>id</h1><h1 id="su"><a href="#su" class="headerlink" title="su"></a>su</h1><h1 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h1><h1 id="chage"><a href="#chage" class="headerlink" title="chage"></a>chage</h1><p>修改用户密码状态chage<br>chage [选项] 用户名   <font color="red"><br>-l</font>:列出用户的详细密码状态  <strong><font color="red"><br>-d 日期:修改密码最后一次更改日期(shadow3字段)</font></strong>  <font color="red"><br>-m 天数</font>:两次密码修改间隔(4字段)  <font color="red"><br>-M 天数</font>:密码有效期(5字段)  <font color="red"><br>-W 天数</font>:密码过期前警告天数(7字段)  <font color="red"><br>-I 天数</font>:密码过后宽限天数(7字段)  <font color="red"><br>-E 日期</font>:账号失效时间(8字段)<br><code>chage -d 0 username</code><center><font size="2">这个命令其实是把密码修改日期归0了(shadow第3字段)，这样用户只要一登录就要修改密码。第三字段是指密码最后一次修改时间的日期。1970年1月1号到现在修改密码的时间戳。如果第3字段改为0，系统会认为用户没有修改过操作密码，那么当此用户一旦登录系统就会提示要修改密码，才可正常使用。</font></center>.</p><h1 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h1><h1 id="groupmems"><a href="#groupmems" class="headerlink" title="groupmems"></a>groupmems</h1><h1 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h1><h1 id="SUID-SGID-STICKY"><a href="#SUID-SGID-STICKY" class="headerlink" title="SUID SGID STICKY"></a>SUID SGID STICKY</h1><h1 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a>chattr</h1><h1 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h1><h1 id="cat-head-tail-cut"><a href="#cat-head-tail-cut" class="headerlink" title="cat,head,tail,cut"></a>cat,head,tail,cut</h1><h1 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h1><h1 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h1><h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><h1 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h1><h1 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h1><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p><font color="red">–color=auto</font>: 对匹配到的文本着色显示 <font color="red"><br>-v</font>: 显示不被pattern匹配到的行 <font color="red"><br>-i</font>: 忽略字符大小写 <font color="red"><br>-n</font>：显示匹配的行号 <font color="red"><br>-c</font>: 统计匹配的行数 <font color="red"><br>-o</font>: 仅显示匹配到的字符串 <font color="red"><br>-q</font>: 静默模式，不输出任何信息 <font color="red"><br>-A</font> #: after, 后#行 <font color="red"><br>-B</font> #: before, 前#行 <font color="red"><br>-C</font> #：context, 前后各#行 <font color="red"><br>-e</font>：实现多个选项间的逻辑or关系 <font color="red"><br><code>grep –e &#39;cat&#39; -e dog&#39; file</code><br>-w</font>：匹配整个单词 <font color="red"><br>-E</font>：使用ERE <font color="red"><br>-F</font>：相当于fgrep，不支持正则表达式 <font color="red"><br>-f</font> file: 根据模式文件处理</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h2><p>基本正则表达式元字符<br><code>.</code>    匹配任意单个字符<br><code>[]</code> 匹配指定范围内的任意单个字符，示例：[wang]    [0-9]    [a-z]    [a-zA-Z]<br><code>[^]</code> 匹配指定范围外的任意单个字符<br><code>[:alnum:]</code> 字母和数字<br><code>[:alpha:]</code> 代表任何英文大小写字符，亦即 A-Z, a-z<br><code>[:lower:]</code> 小写字母    [:upper:] 大写字母<br><code>[:blank:]</code> 空白字符（空格和制表符）<br><code>[:space:]</code> 水平和垂直的空白字符（比[:blank:]包含的范围广） [:cntrl:] 不可打印的控制字符（退格、删除、警铃…）<br><code>[:digit:]</code> 十进制数字 [:xdigit:]十六进制数字<br><code>[:graph:]</code> 可打印的非空白字符<br><code>[:print:]</code> 可打印字符[:punct:] 标点符号</p><h2 id="匹配次数"><a href="#匹配次数" class="headerlink" title="匹配次数"></a>匹配次数</h2><p>用在要指定次数的字符后面，用于指定前面的字符要出现的次数<br><code>*</code>    匹配前面的字符任意次，包括0次贪婪模式：尽可能长的匹配<br><code>.*</code> 任意长度的任意字符<br><code>\?</code> 匹配其前面的字符0或1次<br><code>\+</code> 匹配其前面的字符至少1次<br><code>\{n\}</code> 匹配前面的字符n次<br><code>\{m,n\}</code> 匹配前面的字符至少m次，至多n次<br><code>\{,n\}</code> 匹配前面的字符至多n次<br><code>\{n,\}</code> 匹配前面的字符至少n次</p><h2 id="位置锚定"><a href="#位置锚定" class="headerlink" title="位置锚定"></a>位置锚定</h2><p>定位出现的位置：<br><code>^</code> 行首锚定，用于模式的最左侧<br><code>$</code>行尾锚定，用于模式的最右侧<br><code>^PATTERN$</code>    用于模式匹配整行<br><code>^$</code>    空行<br><code>^[[:space:]]*$</code>    空白行<br><code>\&lt;</code>      #锚定单词的开始，如:<code>&#39;\&lt;grep&#39;匹配包含以grep开头的单词的行</code><br><code>\&gt;</code>      #锚定单词的结束，如:<code>&#39;grep\&gt;&#39;匹配包含以grep结尾的单词的行</code><br><code>\b</code>      #单词锁定符，如: <code>&#39;\bgrep\b&#39;只匹配grep</code></p><p><table><tr><td bgcolor="red">数字,字母,下划线,不能作为单词的分隔符。</td></tr></table>. </p><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p><code>\(\)</code>  将一个或多个字符捆绑在一起，当作一个整体处理，如：<code>\(root\)\+</code><br>分组括号中的模式匹配到的内容会被正则表达式引擎记录于内部的变量中，这些变量的命名方式为: \1, \2, \3, …<br><code>\1</code>    表示从左侧起第一个左括号以及与之匹配右括号之间的模式所匹配到的字符<br>    示例：    <code>\(string1\+\(string2\)*\)</code><br><code>\1: string1\+\(string2\)*</code><br><code>\2: string2</code><br>后向引用：引用前面的分组括号中的模式所匹配字符，而非模式本身<br>或者：|<br>示例：a|b: a或b    C|cat: C或cat    (C|c)at:Cat或cat</p><blockquote class="blockquote-center"><p><code>^</code>    行首<br><code>$</code>　行尾　　　<br><code>.</code> 任意单一字符　　　<br><code>[]</code>[]内任意单一字符　　　<br><code>[^]</code> 除[]内任意单一字符　　　<br><code>*</code> 前面字符重复不确定次数　　　<br><code>\+</code> 前面字符重复一次以上不确定次数　　　<br><code>\?</code> 前面字符重复0或1次　　　<br><code>\</code>     转义符<br><code>.*</code> 任意长度字符　　　<br><code>\{n\}</code> 前面字符重复n次　　　<br><code>\{n,\}</code> 前面字符重复n次以上<br><code>\{m,n\}</code> 前面字符重复m次和n次之间</p></blockquote><h1 id="扩展正则"><a href="#扩展正则" class="headerlink" title="扩展正则"></a>扩展正则</h1><p><table><tr><td bgcolor="#003153"><font color="black"><font size="4"><code>egrep = grep -E</code><br>egrep [OPTIONS] PATTERN [FILE…]<br>扩展正则表达式的元字符：<br><i class="fa fa-child fa-2x" aria-hidden="true"></i><font color="36bf36">字符匹配：<code>.</code>任意单个字符 　　<code>[]</code> 指定范围的字符　　<code>[^]</code> 不在指定范围的字符 </font><br><i class="fa fa-male fa-2x" aria-hidden="true"></i><font color="66ff59">次数匹配：<code>*</code>    匹配前面字符任意次　　<code>?</code> 0或1次 　　<code>+</code> 1次或多次　　 <code>{m}</code> 匹配m次　　 <code>{m,n}</code> 至少m，至多n次 </font><br><i class="fa fa-female  fa-2x" aria-hidden="true"></i><font color="4de680">位置锚定：<code>^</code>    行首 　<code>$</code> 行尾　　<code>\&lt;</code>　#锚定单词的开始　　<code>\&gt;</code>　#锚定单词的结束　　<code>\b</code>　#单词锁定符　</font><br><i class="fa fa-child fa-2x" aria-hidden="true"></i><font color="8ce600">分组：<code>()</code>　　后向引用：\1, \2, …<br>或者：<code>a|b</code>a或b　　　<code>C|cat</code>C或cat　　　<code>(C|c)at</code>Cat或cat<br></font></font></font></td></tr></table>.</p><h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><h1 id="脚本编程"><a href="#脚本编程" class="headerlink" title="脚本编程"></a>脚本编程</h1><h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><h1 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h1><h1 id="颜色指定"><a href="#颜色指定" class="headerlink" title="颜色指定"></a>颜色指定</h1><h1 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h1><h1 id="Bash的文件权限测试"><a href="#Bash的文件权限测试" class="headerlink" title="Bash的文件权限测试"></a>Bash的文件权限测试</h1><h1 id="Bash的文件属性测试"><a href="#Bash的文件属性测试" class="headerlink" title="Bash的文件属性测试"></a>Bash的文件属性测试</h1><h1 id="Bash的组合测试条件"><a href="#Bash的组合测试条件" class="headerlink" title="Bash的组合测试条件"></a>Bash的组合测试条件</h1><h1 id="read"><a href="#read" class="headerlink" title="read"></a>read</h1><h1 id="编辑配置文件生效"><a href="#编辑配置文件生效" class="headerlink" title="编辑配置文件生效"></a>编辑配置文件生效</h1><h1 id="Bash-退出任务"><a href="#Bash-退出任务" class="headerlink" title="Bash 退出任务"></a>Bash 退出任务</h1><h1 id=""><a href="#" class="headerlink" title="$-"></a>$-</h1><h1 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h1><h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1><p><i class="fa fa-dot-circle-o"></i>指搜索层级<br>-maxdepth level 最大搜索目录深度，指定目录为第1级<br>-maindepth level 最小搜索目录深度<br><code>find /data -maxdepth 2 -mindepth 2 -name &quot;*.sh&quot;</code> 表示只在/data下的二级目录下搜索<br><i class="fa fa-dot-circle-o"></i>先处理目录内的文件，再处理目录<br>　-depth<br><i class="fa fa-dot-circle-o"></i>根据文件名和inode查找：<br>　-name “文件名称”:支持使用glob<br>　　*,?,[],[^]<br>　-iname “文件名称”:不区分字母大小写<br>　-inum n 按inode号查找<br>　-samefile name 相同inode号的文件<br>　-links n 链接数为n的文件<br>　-reges “PATTERN”:以PATTERN匹配整个文件路径，而非文件名称</p><h2 id="查找条件"><a href="#查找条件" class="headerlink" title="查找条件"></a>查找条件</h2><p><i class="fa fa-dot-circle-o"></i>根据属主，属组查找：<font color="red"><br>-user USERNAME</font> :查找属主为指定用户(UID)的文件 <font color="red"><br>-group GROUPNAME</font> :查找属组为指定组(GID)的文件 <font color="red"><br>-uid UserID</font> :查找属主为指定的UID号的文件 <font color="red"><br>-gid GroupID</font> :查找属组为指定的GID号的文件 <font color="red"><br>-nouser</font> :查找没有属主的文件 <font color="red"><br>-nogroup</font> :查找没有属组的文件</p><h2 id="根据文件类型查找："><a href="#根据文件类型查找：" class="headerlink" title="根据文件类型查找："></a>根据文件类型查找：</h2><p>-type TYPE: <font color="red"><br>f</font> :普通文件 <font color="red"><br>d</font> :目录文件 <font color="red"><br>l</font> :符号链接文件 <font color="red"><br>s</font> :套接字文件 <font color="red"><br>b</font> :块设备文件 <font color="red"><br>c</font> :字符设备文件 <font color="red"><br>p</font> :管道文件<br>空文件或目录： -empty<br><code>find /app -type d -empty</code></p><h2 id="查找条件-1"><a href="#查找条件-1" class="headerlink" title="查找条件"></a>查找条件</h2><p><i class="fa fa-dot-circle-o"></i>组合条件：<br> 与：-a<br> 或：-o<br> 非：-not,!<br><i class="fa fa-dot-circle-o"></i>德 摩根定律：<br>(非A)或(非B)=非(A或B)<br>(非A)且(非B)=非(A或B)<br>示例：<br> !A -a !B = !(A -o B)<br> !A -o !B = !(A -a B)<br><img src="/2018/08/28/马哥笔记/find查找条件非或图.png" alt=""></p><h2 id="根据文件大小来查找"><a href="#根据文件大小来查找" class="headerlink" title="根据文件大小来查找"></a>根据文件大小来查找</h2><p> -size[+|-]#UNIT<br> 　常用单位:k,M,G,c(byte)<br> #UNIT:(#-1,#]<br> 　如: 6k表示(5k,6k]<br> -#UNIT:[0,#-1]<br> 　如: +6k表示(0,5k]<br> +#UNIT:(#,∞)<br> 　如: +6k表示(6k,∞)</p><h2 id="根据时间戳："><a href="#根据时间戳：" class="headerlink" title="根据时间戳："></a>根据时间戳：</h2><p>以”天”为单位<br>-atime [+|-]#,<br>　#:[#,#+1)<br>　+#:[#+1,∞]<br>　-#:[0,#)<br>-mtime<br>-ctiime<br>以”分钟”为单位<br>-amin<br>-mmin<br>-cmin</p><div class="note warning"><p><br>atime、ctime、mtime的区别<br>atime：上一次访问这个文件是什么时候<br>ctime：上一次改变这个文件的属性(元数据)是什么时候<br>mtime：上一次改变这个文件的内容是什么时候 </p></div><h2 id="根据权限查找："><a href="#根据权限查找：" class="headerlink" title="根据权限查找："></a>根据权限查找：</h2><p>-perm[/|-]MODE<br>　MODE:精确权限匹配<br>　/MODE:任何一类(u,g,o)对象的权限中只要能一位匹配即可，或关系，从centos7开始淘汰<br>　-MODE:每一类对象都必须同时拥有指定权限，与关系<br>　０:表示不关注<br><span id="inline-green">find -perm 755会匹配权限模式恰好是755的文件<br>只有当任意人有写权限时，find -perm +222就会匹配<br>只要当每个人都有写权限时，find -perm -222才会匹配<br>只要当其他人(other)有写权限时，find -perm -002 才会匹配 </span></p><h2 id="处理动作"><a href="#处理动作" class="headerlink" title="处理动作"></a>处理动作</h2><p><code>-exec COMMAND {} \;</code>:对查到的每个文件执行有COMMAND指定的命令<br><code>{}</code>:用于引用查找到的文件名称自身<br>find传递查找到的文件至后面的命令时，查找到所有符合条件的文件一次性传递给后面的命令</p><h2 id="参数替换xargs"><a href="#参数替换xargs" class="headerlink" title="参数替换xargs"></a>参数替换xargs</h2><div class="alert alert-info"><i class="fa fa-info"></i>由于很多命令不支持管道<code>|</code>来传递参数，而日常工作中有这个必要，所以就有了xargs命令<br><i class="fa fa-pencil"></i>xargs用于产生某个命令的参数，xargs可以读入stdin的数据，并且已空格符或回车将stdin的数据分隔为arguments<br><i class="fa fa-pencil"></i>注意:文件名或者是其他意义的名词内含有空格符的情况<br><i class="fa fa-pencil"></i>有些命令不能接受过多参数，命令执行可能会失败，xargs可以解决<br>示例：<br>ls f* | xargs rm<br>find /sbin -perm +700 | ls -l　这个命令是错误的,ls不支持标准输入<br>find /sbin -perm +7000 | xargs ls -l 查找特殊权限的文件<br>find和xargs格式:find | xargs COMMAND </div><h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><p>compress [-dfvcVr]\[-b maxbits]\[file…] <font color="red"><br>-d</font> :解压缩，相当于gunzip <font color="red"><br>-c</font> :结果输出至标准输出，不删除原文件 <font color="red"><br>-v</font> :显示详情 <font color="red"><br>uncompress</font> 解压缩<br>zcat file.Z &gt; file</p><h2 id="gzip-gunzip"><a href="#gzip-gunzip" class="headerlink" title="gzip/gunzip"></a>gzip/gunzip</h2><p>-d:解压缩，相当于gunzip<br>-c :结果输出至标准输出，保留源文件不改变 <font color="red"><br>-#</font> :1-9，指定压缩比，值越大压缩比越大 <font color="red"><br>zcat:不解压缩的前提下查看文本文件内容</font><br>示例：<div class="alert alert-danger"><i class="fa fa-bug"></i> gzip -c messages &gt; messages.gz<br>gzip -c -d message.gz &gt; messages<br>zcat messages.gz &gt; messages<br>cat messages | gzip &gt; m.gz</div></p><h2 id="bzip2-bunzip2-bzcat"><a href="#bzip2-bunzip2-bzcat" class="headerlink" title="bzip2/bunzip2/bzcat"></a>bzip2/bunzip2/bzcat</h2><p>bzip2 [option]…FILE… <font color="red"><br>-k</font> :keep，保留原文件 <font color="red"><br>-d</font> :解压缩 <font color="red"><br>-#</font> :1-9,压缩比，默认为9 <font color="red"><br>bzcat:不显示解压缩的前提下查看文件文件内容</font></p><h2 id="xz-unxz-xzcat"><a href="#xz-unxz-xzcat" class="headerlink" title="xz/unxz/xzcat"></a>xz/unxz/xzcat</h2><p>xz[OPTION]…FILE… <font color="red"><br>-k</font> :keep，保留原文件 <font color="red"><br>-d</font> :解压缩 <font color="red"><br>-#</font> :1-9，压缩比，默认为6<br>unxz file.xz 解压缩<br>xzcat: 不显示解压缩的前提下查看文本文件内容</p><h2 id="zip-unzip"><a href="#zip-unzip" class="headerlink" title="zip/unzip"></a>zip/unzip</h2><p><i class="fa fa-compress"></i> 打包压缩<br><code>zip -r /backup/sysconfig /etc/sysconfig</code><br>解包解压缩<br><code>unzip sysconfig.zip</code><br><code>cat /var/log/messages | zip messages -</code><br><code>unzip -p message &gt; message</code></p><h1 id="tar工具"><a href="#tar工具" class="headerlink" title="tar工具"></a>tar工具</h1><p>-exclude 排除文件<br>　<code>tar zcvf /root/a3.tgz --exclude=/app/host1 --exclude=/app/host2/app</code><br>-T选项指定输入文件，-X选项指定包含要排除的文件列表<br>　<code>tar zcvf mybackup.tgz -T /root/includefilelist -X /root/excludefilelist</code></p><div class="alert alert-info"><i class=""></i> splist:: 分割一个文件为多个文件<br>分割大的tar文件为多份小文件<br>split -b Size -d tar-file-name prefix-name<br>split -b 1M -d mybackup.tgz mybackup-parts<br>split -b 1m mybackup.taz mybackup-parts<br>合并：<br>cat mybackup-parts* &gt; mybackup.tar.gz</div><p><code>spilt -b 2M -d /root/data.tar.xz databak</code> -d会以数字结尾</p><h1 id="cpio"><a href="#cpio" class="headerlink" title="cpio"></a>cpio</h1><p>功能：cpio用于创建、解压归档文件，也可以对归档文件执行拷入拷出的动作，即向归档文件中追加文件，或从归档文件中提取文件。它也支持tar格式的归档文件，但是对压缩后的tar(如.tar.gz格式)就没法支持了，cpio毕竟不会调用对应的(解)压缩工具。<div class="alert alert-warning"><i class="fa fa-cog"></i>cpio命令是通过重定向的方式将文件进行打包备份，还原恢复的工具，它可以解压以<code>.cpio</code>或者<code>.tar</code>结尾的文件</div> cpio [选项] &gt; 文件名或者设备名<br>cpio [选项] &lt; 文件名或者设备名 <font color="red"><br>-o</font>    将文件拷贝打包成文件或者将文件输出到设备上 <font color="red"><br>-O</font> filename    输出到指定的归档文件名 <font color="red"><br>-A</font>    向已存在的归档文件中追加文件 <font color="red"><br>-i</font>    解包，将打包文件解压或将设备上的备份还原到系统 <font color="red"><br>-I</font> filename    对指定的归档文件名解压 <font color="red"><br>-t</font>    预览，查看文件内容或者输出到设备上的文件内容 <font color="red"><br>-F</font> filename    使用指定的文件名替代标准输入或输出 <font color="red"><br>-d</font>    解包生成目录，在cpio还原时，自动的建立目录 <font color="red"><br>-v</font>    显示打包过程中的文件名称</p><p><table><tr><td bgcolor="#00808c"> <i class="fa fa-pencil-square-o" aria-hidden="true"></i><font color="red"> 将etc目录备份</font>：<code>find ./etc -print |cpio -ov &gt;bak.cpio</code><br><i class="fa fa-pencil-square-o" aria-hidden="true"></i><font color="red">  将/data内容追加bak.cpio</font> <code>find /data | cpio -oA -F bak.cpio</code><br><i class="fa fa-pencil-square-o" aria-hidden="true"></i><font color="red">  内容预览</font><br><code>cpio –tv &lt; etc.cpio</code><br><i class="fa fa-pencil-square-o" aria-hidden="true"></i><font color="red">  解包文件</font> <code>cpio –idv &lt; etc.cpio</code> </td></tr></table>.</p><h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><p><font color="red">-n </font> 不输出模式空间内容到屏幕，即不自动打印 <font color="red"><br>-e</font> 多点编辑 <font color="red"><br>-f</font> /PATH/SCRIPT_FILE    从指定文件中读取编辑脚本 <font color="red"><br>-r</font> 支持使用扩展正则表达  <font color="red"><br>-i.bak</font>     备份文件并原处编辑<br>script:<br>　　<code>&#39;地址命令&#39;</code><br>地址定界：　<table><tr><td bgcolor="003153"><font size="3"><font color="36bf36"><font face="Microsoft YaHei">(1)    不给地址：对全文进行处理<br>(2)    单地址：<br>　　<code>#</code>: 指定的行，<code>$</code>：最后一行  <code>/pattern/</code>：被此处模式所能够匹配到的每一行<br>(3)    地址范围：<br>　　<code>#,#</code>  <code>#,+#</code>  <code>pat1/,/pat2/</code><br>　　<code>#,/pat1/</code><br>(4)    <code>~</code>：步进  1~2 奇数行,  2~2 偶数行<br><code>sed -i.back &#39;/^root/aadmin line passwd&#39;</code> 插入并备份原文件<br></font></font></font></td></tr></table>.</p><h2 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h2><p><table><tr><td bgcolor="003366"><font size="3"><font face="Microsoft YaHei"><font color="2aae2a"><code>d</code> 删除模式空间匹配的行，并立即启用下一轮循环<br><code>p</code> 打印当前模式空间内容，追加到默认输出之后<br><code>a</code> []text在指定行后面追加文本，支持使用\n实现多行追加<br><code>i</code> []text在行前面插入文本<br><code>c</code> []text    替换行为单行或多行文本<br><code>w</code> /path/file 保存模式匹配的行至指定文件<br><code>r</code> /path/file读取指定文件的文本至模式空间中匹配到的行后<br><code>=</code> 为模式空间中的行打印行号<br><code>!</code> 模式空间中匹配行取反处理<br></font></font></font></td></tr></table> <code>sed  &#39;/^UUID/r /etc/issue&#39; /etc/fstab</code> 读取/etc/issue中的内容到/etc/fstab UUID开头的行后 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">seq 10 | sed  &apos;1~2d&apos; 输出双数的行  </span><br><span class="line">seq 10 | sed &apos;axxx\nyyy\nzzz&apos;   </span><br><span class="line">sed &apos;/^root/i\  admin line&apos; /etc/passwd 加入了空格  </span><br><span class="line">sed &apos;/^root/aadmin line&apos; /etc/passwd  </span><br><span class="line">sed &apos;/^UUID/w f1&apos; /etc/fstab  </span><br><span class="line">sed  &apos;/^UUID/=&apos; /etc/fstab  打印UUID开头的行显示行号</span><br></pre></td></tr></table></figure><h2 id="sed替换"><a href="#sed替换" class="headerlink" title="sed替换"></a>sed替换</h2><p><code>s///</code>    查找替换,支持使用其它分隔符，<code>s@@@</code>，<code>s###</code><br>替换标记：<br><code>g</code>    行内全局替换<br><code>p</code>    显示替换成功的行<br><code>w /PATH/FILE</code>  将替换成功的行保存至文件中<br>例：<br><code>sed -n  &#39;s/UUID/tempfilesystem/gp&#39; /etc/fstab</code><br><code>ifconfig | sed -n &#39;2p&#39; | sed &#39;s/.*inet //&#39;|sed &#39;s@ netmask.*$@@&#39;</code><br><code>ifconfig | sed -nr &#39;2s/.*t (.*) net.*/\1/gp&#39;</code><br><code>ifconfig ens33 | sed -r &#39;2!d;s/.*inet (addr:)?//;s/  .*//&#39;</code> sed取IP地址<br><code>echo /etc/sysconfig/network-scripts/ | sed -nr &#39;s#(^.*/)([^/].*)/?$#\1#p&#39;</code>取基名（不理解）<br>sed大小写转换：<br><code>sed -r &#39;s/[[:alpha:]]/\u&amp;/g&#39; /etc/fstab</code><br><code>sed -r &#39;s/[[:alpha:]]/\l&amp;/g&#39; /etc/fstab</code></p><h2 id="sed-示例"><a href="#sed-示例" class="headerlink" title="sed 示例"></a>sed 示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sed ‘2p’ /etc/passwd</span><br><span class="line">sed –n ‘2p’ /etc/passwd</span><br><span class="line">sed –n ‘1,4p’ /etc/passwd</span><br><span class="line">sed –n ‘/root/p’  /etc/passwd</span><br><span class="line">sed –n ‘2,/root/p’  /etc/passwd 从2行开始</span><br><span class="line">sed -n ‘/^$/=’ file 显示空行行号</span><br><span class="line">sed –n –e ‘/^$/p’ –e ‘/^$/=’ file</span><br><span class="line">sed  ‘/root/a\superman’ /etc/passwd行后</span><br><span class="line">sed ‘/root/i\superman’ /etc/passwd 行前</span><br><span class="line">sed ‘/root/c\superman’ /etc/passwd 代替行</span><br><span class="line">c:是表示将我现在所写的字符与所找到的行全部替换。不是字符替换。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sed ‘/^$/d’ file</span><br><span class="line">sed ‘1,10d’  file</span><br><span class="line">nl  /etc/passwd | sed ‘2,5d’</span><br><span class="line">nl  /etc/passwd | sed ‘2a tea’</span><br><span class="line">sed &apos;s/test/mytest/g&apos; example</span><br><span class="line">sed –n ‘s/root/&amp;superman/p’ /etc/passwd 单词后</span><br><span class="line">sed –n ‘s/root/superman&amp;/p’ /etc/passwd 单词前</span><br><span class="line">sed -e ‘s/dog/cat/’ -e ‘s/hi/lo/’ pets</span><br><span class="line">sed –i.bak ‘s/dog/cat/g’ pets</span><br><span class="line">nl:表示显示行号，空行不显示</span><br><span class="line">&amp;：代表前面找到的内容</span><br></pre></td></tr></table></figure><h2 id="sed高级"><a href="#sed高级" class="headerlink" title="sed高级"></a>sed高级</h2><p>P：打印模式空间开端至\n内容，并追加到默认输出之前<br>h: 把模式空间中的内容覆盖至保持空间中<br>H：把模式空间中的内容追加至保持空间中<br>g: 从保持空间取出数据覆盖至模式空间<br>G：从保持空间取出内容追加至模式空间<br>x: 把模式空间中的内容与保持空间中的内容进行互换<br>n: 读取匹配到的行的下一行覆盖至模式空间<br>N：读取匹配到的行的下一行追加至模式空间<br>d: 删除模式空间中的行<br>D：如果模式空间包含换行符，则删除直到第一个换行符的模式空间中的文本，并不会读取新的输入行，而使用合成的模式空间重新启动循环。如果模式空间不包含换行符，则会像发出d命令那样启动正常的新循环<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sed -n &apos;n;p&apos; FILE</span><br><span class="line">sed &apos;1!G;h;$!d&apos; FILE</span><br><span class="line">sed‘N;D’FILE</span><br><span class="line">sed &apos;$!N;$!D&apos; FILE</span><br><span class="line">sed &apos;$!d&apos; FILE</span><br><span class="line">sed ‘G’ FILE</span><br><span class="line">sed ‘g’ FILE</span><br><span class="line">sed ‘/^$/d;G’ FILE</span><br><span class="line">sed &apos;n;d&apos; FILE</span><br><span class="line">sed -n &apos;1!G;h;$p&apos; FILE</span><br></pre></td></tr></table></figure></p><h1 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h1><p><font color="red">–test</font>: 测试安装，但不真正执行安装，即dry run模式<font color="red"><br>–nodeps</font>：忽略依赖关系<font color="red"><br>–replacepkgs</font> 强制重新安装已经安装的软件包<font color="red"><br>–replacefiles</font> 替换属于其他软件包的文件<font color="red"><br>–nosignature</font>: 不检查来源合法性 <font color="red"><br>–nodigest</font>：不检查包完整性<font color="red"><br>–noscripts</font>：不执行程序包脚本<br>　　　%pre:安装前脚本　–nopre<br>　　　%post: 安装后脚本 –nopost<br>　　　%preun: 卸载前脚本 –nopreun　<br>　　　%postun:卸载后脚本 –nopostun</p><h2 id="rpm升级"><a href="#rpm升级" class="headerlink" title="rpm升级"></a>rpm升级</h2><p><font color="red">upgrade</font>：安装有旧版程序包，则“升级”<br>如果不存在旧版程序包，则“安装” freshen：安装有旧版程序包，则“升级”<br>如果不存在旧版程序包，则不执行升级操作 rpm -Uvh PACKAGE_FILE …<br>rpm -Fvh PACKAGE_FILE …<font color="red"><br>–oldpackage</font>：降级  <font color="red"><br>–force</font>: 强制安装 <div class="alert alert-warning"><i class="fa fa-bell"></i> 注意：<br>(1)    不要对内核做升级操作；Linux支持多内核版本并存，因此，可以直接安装新版本内核<br>(2)    如果原程序包的配置文件安装后曾被修改，升级时，新版本的提供的同一个配置文件并不会直接覆盖老版本的配置文件，而把新版本的文件重命名(FILENAME.rpmnew)后保留</div>.</p><h2 id="包查询"><a href="#包查询" class="headerlink" title="包查询"></a>包查询</h2><p><font color="red">-a</font>: 所有包 <font color="red"><br>-f</font>: 查看指定的文件由哪个程序包安装生成 <font color="red"><br>-p rpmfile</font>：针对尚未安装的程序包文件做查询操作 <font color="red"><br>–whatprovides CAPABILITY</font>：查询指定的CAPABILITY由哪个包所提供 <font color="red"><br>–whatrequires CAPABILITY</font>：查询指定的CAPABILITY被哪个包所依赖<br><code>rpm2cpio 包文件|cpio –itv 预览包内文件</code><br><code>rpm2cpio 包文件|cpio –id &quot;\*.conf&quot; 释放包内文件</code> <font color="red"><br>–changelog</font>：查询rpm包的changelog  <font color="red"><br>-c</font>: 查询程序的配置文件 <font color="red"><br>-d</font>: 查询程序的文档 <font color="red"><br>-i</font>: information <font color="red"><br>-l</font>: 查看指定的程序包安装后生成的所有文件 <font color="red"><br>–scripts</font>：程序包自带的脚本 <font color="red"><br>–provides</font>: 列出指定程序包所提供的CAPABILITY <font color="red"><br>-R</font>: 查询指定的程序包所依赖的CAPABILITY</p><h2 id="包校验"><a href="#包校验" class="headerlink" title="包校验"></a>包校验</h2><p><font color="lime">#</font>rpm -V 已安装的包名<br>选项：-V 校验指定RPM包中的文件。(verify)  <font color="lime"><br>[root@Tiger ~]#</font>rpm -V httpd<br><strong>S.5….T.  c /etc/httpd/conf/httpd.conf</strong><br>验证内容中的8个信息的具体内容如下：  <font color="red"><br>S</font>：文件大小是否改变；  <font color="red"><br>M</font>：文件的类型或文件的权限(r w x)是否被改变；  <font color="red"><br>5</font>：文件MD5校验和是否改变(可以看成文件的内容是否改变)；  <font color="red"><br>D</font>：设备的主，从设备号是否改变；  <font color="red"><br>L</font>：文件路径是否改变；  <font color="red"><br>U</font>：文件的属主(所有者)是否改变；  <font color="red"><br>G</font>：文件的属组是否改变；  <font color="red"><br>T</font>：文件的修改时间是否改变；<br><strong>文件类型：</strong> <font color="red"><br>c</font> :配置文件(config file)  <font color="red"><br>d</font> :普通文档(documentation)  <font color="red"><br>g</font> :”鬼”文件(ghost file),很少见，就是该文件不应该被这个RPM包包含  <font color="red"><br>l</font> :授权文件(license file)  <font color="red"><br>r</font> :描述文件(read me)</p><h2 id="秘钥"><a href="#秘钥" class="headerlink" title="秘钥"></a>秘钥</h2><p>包来源合法性验正及完整性验证完整性验证：SHA256<br>来源合法性验证：RSA<br>公钥加密<br>对称加密：加密、解密使用同一密钥非对称加密：密钥是成对儿的<br>public key: 公钥，公开所有人<br>secret key: 私钥, 不能公开<br>导入所需要公钥<br><code>rpm -K|checksig rpmfile</code> 检查包的完整性和签名<br><code>rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</code> CentOS 7发行版光盘提供：RPM-GPG-KEY-CentOS-7<br><code>rpm -qa &quot;gpg-pubkey*&quot;</code></p><p>检查系统公钥 <code>rpm -qa &quot;gpg-pubkey*&quot;</code><br><code>[root@centos7 Packages]# rpm --import /mnt/RPM-GPG-KEY-CentOS-7</code><br><code>[root@centos7 Packages]# rpm -K tree-1.6.0-10.el7.x86_64.rpm</code></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据库重建：/var/lib/rpm<br>rpm {–initdb|–rebuilddb} initdb: 初始化<br>如果事先不存在数据库，则新建之否则，不执行任何操作<br>rebuilddb：重建已安装的包头的数据库索引目录</p><h1 id="centos6-内核救援"><a href="#centos6-内核救援" class="headerlink" title="centos6 内核救援"></a>centos6 内核救援</h1><p><img src="https://s2.ax1x.com/2019/05/03/ENOeun.png" alt=""><br><img src="https://s2.ax1x.com/2019/05/03/ENOnH0.png" alt=""></p><h1 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h1><p><code>yum repolist</code> 查看仓库信息<br>仓库的元数据<br>[root@centos7 ~]# cd /var/cache/yum/x86_64/7/<br><code>yum history</code> 查看yum安装历史<br><code>yum history info 2</code> 查看历史中的第二项<br><img src="https://s2.ax1x.com/2019/05/04/EauSmR.png" alt="">yum客户端配置文件：<br><code>/etc/yum.conf</code>：为所有仓库提供公共配置<code>/etc/yum.repos.d/*.repo</code>：为仓库的指向提供配置仓库指向的定义：<pre>[repositoryID]<br>name=Some name for this repository<br>baseurl=url://path/to/repository/<br>enabled={1|0}<br>gpgcheck={1|0}<br>gpgkey=URL<br>enablegroups={1|0}<br>failovermethod={roundrobin|priority}<br>roundrobin：意为随机挑选，默认值<br>priority:按顺序访问<br>cost=    默认为1000</pre> yum的repo配置文件中可用的变量：<br><code>$releasever</code>: 当前OS的发行版的主版本号<br><code>$arch</code>: 平台，i386,i486,i586,x86_64等<br><code>$basearch</code>：基础平台；i386, x86_64<br><code>$YUM0-$YUM9</code>:自定义变量<br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://server/centos/$releasever/$basearch/ </span><br><span class="line">http://server/centos/7/x86_64 </span><br><span class="line">http://server/centos/6/i384</span><br></pre></td></tr></table></figure></p><h2 id="实验基于httpd搭建的yum服务器："><a href="#实验基于httpd搭建的yum服务器：" class="headerlink" title="实验基于httpd搭建的yum服务器："></a>实验基于httpd搭建的yum服务器：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">yum install -y httpd</span><br><span class="line">mkdir -pv centos/&#123;6,7&#125;/os/x86_64 </span><br><span class="line"></span><br><span class="line">html/</span><br><span class="line">└── centos</span><br><span class="line">    ├── 6</span><br><span class="line">    │   └── os</span><br><span class="line">    │       └── x86_64</span><br><span class="line">    └── 7</span><br><span class="line">        └── os</span><br><span class="line">            └── x86_64</span><br><span class="line">                ├── EFI</span><br><span class="line">                │   └── BOOT</span><br><span class="line">                │       └── fonts</span><br><span class="line">                ├── images</span><br><span class="line">                │   └── pxeboot</span><br><span class="line">                ├── isolinux</span><br><span class="line">                ├── LiveOS</span><br><span class="line">                ├── Packages</span><br><span class="line">                └── repodata</span><br><span class="line">mount /dev/sr0 html/centos/7/os/x86_64/</span><br><span class="line">[base]</span><br><span class="line">name=Centos</span><br><span class="line">\#baseurl=file:///run/media/pan/CentOS\ 7\ x86_64/</span><br><span class="line">baseurl=http://192.168.134.138/centos/$releasever/os/$basearch</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure><h2 id="yum-调用文件路径："><a href="#yum-调用文件路径：" class="headerlink" title="yum 调用文件路径："></a>yum 调用文件路径：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mirrorlist=http://192.168.134.138/list.txt</span><br><span class="line">[root@centos7 html]# ls</span><br><span class="line">centos  list.txt</span><br><span class="line">[root@centos7 html]# cat list.txt</span><br><span class="line">file:///var/www/html/centos/7/os/x86_64</span><br><span class="line">baseurl=http://192.168.134.138/centos/$releasever/os/$basearch</span><br></pre></td></tr></table></figure></h2><h2 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall &quot;development tools&quot;</span><br><span class="line">tar xf cmatrix-1.2a.tar.gz</span><br><span class="line">cd cmatrix-1.2a</span><br><span class="line">./configure --prefix=/app/cmatrix</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">yum install -y ncurses-devel(缺的包)</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cd /app/cmtrix/bin</span><br><span class="line">./cmatrix </span><br><span class="line">写入PATH</span><br><span class="line">echo &apos;PATH=/app/httpd/bin:$PATH&apos; &gt; /etc/profile.d/httpd.sh</span><br><span class="line">. /etc/profile.d/httpd.sh</span><br></pre></td></tr></table></figure><h1 id="centos7-支持神奇目录："><a href="#centos7-支持神奇目录：" class="headerlink" title="centos7:支持神奇目录："></a>centos7:支持神奇目录：</h1><p><code>rpm -q autofs</code><br><code>systemctl enabled autofs</code><br><code>systemctl start autofs</code></p><div class="alert alert-warning"><i class="fa fa-bell"></i><br>建立仓库元数据：createrepo /data/repodb<br>yum仓库必须要仓库元数据才能使用</div><h1 id="centos-防火墙"><a href="#centos-防火墙" class="headerlink" title="centos 防火墙"></a>centos 防火墙</h1><p>cnetos7:<br>下次开机不启用 <code>systemctl disable firewalld</code><br>现在马上关掉：<code>systemctl stop firewalld</code></p><p>centos6:<br><code>chkconfig iptables off</code><br><code>service iptables stop</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;KaiTi&quot;&gt;linux 培训的笔记 &lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="command" scheme="http://yoursite.com/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>command</title>
    <link href="http://yoursite.com/2018/08/28/linux%20command/"/>
    <id>http://yoursite.com/2018/08/28/linux command/</id>
    <published>2018-08-28T09:28:03.000Z</published>
    <updated>2019-05-09T08:53:25.673Z</updated>
    
    <content type="html"><![CDATA[<p><center><font face="KaiTi">linux 常用命令集合:</font></center><br><a id="more"></a></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><pre><strong><font color="lime">[root@pan ~]#</font> root:登录的用户　@分隔符　  pan主机名　<font color="blue">~</font>当前路径</strong><br><strong><font color="red">\</font>:newline</strong></pre>  <code>echo $PATH</code><br>ctrl+r:在历史命令中搜索。   ctrl+s:暂停屏幕输出。    ctrl+q:恢复屏幕输出。<br><code>&quot;&amp;&quot; &quot;||&quot; &quot;!&quot;</code><br>只用普通用户登录Shell是<code>/bin/bash</code></p><h1 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h1><p>cat  由第一行开始显示文件内容<br>tac  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！  <font color="red"><br>-n</font> 显示的时候，顺道输出行号！  <font color="red"><br>-A</font>:查询所有的内容包括隐藏字符</p><h1 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h1><p><font color="red">-F</font>:在每个输出项后追加文件的类型标识符，具体含义：<br><strong>“*“</strong>表示具有可执行权限的普通文件<br><strong>“/“</strong>表示目录  <strong>“@”</strong>表示符号链接<br><strong>“|”</strong>表示命令管道FIFO<br><strong>“=”</strong>表示sockets套接字<br>当文件为普通文件时，不输出任何标识符</p><h1 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h1><p><font color="lime">#</font>echo [选项][输出内容] <font color="blue"><br><strong><code>echo -e &quot;\e[1;31m abcd \e[0m&quot;</code></strong></font> 输出颜色<br>=30m 黑色，=31m 红色，=32m 绿色，<br>=33m 黄色，=34m 蓝色，=35m 洋红，<br>=36m 青色，=37m 白色。<br><strong><code>&quot;echo -e ab\bc&quot;</code></strong> <font color="red"> 控制字符在末尾可能不执行。<br>-e</font>:支持反斜线控制的字符转换</p><table><thead><tr><th>控制字符</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>\</td><td style="text-align:center">输出\本身</td></tr><tr><td>\a</td><td style="text-align:center">输出警告音</td></tr><tr><td>\b</td><td style="text-align:center">\退格键，也就是向左删除键</td></tr><tr><td>\c</td><td style="text-align:center">取消输出行末的换行符，和“-n”选项一致</td></tr><tr><td>\e</td><td style="text-align:center">ESCAPE键</td></tr><tr><td>\f</td><td style="text-align:center">换页符</td></tr><tr><td>\n</td><td style="text-align:center">换行符</td></tr><tr><td>\r</td><td style="text-align:center">回车键</td></tr><tr><td>\t</td><td style="text-align:center">制表符，也就是Tab键</td></tr><tr><td>\v</td><td style="text-align:center">垂直制表符</td></tr><tr><td>\0nm</td><td style="text-align:center">按照八进制ASCII码输出字符，其中0为数字零，nnn是三位八进制数</td></tr><tr><td>\xhh</td><td style="text-align:center">按照十六进制ASCII码表输出字符。其中hh是两位十六进制数。</td></tr></tbody></table><h1 id="I-o-redirection"><a href="#I-o-redirection" class="headerlink" title="I/o redirection"></a>I/o redirection</h1><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向:"></a>输出重定向:</h2><p>命令 <strong><code>&gt; 文件 2&gt;&amp;1</code></strong> :以覆盖的方式，把正确输出和错误输出都保存在一个文件当中。<br>命令 <strong><code>&amp;&gt;文件</code></strong> :以覆盖的方式，把正确输出和错误输出都保存到同一个文件当中。</p><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/05/EB9uMq.md.jpg)"><font color="#FFD700">&amp; 是一个描述符，如果1或2前不加&amp;，会被当成一个普通文件。<br>1&gt;&amp;2 意思是把标准输出重定向到标准错误.<br>2&gt;&amp;1 意思是把标准错误输出重定向到标准输出<br>&amp;&gt;filename 意思是把标准输出和标准错误输出都重定向到文件filename中</font></td></tr></table>  </p><h2 id="输入重定向：命令-lt-文件"><a href="#输入重定向：命令-lt-文件" class="headerlink" title="输入重定向：命令 &lt;文件"></a>输入重定向：命令 &lt;文件</h2><p>wc [选项] [文件名]<br>选项：  <font color="red"><br>-c</font> :统计字节数  <font color="red"><br>-w</font> :统计单词数  <font color="red"><br>-l</font> :统计行数<br><strong><code>wc &lt; filename</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wc &lt;&lt; filename     </span><br><span class="line">wc &lt;&lt; a.txt            注意a.txt </span><br><span class="line">&gt; dshi  </span><br><span class="line">&gt; jdiosjfh        </span><br><span class="line">&gt; diosjfiojd        </span><br><span class="line">&gt; fdiojsoifj        </span><br><span class="line">&gt; hello      </span><br><span class="line">4  4 36</span><br></pre></td></tr></table></figure></p><h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><p>sort将文件/文本的每一行作为一个单位，相互比较，比较原则是从首字符向后，<strong>不加参数时</strong>依次按ASCII码值进行比较，最后将他们按升序输出  <font color="red"><br>-n </font>:依照数值的从小到大排序;  <font color="red"><br>-f </font>：忽略大小写 <font color="red"><br>-r </font>:以相反的顺序来排序;   <font color="red"><br>-u </font>:忽略相同行使用-u选项或者uniq 文件名  <font color="red"><br>-t &lt;分隔符&gt;</font>：指定排序时所用的栏位分隔字符；  <font color="red"><br>-k n[,m]</font>是按照指定的字段范围排序，从第n字段开始，m字段结束(默认到行尾)（字母按ASCII排序，数字按从小到大。先数字后字母）  <font color="blue"><font color="lime"><br>[root@mail text]#</font> sort -nrk 3 -t: sort.txt　　<br>将CC列数字从大到小顺序排列：<br>eee:40:5.4<br>eee:60:5.1<br>ddd:20:4.2<br>ccc:50:3.3<br>bbb:10:2.5<br>aaa:30:1.6<br>AAA:BB:CC 列         </font><br><img src="https://s2.ax1x.com/2019/05/09/Eg0jte.png" alt=""><br>指定分隔符是<code>:</code>，用第三字段开头，第三字段结尾排序，就是只用第三字段排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Tiger data]# sort -n -t &quot;:&quot; -k 3,3 /etc/passwd</span><br></pre></td></tr></table></figure></p><p>但是这样排序会以字符串排序需要以数字排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort -n -t &quot;:&quot; -k 3,3 /etc/passwd</span><br></pre></td></tr></table></figure></p><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><ol><li><strong><code>awk &#39;{print $1}&#39; 文件名</code></strong>　  $1第一列，$2第二列，$NF最后一列.$(NF-1)倒数第二列）。<blockquote><p>现在是以文件的空格为分隔符这样打印</p></blockquote></li><li><p><strong><code>awk</code></strong><font color="red">-F</font><strong><code>&quot;:&quot;&#39;{print $1}&#39; /etc/passwd</code></strong></p><blockquote><p><font color="red">-F</font>指定分隔符，并打印文件第一列</p></blockquote></li><li><p>多列打印<font color="lime">#</font><strong><code>awk -F &quot;:&quot; &#39;{print $2 $3}&#39; /etc/passwd</code></strong> 这样打印$2 $3之间是没有分隔符　</p><blockquote><p>要加分隔符就是 <code>awk -F &quot;:&quot; &#39;{print $2 &quot;\t&quot; $3}&#39; /etc/passwd</code> $0表示整个文件</p></blockquote></li></ol><h1 id="df"><a href="#df" class="headerlink" title="df"></a>df</h1><p>文件系统查看命令  <font color="red"><br>-a</font>:显示所有的文件系统信息信息，包括特殊文件系统，如，<font color="blue">/proc</font>,<font color="blue">/sysfs</font>  <font color="red"><br>-h</font>:使用习惯单位显示容量，如KB,MB或GB等。  <font color="red"><br>-T</font>:显示文件系统类型  <font color="red"><br>-m</font>: 以MB为单位显示容量。  <font color="red"><br>-k</font>:以KB为单位显示容量，默认就是以KB为单位显示容量。</p><p><table><tr><td style="background-image:url(https://ws1.sinaimg.cn/large/005RRiqRly1fupcqlu5qoj309s0biq3p.jpg)"><font color="red"><strong>du命令和df命令的区别</strong></font><font color="#ff1493"><br>df:</font><font color="black"><font size="4"><strong>命令是从文件系统考虑的，不光要考虑文件占用的空间，还要统计被命令或程序占用的空间(最常见的就是文件已经删除，但是程序并没有释放空间)</strong>  </font>  <font color="#ff1493"><br>du:</font> <font color="black"><font size="4"><strong>命令是面向文件的，只会计算计算机文件或目录占用的空间.</strong> </font></font></font></td></tr></table></p><h1 id="du"><a href="#du" class="headerlink" title="du"></a>du</h1><p>是通过搜索文件来计算每个文件的大小然后累加，du能看到的文件只是一些当前存在<br>的，没有被删除的。他计算的大小就是当前他认为存在的所有文件大小的累加和     <font color="red"><br>-h </font>: 以K，M，G为单位，提高信息的可读性。  <font color="red"><br>-s </font>: 统计总占用量，而不列出子目录和子文件的占用量。<br><strong><em>ls -h是目录下文件名占用大小　　　du -h 是目录下所有文件的大小</em></strong>  <font color="red"><br>-k </font>: 以KB(1024bytes)为单位输出。  <font color="red"><br>-m </font>: 以MB为单位输出。  <font color="red"><br>-a</font>显示每个子文件的磁盘占用量。默认只统计子目录的磁盘占用量。</p><h1 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h1><p>dd(磁盘对拷命令)命令用于复制文件并对原文件的内容进行转换和格式化处理  </p><p><font color="lime">[root@localhost]#</font> dd if=输入文件  of=输出文件 bs=字节数 count=个数<br>选项：<br>if=输入文件 指定源文件或源设备<br>of=输出文件 指定目标文件或目标设备<br>bs=字节数　指定一次输入/输出多少字节，即把这些字节看做一个数据块<br>count=个数 指定输入/输出多少个数据块  <strong><code>date ; dd if=/dev/zero of=/root/testfile bs=1k count=100000(100M) ; data</code></strong>。</p><h1 id="fsck"><a href="#fsck" class="headerlink" title="fsck"></a>fsck</h1><p>文件系统修复命令<br>fsck [选项] 分区设备文件名  <font color="red"><br>-a</font>:不显示用户提示，自动修复文件系统  <font color="red"><br>-y</font>:自动修复。和-a作用一致，不过有些文件系统只支持<strong>-y</strong></p><h1 id="dumpe2fs"><a href="#dumpe2fs" class="headerlink" title="dumpe2fs"></a>dumpe2fs</h1><p>显示磁盘状态命令  <font color="lime"><br>#</font>dumpe2fs 分区设备名</p><h1 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h1><p>rpm是Linux标准基础（LSB）兼容发行版所使用的一种软件包管理器，用来对软件包进行低级处理rpm可以查询、安装、检验、升级和卸载软件包，它多数用于基于Fedora的系统，比如RHEL和CentOS  </p><p><marquee> <font color="red">只有安装和升级要加包全名。</font>  </marquee><font color="red"><br>-ivh:</font> -i:安装，-v:显示详细信息，-h:显示进度，–nodeps：不检测依赖性。  <font color="red"><br>-Uvh</font>包全名：RPM包升级.   <font color="red"><br>-q </font>:接软件包名字 #查询软件是否已经安装  -q(查询query)  <font color="red"><br>-qa </font>:#查询所有已经安装的RPM包。-a(所有all)  <font color="red"><br>-qi </font>:包名字#查询软件包详细信息   -i :显示软件包的相关信息  <font color="red"><br>-ql 包名</font>:查询软件包安装位置   -l :显示套件的文件列表。  <font color="red"><br>-qf </font>+系统文件名。查看一个文件是由哪个包安装的  <font color="red"><br>-qip 包全名</font>:查询未安装软件包信息，必须在软件包目录进行查询。  <font color="red"><br>-qR </font>:查询软件包的依赖性。  <font color="red"><br>-qRp </font>:查询未安装软件包的依赖性必须在<font color="red">Packages</font>目录查询。  <font color="red"><br>-e 包名</font>:卸载软件。<br><!-- more --><br><strong><pre><font color="#FF1493">rpm -qf `which 程序名`　　#返回软件包的全名<font color="red">　　　已安装的软件包</font><br>rpm -qif `which 程序名`　　#返回软件包的有关信息<br>rpm -qlf `which 程序名`　　#返回软件包的文件列表</font></pre></strong></p><h2 id="RPM校验"><a href="#RPM校验" class="headerlink" title="RPM校验"></a>RPM校验</h2><p><font color="lime"><br>#</font>rpm -V 已安装的包名<br>选项：-V 校验指定RPM包中的文件。(verify)  <font color="lime"><br>[root@Tiger ~]#</font>rpm -V httpd<br><strong>S.5….T.  c /etc/httpd/conf/httpd.conf</strong><br>验证内容中的8个信息的具体内容如下：  <font color="red"><br>S</font>：文件大小是否改变；  <font color="red"><br>M</font>：文件的类型或文件的权限(r w x)是否被改变；  <font color="red"><br>5</font>：文件MD5校验和是否改变(可以看成文件的内容是否改变)；  <font color="red"><br>D</font>：设备的主，从设备号是否改变；  <font color="red"><br>L</font>：文件路径是否改变；  <font color="red"><br>U</font>：文件的属主(所有者)是否改变；  <font color="red"><br>G</font>：文件的属组是否改变；  <font color="red"><br>T</font>：文件的修改时间是否改变；<br><strong>文件类型：</strong> <font color="red"><br>c</font> :配置文件(config file)  <font color="red"><br>d</font> :普通文档(documentation)  <font color="red"><br>g</font> :”鬼”文件(ghost file),很少见，就是该文件不应该被这个RPM包包含  <font color="red"><br>l</font> :授权文件(license file)  <font color="red"><br>r</font> :描述文件(read me)  </p><h2 id="RPM包中文件提取"><a href="#RPM包中文件提取" class="headerlink" title="RPM包中文件提取"></a>RPM包中文件提取</h2><p><font color="lime">#</font><font color="red"><strong><code>rpm2cpio 包全名 | \ cpio -idv .文件绝对路径</code></strong></font> 反斜杠：换行的作用。<br>rpm2cpio:将rpm包转换为cpio格式的命令。<br>cpio:是一个标准工具，他用于创建软件档案文件和从档案文件中提取文件。  <font color="lime"><br>#</font>cpio 选项 &lt; [文件|设备]<br>选项： -i:copy-in模式，还原<br>　　　-d:还原时自动新建目录<br>　　　-v：显示还原过程       <font color="blue"><br>rpm -qf /bin/ls 查询ls命令属于哪个软件包<br>mv /bin/ls /tmp 造成ls命令误删除的假象<br><strong><code>rpm2cpio /mnt/Packages/coreutils-8.4-37.el6.x86_64.rpm | cpio -idv ./bin/ls</code></strong><br>提取RPM包中ls命令到当前目录的/bin/ls下 </font><br><strong><code>cp /root/bin/ls /bin 把ls命令复制到/bin目录，修复文件丢失。</code></strong></p><h2 id="源码包与RPM包的区别"><a href="#源码包与RPM包的区别" class="headerlink" title="源码包与RPM包的区别"></a>源码包与RPM包的区别</h2><p>安装在指定位置当中，一般是/usr/local/软件名/。<br>RPM包安装的服务可以使用系统服务管理命令(service)来管理，例如RPM包安装apache的启动方法是:<font color="blue"><br>/etc/rc.d/init.d/httpd</font> start: 绝对路径启动服务。<br>service httpd start<br>源代码保存位置：<font color="blue">/usr/local/src/</font><br>软件安装位置：<font color="blue">/usr/local/</font><br>如何确定安装过程报错：安装过程停止；并出现<font color="red">error</font>、<font color="red">warning</font>或<font color="red">no</font>的提示。<br>源码包安装过程：<br>下载源码包；解压缩下载的源码包；进入解压缩目录。<table><tr><td bgcolor="#778899"> <font color="black"> CRT中sftp里面要设置远程的路径和本地的路径:<br>cd 1 进入远程连接到的Linux的1目录<br>lcd \text 本地的c盘<font color="blue">text</font>目录<br>get abc.c 从远程目录得到文件abc.c放入本地目录<font color="blue">text</font><br>put a11.txt 从Windows上将文件a11.txt传入linux </font></td></tr></table> </p><h2 id="源码包配置"><a href="#源码包配置" class="headerlink" title="源码包配置"></a>源码包配置</h2><p><strong>./configure</strong>软件配置与检查  </p><ol><li>定义需要的功能选择。  </li><li>检测系统环境是否符合安装需求。  </li><li>把定义好的功能选项和检测系统环境的信息都写入Makefile文件，用于后续的编辑。<br><strong>./configure –prefix=/usr/local/apache2</strong>安装路径<br>详情参考<font color="blue">INSTALL</font>  <h2 id="源码包的卸载："><a href="#源码包的卸载：" class="headerlink" title="源码包的卸载："></a>源码包的卸载：</h2>不需要卸载命令，直接删除安装目录即可，不会遗留任何垃圾文件。  <h3 id="脚本安装包："><a href="#脚本安装包：" class="headerlink" title="脚本安装包："></a>脚本安装包：</h3>脚本安装包并不是独立的软件包类型，常见安装的是源码包。<br>是人们把安装过程写成了自动安装的脚本，只要执行脚本，定义简单的参数，就可以完成安装。<br>非常类似于Windows下软件的安装方式。</li></ol><h1 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h1><p>能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。<font color="red"><br>remove </font>:删除指定的rpm软件包；  yum -y remove 软件包名<br>yum update +包名 :<font color="red">升级。</font><font color="red">       <strong>禁用</strong></font><br>yum grouplist:列出所有可用的软件组列表；<br>yum groupinstall 软件组名:安装指定的软件组，组名可以由goruplist查询出来；<br>yum groupremove:卸载指定软件组；  </p><p><pre><font size="4">配置yum仓库:<br>  [base]<br>  name=centos<br>  baseurl=file:///mnt/<br>  enabled=1<br>  gpgcheck=0 </font></pre><br><code>yum clean all</code> 清除缓存，使最新的yum配置生效。<br><code>yum list</code> 列出所有可安装的软件包列表，包含已安装和未安装的</p><h1 id="head"><a href="#head" class="headerlink" title="head"></a>head</h1><p>head 用来显示档案的开头至标准输出中,默认head命令打印其相应文件的开头10行 <font color="red"><br>-n</font>:显示文件的前n行 <code>head -n 5 a.txt 显示文件的前5行</code>  <font color="red"><br>-c</font>显示文件前n个字节 <code>&gt;head -c 20 a.txt</code> <font color="blue"><br>head -c <font color="red">-32</font> log2014.log文件的除了最后n个字节以外的内容<br>head -n <font color="red">-6</font> log2014.log 输出文件除了最后n行的全部内容 </font>.</p><h1 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h1><p>主要用来从指定点开始将文件写到标准输出。很多人喜欢使用tail -f 来监控日志文件。  <font color="red"><br>-f</font>该参数用于监视文件的增长  <code>tail -f filename</code><br>监视filename文件的尾部内容（默认10行，相当于增加参数 -n 10），刷新显示在屏幕上。退出，按下CTRL+C。  <font color="red"><br>-n</font>从指定行位置读取指定文件。 <code>tail -n 20 filename 显示filename最后20行</code>  <font color="red"><br>-c</font>显示文件最后n个字节 <code>tail -c 20 a.txt</code></p><h1 id="chmod"><a href="#chmod" class="headerlink" title="chmod 　　"></a>chmod 　　</h1><p>chmod命令用来变更文件或目录的权限，文件或目录权限的控制分别以读取、写入、执行3种一般权限来区分，另有3种特殊权限可供运用，设置方式采用文字或数字代号皆可。符号连接的权限无法变更，如果用户对符号连接修改权限，其改变会作用在被连接的原始文件  <font color="red"><br>-f </font>:若该文件权限无法被更改也不要显示错误讯息  <font color="red"><br>-R </font>:对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)<br>r=读取属性 值＝4　　w=写入属性 值＝2　　x=执行属性 值＝1 </p><h1 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h1><p>改变某个文件或目录的所有者和所属的组<br><code>chown USER:GROUP 对象</code><br><code>chown USER 对象</code>　<code>chown :group 对象</code></p><h1 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h1><p>systemctl命令是系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起<br><img src="https://s2.ax1x.com/2019/05/09/Eg0T61.png" alt=""></p><h1 id="chkconfig"><a href="#chkconfig" class="headerlink" title="chkconfig"></a>chkconfig</h1><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/09/Eg04fJ.png)"><font color="#F0FFFF"><font face="KaiTi">1.服务概述:<br>在linux操作系统下，经常需要创建一些服务，这些服务被做成shell脚本，这些服务需要在系统启动的时候自动启动，关闭的时候自动关闭。<br>将需要自动启动的脚本/etc/rc.d/init.d目录下，然后用命令chkconfig –add filename将自动注册开机启动和关机关闭。实质就是在rc0.d-rc6.d目录下生成一些文件连接，这些链接连接到/etc/rc.d /init.d目录下指定文件的shell脚本。</font></font></td></tr></table>  <font color="red"> --list </font>:列出所有系统服务  <font color="red"><br>--add <font color="blue">httpd</font></font>:增加httpd服务。  <font color="red"><br>--del</font> <font color="blue">httpd</font>:删除httpd服务。  <font color="red"><br>--list <font color="blue">mysqld</font></font>:列出mysqld服务设置情况  <font color="red"><br>--level 35 <font color="blue">mysqld</font> on</font>:设定mysqld在等级3和5为开机运行服务，–level 35表示操作只在等级3和5执行，on表示启动，off表示关闭。  <font color="red"><br>chkconfig mysqld on</font>:设定mysqld在各等级为on，“各等级”包括2、3、4、5等级。  </p><p><table><tr><td bgcolor="RED"><font color="black">chkconfig  <em>设置是当前不生效，linux重启后才生效.</em><br>service <em>设置是即时生效，linux关机重启后设置失效</em></font></td></tr></table>.</p><h1 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h1><p>查询与自动挂载(Auto Mount)<br><img src="https://s2.ax1x.com/2019/05/09/Eg0hY4.png" alt=""> <strong><code>mount [-l]</code></strong> 查询系统中已经挂载的设备，-l会显示卷标名称<br><strong><code>mount -a</code></strong> 依据配置文件/etc/fstab的内容，自动挂载  </p><h2 id="挂载命令格式-mount-t-文件系统-L卷标名-o特殊选项-设备文件名-挂载点"><a href="#挂载命令格式-mount-t-文件系统-L卷标名-o特殊选项-设备文件名-挂载点" class="headerlink" title="挂载命令格式 mount [-t 文件系统] [-L卷标名] [-o特殊选项] 设备文件名 挂载点"></a>挂载命令格式 <code>mount [-t 文件系统] [-L卷标名] [-o特殊选项] 设备文件名 挂载点</code></h2><p><font color="red">-t 文件系统</font>:加入文件系统类型来指定挂载的类型，可以ext3、ext4、iso9660等文件系统  <font color="red"><br>-L 卷标名</font>:挂载指定卷标的分区，而不是安装设备文件名挂载  <font color="red"><br>-o 特殊选项</font>:可以指定挂载的额外选项。<br><img src="https://s2.ax1x.com/2019/05/09/Eg0fkF.png" alt="">  <font color="blue"></font><strong><code>mount -o remount,noexec /home</code></strong><font color="red">这里的/home是df可以查看到的分区</font>重新挂载/home分区，并使用noexec权限  <font color="lime"><br>#</font>cd /home      <font color="lime"><br>#</font>vi hello.sh<table><tr><td bgcolor="black"><font color="lime">#!/bin/bash<br>echo “i love you”</font></td></tr></table><font color="lime">#</font>chmod 755   <font color="lime"><br>#</font>./hello.sh 会显示没有权限执行   <font color="lime"><br>#</font>mount -o remount,exec /home 记得改回来，要不然会影响系统启动的。    </p><h2 id="挂载光盘"><a href="#挂载光盘" class="headerlink" title="挂载光盘"></a>挂载光盘</h2><p><code>mkdir /mnt/cdrom 建立挂载点</code><br><code>mount -t iso9660 /dev/cdrom /mnt/cdrom 挂载光盘</code><br><code>mount /dev/sr0 /mnt/cdrom</code></p><h2 id="卸载光盘"><a href="#卸载光盘" class="headerlink" title="卸载光盘"></a>卸载光盘</h2><p><font color="lime">#</font>umount设备文件名或挂载点<br><code>umount /mnt/cdrom</code> </p><h2 id="挂载U盘"><a href="#挂载U盘" class="headerlink" title="挂载U盘"></a>挂载U盘</h2><p><table><tr><td style="background-image:url(https://ws1.sinaimg.cn/large/005RRiqRly1fttgf25sjxj31hc0xctbq.jpg)"><font color="#FF4500">fat32格式:fdisk -l 查看U盘设备文件名<br>mount -t vfat /dev/sdb1 /mnt/usb/<br>注意：fat16分区识别为fat,fat32分区识别为vft。linux默认是不支持NTFS文件系统的</font></td></tr></table>. </p><h2 id="NTFS-u盘支持"><a href="#NTFS-u盘支持" class="headerlink" title="NTFS u盘支持"></a>NTFS u盘支持</h2><p>下载NTFS-3G插件<a href="https://www.tuxera.com/community/open-source-ntfs-3g/" target="_blank" rel="noopener">https://www.tuxera.com/community/open-source-ntfs-3g/</a>   <font color="red"><br>解压</font> <strong><code>tar -zxvf filename</code></strong>  <font color="red"><br>安装</font> <strong><code>./configure &amp;&amp; make &amp;&amp; make install</code></strong><br>fdisk -l查看linux的U盘分区：sdc1<br><code>mount -t ntfs-3g /dev/sdc1 /mnt/usb/</code><br><code>mkfs -t ext4 /dev/sdb1/ 格式化分区,扩展分区不可格式</code><br><code>mkdir /disk1 建立挂载点</code><br><code>mount /dev/sdb1 /disk1 挂载</code></p><h1 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h1><p>新增swap空间:<font color="red">free</font>查看swap大小<br>新增一个分区，改分区号82，保存退出<br>格式化：<font color="red">mkswap /dev/sdb6 </font><br>加入swap分区：<font color="red">swapon /dev/sdb6</font><br>取消swap分区：<font color="red">swapoff /dev/sdb6 </font><br>但是每次开机都要手动挂载一遍，可以写入fatab开机自动挂载<br><strong><code>vi /etc/fstab</code></strong><br><strong><code>/dev/sdb6 swap swap defaults 0 0</code></strong></p><h1 id="free"><a href="#free" class="headerlink" title="free"></a>free</h1><p>显示当前系统未使用的和已使用的内存数目，还可以显示被内核使用的内存缓冲区。   <font color="red"><br>-b </font>：以Byte为单位显示内存使用情况；  <font color="red"><br>-k </font>：以KB为单位显示内存使用情况；  <font color="red"><br>-m </font>：以MB为单位显示内存使用情况；<br><img src="https://s2.ax1x.com/2019/05/09/Eg0yyq.png" alt="">   <font color="red"><code>total</code></font>:去掉为硬件和操作系统保留的内存后剩余的内存总量。许多人奇怪自己的电脑安装了一共8G的内存，但是显示总共只有七点几G的，现在应该没什么疑惑了把，不管Linux还是Windows都会有部分内存是保留给硬件和操作系统的！  <font color="red"><br><code>userd</code></font>：当前已使用的内存总量。  <font color="red"><br><code>free</code></font>：空闲的或可以使用的内存总量  <font color="red"><br><code>shared</code></font>：共享内存大小，主要用于进程间通信  <font color="red"><br><code>buff</code>(buffers)</font>:缓冲，主要用于块设备数据缓冲(磁盘缓存大小)，例如记录文件系统的metadata（目录、权限等等信息）。是指在写入数据时，先把分散的写入操作保存到内存当中，当达到一定程度再集中写入硬盘，减小了磁盘碎片和硬盘反复寻道，加速了数据的写入过程。  <font color="red"><br><code>cache</code></font>:缓存，主要用于文件内容缓冲,是指把读取出来的数据保存在内存当中，当再次读取时，不用读取硬盘而直接从内存当中读取，加速了数据的读取过程。  <font color="red"><br><code>available</code></font>:可以使用的内存总量.</p><h1 id="Compression-压缩-command"><a href="#Compression-压缩-command" class="headerlink" title="Compression 压缩  command"></a>Compression <sub>压缩</sub>  command</h1><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p>gzip <font color="blue">filename</font>压缩　*.gz :”后缀名”<br>gzip <font color="red">-d</font> filename.gz　gunzip <font color="blue">filename</font>.gz 解压缩<br>不解压查看：zcat filename.gz  </p><h2 id="bz2"><a href="#bz2" class="headerlink" title="bz2"></a>bz2</h2><p>bzip2 <font color="blue">filename</font>压缩　*.bzip2:”后缀名”<br>bzip2 <font color="red">-k</font> <font color="blue">filename</font> 保存源文件<font color="red">压缩</font><br>bzip2 <font color="red">-d</font> <font color="blue">filename.bz2</font>　bunzip2 <font color="blue">filename.bz2</font>解压缩<br>不解压查看：bcat <font color="blue">filename.bz2</font>  </p><h2 id="xz"><a href="#xz" class="headerlink" title="xz"></a>xz</h2><p>xz <font color="blue">filename</font>压缩　.xz:”后缀名”<br>xz <font color="red">-d</font> <font color="blue">filename.xz</font> 解压缩<br>unxz <font color="red">-k</font><font color="blue"> filename.xz</font> 保存源文件<font color="red">解压</font></p><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>zip默认保存源文件，可以压缩目录<br>解压：unzip FileName.zip<br>压缩：zip FileName.zip DirName  <font color="red"><br>-r </font>：递归处理，将指定目录下的所有文件和子目录一并处理；</p><h1 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h1><p><font color="red">-c</font>: 建立压缩档案　  <font color="red"><br>-x</font>：解压  <font color="red"><br>-t</font>：查看内容  <font color="red"><br>-r</font>：向压缩归档文件末尾追加文件  <font color="red"><br>-u</font>：更新原压缩包中的文件  </p><p><pre>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的</pre>  <font color="blue">tar <font color="red">cf</font> file.tar files 将一个或多个文件、目录打包到tar包。<br>tar <font color="red">rf</font> file.tar file 将文件file添加到tar包中。<br>tar <font color="red">uf</font> file.tar file 将文件file更新tar包中相应的文件。<br>tar <font color="red">tf</font> file.tar 查看tar内容。<br>tar <font color="red">xf</font> file.tar 解压tar包。  </font>   <font color="red"><br>-z</font>:有gzip属性,即需要用 gzip 压缩  <font color="red"><br>-j</font>:有bz2属性,即需要用 bzip2 压缩   <font color="red"><br>-v</font>:显示处理过程   <font color="red"><br>-C</font>:指定解压输出目录 <font color="blue">tar zxvf test.tar.gz -C test</font><br><strong><font color="red">-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名</font></strong>  <font color="red"><br>-Z</font>：有compress属性的  <font color="red"><br>-O</font>：将文件解开到标准输出   <font color="blue"><br>格式：tar Zcf file.tar.Z files  将一个或多个文件、目录压缩到file.tar.Z中。需要安装了ncompress软件包才行。<br>解压.tar.Z文件。格式：tar Zxf file.tar.Z　  </font><br>归档并压缩：使用时间格式打包数据：<br><code>tar zcf etc-$(date +%F).tar.gz /etc</code>  　　tar zcf etc-`date +%F`.tar.gz /etc </p><h2 id="tar-gz"><a href="#tar-gz" class="headerlink" title="*.tar.gz"></a>*.tar.gz</h2><p>归档并调用gzip压缩　tar <font color="red">-zcf</font> 新文件名.tar.gz /etc/passwd /var/log/messagages<br>调用gzip解压缩并展开归档　tar <font color="red">-zxvf</font> filename.tar.gz </p><h2 id="tar-bz2"><a href="#tar-bz2" class="headerlink" title="*.tar.bz2"></a>*.tar.bz2</h2><p>归档并调用bzip2压缩　tar <font color="red">-jcf</font> 新文件名.tar.bz2 /etc/passwd /var/log/messages<br>调用bzip解压缩并展开归档　tar <font color="red">-jxf</font> filename.tar.bz2<br>不解压缩查看：<code>tar -tvf home_2018-10-14.tar.gz</code>  </p><h1 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h1><p>其方法是先建立一个包括系统内所有档案名称及路径的数据库，之后当寻找时就只需查询这个数据库，而不必实际深入档案系统之中了。 所以你要知道：  <font color="#00BFFF"><br>locate的速度比find快，因为它并不是真的查找文件，而是查数据库<br>locate的查找并不是实时的，而是以数据库的更新为准，一般是系统自己维护<br>升级数据库命令：<code>locate -- u</code> </font><br>CentOS系统找不到locate命令，原因是系统中没有安装<font color="red"> mlocate </font>这个包，然后更新数据库:<font color="red"> updatedb </font>   <font color="red"><br>-c </font>:只显示找到条目的号码  <font color="red"><br>-b </font>:匹配唯一的路径名称的基本文件名  <font color="red"><br>-r </font>:基于基本正则表达式进行匹配操作</p><h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1><p><pre>实时查找工具，通过遍历指定起始路径下文件系统层级结构完成文件查找：</pre></p><h2 id="根据文件名查找："><a href="#根据文件名查找：" class="headerlink" title="根据文件名查找："></a>根据文件名查找：</h2><p><font color="red"> -name </font> “pattern”  <font color="red"><br>-iname </font> “pattern” 支持glob风格的通配符: <code>\*,?,[],[^]</code> i忽略大小写  <font color="red"><br>-regex pattern </font>:基于正则表达式查找文件，匹配整个路径而非其名；  </p><h2 id="根据文件从属关系查找："><a href="#根据文件从属关系查找：" class="headerlink" title="根据文件从属关系查找："></a>根据文件从属关系查找：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-user USERNAME:查找属主指定用户的所有文件；  </span><br><span class="line"> -goup GROUPNAME:查找属组指定组的所有文件；  </span><br><span class="line"> -uid  UID:查找属主指定的UID的所有文件；  </span><br><span class="line"> -gid  GID:查找属组指定的GID的所有文件；  </span><br><span class="line"> -nouser :查找没有属主的文件；  </span><br><span class="line"> -nogroup :查找没有属组的文件；</span><br></pre></td></tr></table></figure><h2 id="根据文件的类型查找："><a href="#根据文件的类型查找：" class="headerlink" title="根据文件的类型查找："></a>根据文件的类型查找：</h2><p><code>-type TYPE</code> :按type查找<br><strong>f:普通文件</strong>　<font color="blue"> <strong>d:目录</strong> </font>　<font color="skyblue"> <strong>l:符号链接文件</strong> </font> 　<font color="yellow"> <strong>b:块设备文件</strong> </font> 　　c:字符设备文件<br>p:管道文件　s：套接字文件  　　【<font color="red"> <strong>./可执行文件</strong> </font>】<br>组合测试：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">与：-a,默认组合逻辑而且的意思; 　　-o 是或者的意思； 　　-not,!：非(相反)</span><br><span class="line">find ./ -size -1M -a -type f</span><br><span class="line">#寻找当前目录下文件大于1M的文件或者是目录。</span><br><span class="line">find ./ -size +1M -o -type d</span><br><span class="line">#寻找当前目录下文件小于1M并且文件类型是一般文件的文件。</span><br></pre></td></tr></table></figure></p><p><font color="red"> <strong>!A -a !B =!(A -o B) 　　　!A -o !B =!(A -a B)</strong></font>   　<br><code>查找tmp目录下不包含“fstab”的字符文件 find /tmp -not -iname &quot;*fstab\*&quot;</code></p><h2 id="根据文件的大小查找："><a href="#根据文件的大小查找：" class="headerlink" title="根据文件的大小查找："></a>根据文件的大小查找：</h2><p><font color="red"> -size </font> [+|-]#UNIT 常用单位：K,M,G<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">size 10K filename,大小表示 (#-1,#] 　　9K&lt;filename&lt;10K;   </span><br><span class="line"> size -10K filename,大小表示[0-UNIT-1];　  </span><br><span class="line"> size +10K filename,大小表示(#,∞);</span><br></pre></td></tr></table></figure></p><h2 id="根据时间戳查找"><a href="#根据时间戳查找" class="headerlink" title="根据时间戳查找"></a>根据时间戳查找</h2><p>以“天”为单位：   </p><p><div class="note primary"><p># [#,#-1]距现在为止过去几天<strong>前</strong>访问过文件。<br>-#:(0,#) 几天<strong>内</strong>访问过文件。<br>+#(oo, #-1] 几天前至-oo访问过的所有文件 </p></div></p> <p></p><p><div class="note warning"><p>-atime:显示的是文件中的数据最后被访问的时间，比如系统的进程直接使用或通过一些命令和脚本间接使用。</p></div></p><p><div class="note warning"><p>-mtime:显示的是文件内容被修改的最后时间，比如用vi编辑就会发生改变。</p></div></p><p><div class="note warning"><p>-ctime:显示的是文件的权限、拥有者、所属的组、链接数发生改变时的时间。当然当内容改变时也会随之改变。</p></div><br>以“分钟”为单位:  </p><p><font color="red"> -amin　　-mmin　　-cmin  </font> 同上</p><h2 id="根据权限来查找"><a href="#根据权限来查找" class="headerlink" title="根据权限来查找"></a>根据权限来查找</h2><p><font color="red"> -perm [/|-]mode </font> <code>find ./ -perm 644</code><br>mode:精确权限匹配； <font color="red"><br>/mode </font> :任何一类用户(u,g,o)的权限中的任何一位(r,w,x)符合条件即满足   9位权限之间存在“或”关系；  <font color="red"><br>-mode </font> :每一类用户(u,g,o)的权限中的每一位(r,w,x)同时符合条件即满足  9位权限之间存在”与”关系；<br><code>440属于/666有读的权限 find./ -perm /666  符合这一查找</code></p><h2 id="处理动作："><a href="#处理动作：" class="headerlink" title="处理动作："></a>处理动作：</h2><p><pre><br>-print:输出至标准输出:默认的动作;<br>-ls:类似于对查找到的文件执行“ls -l”命令，输出文件的详细信息<br>-delete:删除找到的文件<br>-fls:/PATH/TO/SOMEFILE:把查找到的所有文件的长格式信息保存至指定文件中；<br>-ok COMMAND {} \; :对查找到的每个文件执行由COMMAND表示的命令；每次操作都由用户进行确认；<br>-exec COMMAND {} \; :对查找到的每个文件执行由COMMAND表示的命令；<br></pre></p><ol><li><p>查找/var目录下属主为root，且属组为mail的所有文件或目录；<br><code>find /var -user root -a -group mail -ls</code></p></li><li><p>查找/usr目录下不属于root,bin或hadoop的所有文件或目录；用两种方法<br><code>find /usr -not -user root -a -not -user bin -a -not -user hadoop</code><br><code>find /usr -not \( -user root -o -user bin -o -user hadoop \) -ls</code>  </p></li><li>查找/etc目录下最近一周内其内容修改过，且属主不是root也不是hadoop用户的文件或目录；<br><code>find /etc -mtime -7 -a -not -user root -a -not -user hadoop</code><br><code>find /etc -mtime -7 -a -not \(-user root -o -user hadoop\) -ls</code></li><li>查找当前系统上没有属主或属组，且最近一周内曾今被访问过的文件或目录；<br><code>find ./ -nouser -o -nogroup -ls</code> 如果有文件属于可查找项，但是加ls选项最后会无法输出显示　加了-o（或条件）和ls后只会对后一半生效。 需要<br><code>find ./ \( -nouser -o -nogroup\) -atime -7 -ls</code></li><li>查找/etc目录下大于1M且类型为普通文件的所有文件；<br><code>find /etc -size +1M -ls</code><br><code>find /etc -size +1M -type f -exec ls -lh {} \;</code>   </li><li>查找/etc目录下所有用户都没有写权限的文件；<br><code>find /etc -not -perm /222 -type f -ls　至少有一个用户 有</code></li><li>查找/etc目录至少有一类用户没有执行权限的文件；<br><code>find /etc -not -perm -type f -111</code>  </li><li>查找/etc/init.d目录下，所有用户都有执行权限，且其他用户有写权限的所有文件；<br><code>find /etc -perm -111 -a -perm -002 -ls</code><br><code>find /etc -perm -113 -ls -type f</code></li></ol><h1 id="history"><a href="#history" class="headerlink" title="history"></a>history</h1><p>history [选项][历史命令保存文件]<font color="red"><br>-c</font>:清空历史命令  <font color="red"><br>-w</font>:把缓存中的历史命令写入历史命令保存文件 ~/.bash_history <table><tr><td bgcolor="#778899"><font color="black">历史命令默认保存1000条，可以在环境变量配置文件/etc/profile中修改</font></td></tr></table>历史命令的调用： </p><ol><li>使用上、下箭头调用以前的历史命令  </li><li>使用”!n”重复执行第n条历史命令  </li><li>使用”!!”重复执行上一条命令  </li><li>使用”!字符串”重复执行最后一条以该字符串开头的命令。</li><li>使用ctrl+r 搜索历史命令</li></ol><h1 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h1><p>命令别名<font color="lime">#</font><font color="red">alias</font> 别名=<code>&#39;原命令&#39;</code> </p><p><font color="red">alias</font>:查询命令别名。</p><p><div class="note warning"><p></p><p><center>命令执行时顺序：</center></p><ol><li>第一顺位执行时用绝对路径或相对路径执行的命令。  </li><li>第二顺位执行别名。  </li><li>第三顺位执行Bash的内部命令。  </li><li>第四顺位执行按照$PATH环境变量定义的目录查找顺序找到的第一个命令。<br>让别名永久生效：<code>vim /root/.bashrc</code><br>删除别名：<code>unalias 别名</code><br></li></ol></div></p>.<h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><p><strong><code>:.,$y</code></strong>复制当前行到末尾行<br><strong><code>:!</code></strong> 调用系统命令，可临时执行 <table><tr><td> 使vim设置永久生效:vim /etc/vimrc   把设置写到这个文件的最后，对所有账户生效<br>set nu 显示行号 　　set nonu 取消行号<br>set ic 不区分大小写　set noic 取消不区分大小写<br>set ts=4    设置tab键长度<br>set sw=4    设置自动缩进的tab键长度 </td></tr></table>   <code>vim  /root/.vimrc    也可以把设置写到此文件，只对root生效</code> </p><h2 id="vim字符替换"><a href="#vim字符替换" class="headerlink" title="vim字符替换"></a>vim字符替换</h2><p><table><tr><td bgcolor="#FFF0F5"><font size="4">:%s/this/that 每一行的第一个this被替换成that<br>:%s/this/that/g 将文本中所有的this替换成that %从每一行的开头到结尾   s表示替换<br>:1,5 s/old/new/g  #替换第一行到第5行中所有匹配的内容</font></td></tr></table>.</p><h2 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h2><p>u撤销上一步<br>i当前插入，I行首插入。<br>a当前字符插入(光标后一位插入)，A行尾插入。<br>o表示：本行回车到下一行插入，O上一行插入。<br>x删除光标所在字符，X向前删除一个字符。<br>dd删除光标所在的行，dG删除光标所在开始行到文件尾的所有字符。<br>J合并两行。<font color="#FF6437"><br>行操作：</font>home 键或^键行首，$或end行尾<br>dd删除一行Ndd(删除本行与下一行)。<br>yy复制一行，Nyy复制n行，p将复制行粘贴，p向光标下一行粘。(N表示数字) <font color="#FF6437"><br>词操作</font>:dw删除一个词，y+$复制至行尾。y+^复制至行首。yw复制一个词。<strong><font color="red">:.,$y</font></strong>  复制当前行到末尾  <table><tr><td bgcolor="#778899">v模式:编程的时候需要进行多行注释：         （删除是要将光标移到这个词的行首，如果光标不在行首则删除光标之后的字母。）<br>块操作：D或d+$删除至行尾  d+^删除至行首<br>1、注释：ctrl+v进入列编辑模式<br>2、向下或向上移动光标 （ctrl L 向下全部选中）<br>3、把需要注释的行开头的开头标记起来<br>4、然后按大写的I<br>5、再插入注释符，比如“#”<br>6、再按Esc，就会全部注释了<br>删除多行注释：按ctrl+v进入列编辑模式;向下或向上移动光标；选中注释部  分然后按d,就会删除注释符号。</td></tr></table>  </p><p><table><tr><td bgcolor="#FFF0F5">vim编辑器： :wq 可以保存外 :w +路径+文件名直接保存在某个位置和重命名<font color="blue">:w 路径/文件名</font><br>ZZ 保存退出　　:x 保存退出　　:!命令<font color="blue">:!ifconfig</font><br>vi的行定位功能:<br>ctrl+f 向前卷动一个屏幕<br>ctrl+b 向后卷动一个屏幕<br>G     到文件最后一行行首<br>:$    到文件最后一行行尾<br>mG    到指定行，m为目标行数 或者mgg<br>set nu  显示行号<br>/内容   查找指定内容<br>n   查找下一个<br>N   回到前一个<br>？  寻找上一个 </td></tr></table> <table><tr><td bgcolor="#4682B4"><font color="#FFF8DC"><font size="4">/^字符串  查找以字符串开始的行<br>/字符串$  查找以字符串结尾的行<br>/a.b      查找字符串a任意字符b   vim替换<br>r              替换当前光标字符<br>:r 文件名      在光标当前位置载入另一个文件</font></font></td></tr></table>. </p><h1 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h1><p>useradd命令用来建立用户帐号和创建用户的起始目录，使用权限是终极用户.  <font color="red"><br>-u</font> :uid指定用户ID  <font color="red"><br>-d</font>:指定用户登入时的启始目录。  <font color="red"><br>-g</font>:指定用户所属的群组     <font color="red"><br>-G</font>:指定用户所属的附加群组。<br><code>tom 用户的登陆 shell 为非交互式 shell useradd –s /sbin/nologin tom</code>  </p><p><font color="red"> -e </font>:指定账号的有效期限，缺省表示永久有效  </p><p><font color="blue"> useradd user1——创建用户user1;<br>useradd –e 12/30/2009 user2——创建user2,指定有效期2009-12-30到期</font>  </p><p><font color="red">-c</font>:用户说明，手工指定用户的说明，添加说明有Spacebar时要加<font color="red"><strong>“ “</strong></font>。</p><p><table><tr><td bgcolor="#778899">用户默认值文件：<font color="blue">/etc/defalut/useradd</font><br>1.GROUP=100 :用户默认组ID (公有模式)<br>2.HOME=/home :用户家目录<br>3.INACTIVE=-1 :密码过期宽限天数(shadow文件7字段)<br>4.EXPIRE=<font color="red">no value</font> :密码失效时间(8字段)<br>5.SHELL=/bin/bash :默认的shell<br>6.SKEL=/etc/skel :模板目录<br>7.CREATE_MAIL_SPOOL=yes :是否建立邮箱 <font color="blue"><br>/etc/login.defs</font><br>PASS_MAX_DAYS 999 :密码有效期(5字段)<br>PASS_MIN_DAYS 0 :密码修改间隔(4字段)<br>PASS_MIN_LEN 5 :密码最小5位(PAM)<br>PASS_WARN_AGE 7 :密码到期警告(6)<br>UID_MIN 500 :最小和最大UID范围<br>GID_MIX 60000<br>ENCRYPT_METHOD SHA512 :加密模式</td></tr></table>.  </p><h1 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h1><p>删除用户userdel [-r] 用户名  <font color="red"><br>-r</font>:删除用户的同时删除用户家目录</p><h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><p>查看用户id：<font color="lime">#</font>id 用户名<br>查询用户的UID,初始组ID,附加群组ID </p><h1 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h1><p>usermod命令用于修改用户的基本信息。usermod命令不允许你改变正在线上的使用者帐号名称。当usermod命令用来改变user id，必须确认这名user没在电脑上执行任何程序.  <font color="red"><br>-g &lt;群组&gt; </font> 修改用户所属的<font color="red">原始群组</font>。<br><code>usermod -g root username</code>  <font color="#FF1493"><br>-G &lt;群组&gt;</font> 修改户所属的<strong><em>附加群</em></strong>组  <font color="red"><br>-a -G </font> 无限增加到附加组，可拥有多个附加组.<br><code>将a1添加附加组user3 usermod -a -G user3 a1</code><font color="red"><br>-c</font>:修改用户的说明<code>usermod -c &quot;test user&quot; username</code>    </p><p><pre><font size="4">当某一用户拥有多个附加组之后，使用usemod -G会修改附加组，则多个组消失掉变成唯一当前修改的附加组</font></pre><br>1.将 newuser2 添加到附加组 staff <code>usermod -G staff newuser2</code>   <font color="red"><br>-l &lt;帐号名称&gt; </font> 修改用户帐号名称。<br>2.修改 newuser 的用户名为 newuser1 <code>usermod -l newuser1 newuser</code><font color="red"><br>-L 锁定用户密码，使密码无效。</font>  <font color="red"><br>-U 解除密码锁定。</font><br>3.锁定账号 newuser1 <code>usermod -L newuser1</code><br>4.解除对 newuser1 的锁定 <code>usermod -U newuser1</code> <font color="red"><br>-d </font>改变用户家目录,常与<font color="red">-m</font>结合使用       <font color="red"><br>-m </font>将主目录的内容移动到新目录<br><code>usermod -m -d /home/user2 -uid username</code>若使用报错使用以下命令：<br><code>cat /dev/null &gt; /var/run/utmp</code>   </p><p><table><tr><td bgcolor="#778899"><font size="3">清空此文件。utmp是一个文件，除了utmp程序你不能编辑这个文件，删掉他的话，当前登陆信息都会丢失。它就好比系统开启后它会把系统成员的信息迅速的记录下来，过一段时间它就不再记录，确认系统的用户配置就是这样了，这个文件在每次机器reboot起来后都会重新创建。</font></td></tr></table>.</p><h1 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h1><p><font color="red">-g</font> GID: 修改组ID  <font color="red"><br>-n</font> 新组名: 修改组名  </p><h1 id="su"><a href="#su" class="headerlink" title="su"></a>su</h1><p>su: [选项] 用户名  </p><p><font color="red"><strong>-</strong></font>:选项只使用”-“代表连带用户的环境变量一起切换。<table><tr><td bgcolor="red">可使用<strong>env</strong>命令查看</td></tr></table><font color="red">-c</font>:仅执行一次命令，而不切换用户身份<br><code>su - root -c &quot;useradd user3&quot;</code>不切换成root,但是执行useradd命令添加user1用户。   </p><h1 id="chage"><a href="#chage" class="headerlink" title="chage"></a>chage</h1><p>修改用户密码状态chage<br>chage [选项] 用户名   <font color="red"><br>-l</font>:列出用户的详细密码状态  <strong><font color="red"><br>-d 日期:修改密码最后一次更改日期(shadow3字段)</font></strong>  <font color="red"><br>-m 天数</font>:两次密码修改间隔(4字段)  <font color="red"><br>-M 天数</font>:密码有效期(5字段)  <font color="red"><br>-W 天数</font>:密码过期前警告天数(7字段)  <font color="red"><br>-I 天数</font>:密码过后宽限天数(7字段)  <font color="red"><br>-E 日期</font>:账号失效时间(8字段)<br><code>chage -d 0 username</code><center><font size="2">这个命令其实是把密码修改日期归0了(shadow第3字段)，这样用户只要一登录就要修改密码。第三字段是指密码最后一次修改时间的日期。1970年1月1号到现在修改密码的时间戳。如果第3字段改为0，系统会认为用户没有修改过操作密码，那么当此用户一旦登录系统就会提示要修改密码，才可正常使用。</font></center>.</p><h1 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h1><p><font color="red">-S</font>:查询用户密码的密码状态，仅root用户可用。  <font color="red"><br>-l</font>:暂时锁定用户。仅root用户可用。  <font color="red"><br>-u</font>:解锁用户。仅root用户可用。  <font color="red"><br>–stdin</font>:可以通过管道符输出的数据作为用户的密码。<code>echo &quot;123&quot; | passwd --stdin user</code></p><h1 id="gpasswd"><a href="#gpasswd" class="headerlink" title="gpasswd"></a>gpasswd</h1><p><font color="red"> -d </font>:从组删除用户 <code>gpasswd -d username groupadd</code> <font color="red"><br>-a </font>:添加用户到组(附加组),同时保留以前的组  </p><p><table><tr><td bgcolor="#FF8DC"><font size="3">添加用户到某一个组可以使用  usermod -G groupB userA 这个命令可以添加一个用户到指定的组，但是以前添加的组就会清空掉.<br>所以想要添加一个用户到一个组，同时保留以前添加的组时，请使用gpasswd这个命令来添加操作用户 </font></td></tr></table><font color="red"> -A </font>:指定组内管理员 <code>gpasswd -A username groupname</code></p><h1 id="groups"><a href="#groups" class="headerlink" title="groups"></a>groups</h1><p><font color="red"> groups username </font>显示linux用户所属的组</p><h1 id="date"><a href="#date" class="headerlink" title="date"></a>date</h1><p>date 根据给定格式显示日期或设置系统日期时间。<font face="Monotype Corsiva">print or set the system date and time</font>　<br>指令所在路径：/bin/date  <code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code> <font color="red"><br>-d</font>:显示字符串所指的日期与时间。字符串前后必须加上双引号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">date -d now  </span><br><span class="line">date -d &apos;next monday&apos;　   </span><br><span class="line">date -d yesterday +%Y-%m-%d</span><br></pre></td></tr></table></figure></p><p><font color="red">-r</font>:显示文件最后修改时间  <font color="red"><br>-s</font>:设置系统时间 <code>date -s &quot;2018-11-11 00 00 00&quot;</code> </p><p><table><tr><td border="100%" width="100%" bgcolor="#E0FFFF">在使用date -s这个命令修改时间后，系统重启后就失效了，因此为了将这个时间永久生效，需要将修改的时间写入CMOS，查看CMOS的时间:<code>clock –r</code><br>将当前系统时间写入CMOS中去<code>clock –w</code> </td></tr></table> 在生产环境中常使用时间格式打包数据：<pre>tar zcvf etc-$(date +%F).tar.gz /etc<br>tar zcvf etc-`date +%F`.tar.gz /etc</pre></p><p><pre><br><img src="https://s2.ax1x.com/2019/05/09/Egwxs0.png" alt=""> date:2018/9/23<pre></pre></pre></p><h1 id="hwclock"><a href="#hwclock" class="headerlink" title="hwclock"></a>hwclock</h1><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/09/Eg0FJJ.png)"><font color="FFFFFF">查看硬件时间<br>设置硬件时间<code>hwclock --set --date=&quot;07/07/06 10:19&quot; （月/日/年 时:分:秒）</code><br>硬件时间和系统时间的同步：重新启动系统，硬件时间会读取系统时间，实现同步，但是在不重新启动的时候，需要用hwclock命令实现同步。<br>硬件时钟与系统时钟同步：<code>hwclock --hctosys</code>（hc代表硬件时间，sys代表系统时间）<br>系统时钟和硬件时钟同步:（让系统的时间同步到硬件时钟)<code>hwclock –-systohc</code></font></td></tr></table>.</p><h1 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h1><p>ln：链接命令<br>硬链接：复制并同步    ln /etc/passwd /tmp/password  <font color="red"><br>软链接：类似windows下的快捷方式　ln -s  /etc/passwd /tmp password</font><br>软链接和硬链接的区别:<br>1.创建命令不同:<font color="red"><br>ln -s /root/ruan.txt /root/桌面/</font>　ln /root/ying.txt /root/桌面/<br>2.<font color="red">软链接创建时必须使用绝对路径(链接和源文件在同一目录下,可以相对路径)</font>硬链接创建时可以绝对路径也可相对路径<br>3.<font color="red">软链接的源文件不可以剪切,重命名,删除 </font>硬链接的源文件可以剪切,重命名,删除<br>4.<font color="red">软链接的链接文件权限永远是777，即使将链接文件的权限进行了修改，也不会发生变化，变得是源文件的权限 </font><br>硬链接的链接文件权限永远和源文件相同<br>5.<font color="red">软链接的链接文件的inode号和源文件不同</font><br>硬链接的链接文件的inode号和源文件相同<br>6.<font color="red">软链接可以对目录操作</font><br>硬链接不支持对目录操作，是针对于上层来说，底层是可以针对于目录做硬链接的，通过代码就可以实现<br>7.<font color="red">软链接可以跨文件系统</font><br>硬链接不可以跨文件系统，因为硬链接是存放在源文件的同一个block上面的</p><h1 id="SElinux"><a href="#SElinux" class="headerlink" title="SElinux"></a>SElinux</h1><p>安全增强型 Linux（Security-Enhanced Linux）简称 SELinux，它是一个 Linux 内核模块，也是 Linux 的一个安全子系统。SELinux 主要作用就是最大限度地减小系统中服务进程可访问的资源（最小权限原则）  </p><p><font color="red">DAC</font><a href="http://blog.51cto.com/zhaotianyu/1795178" target="_blank" rel="noopener">http://blog.51cto.com/zhaotianyu/1795178</a>：在没有使用 SELinux 的操作系统中，决定一个资源是否能被访问的因素是：某个资源是否拥有对应用户的权限（读、写、执行）。<br>只要访问这个资源的进程符合以上的条件就可以被访问。<br>而最致命问题是，root 用户不受任何管制，系统上任何资源都可以无限制地访问。这种权限管理机制的主体是用户，也称为<font color="red">自主访问控制（DAC）。</font>  </p><p><font color="red">MAC</font><a href="http://baijiahao.baidu.com/s?id=1590170088632157084&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">http://baijiahao.baidu.com/s?id=1590170088632157084&amp;wfr=spider&amp;for=pc</a>：在使用了 SELinux 的操作系统中，决定一个资源是否能被访问的因素除了上述因素之外，还需要判断每一类进程是否拥有对某一类资源的访问权限。<br>这样一来，即使进程是以 root 身份运行的，也需要判断这个进程的类型以及允许访问的资源类型才能决定是否允许访问某个资源。进程的活动空间也可以被压缩到最小。<br>即使是以 root 身份运行的服务进程，一般也只能访问到它所需要的资源。即使程序出了漏洞，影响范围也只有在其允许访问的资源范围内。安全性大大增加。<br>这种权限管理机制的主体是进程，也称为<font color="red">强制访问控制（MAC）。</font><br><code>getenforce</code>命令是单词get（获取）和enforce(执行)连写，可查看selinux状态<br><code>setenforce</code> 命令则是单词set（设置）和enforce(执行)连写，用于设置selinux防火墙状态，如： setenforce 0用于关闭selinux防火墙，但重启后失效。<br><img src="https://s2.ax1x.com/2019/05/09/Eg0Zsx.png" alt=""> SELinux status：selinux防火墙的状态，enabled表示启用selinux防火墙<br>关闭SElinux:<br>临时关闭 :<code>setenforce 0</code>用于关闭selinux防火墙，但重启后失效<br>永久关闭：修改selinux的配置文件：<code>vim /etc/selinux/config</code><br>将SELINUX=enforcing改为SELINUX=disabled，保存后退出，此时获取当前selinux防火墙的安全策略仍为Enforcing，配置文件并未生效。重启后验证。<br>SELinux 有三种工作模式，分别是：<br>1.enforcing：强制模式。违反 SELinux 规则的行为将被阻止并记录到日志中。<br>2.permissive：宽容模式。违反 SELinux 规则的行为只会记录到日志中。一般为调试用。<br>3.disabled：关闭 SELinux </p><h1 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h1><p>1.Crontab是一个用于设置周期性执行任务的工具；<br>2.周期性执行的任务我们称为Cron Job；<br>3.周期性执行的任务列表我们称为Cron Table<br>crontab文件的含义：用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下:    </p><p><table><tr><td style="background-image:url(https://s2.ax1x.com/2019/05/09/Eg0neK.md.png)"><pre>* * * * * command　minute　hour　day　month　week　command 顺序:分 时 日 月 周</pre><font color="#000BFFF"><strong> minute： 表示分钟，可以是从0到59之间的任何整数。<br>hour：表示小时，可以是从0到23之间的任何整数。<br>day：表示日期，可以是从1到31之间的任何整数。<br>month：表示月份，可以是从1到12之间的任何整数。<br>week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。　<br>command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件</strong></font></td></tr></table> <font color="red">-u</font>:编辑某个用户的cron，只用root可以使用此参数为别的用户设置cron服务。也可用于给用户指定crontab文件。  <font color="red"><br>-l</font>: 列出当前用户的crontab。  <font color="red"><br>-r</font>: 删除当前用户的crontab。  <font color="red"><br>-e</font>: 编辑当前用户的crontab，默认使用vi，或者是由 VISUAL或EDITOR环境变量指定的编辑器。  <font color="red"><br>-i与-r</font> 一起使用，用来询问用户是否直接删除crontab<br>安装cron<div class="note primary"><p></p>yum install vixie-cron<br>yum install crontabs<br>检查crontab工具是否安装：crontab -l<br>检查crond服务是否启动：service crond status<br>检查crontab服务状态：service crond status</div> <img src="https://s2.ax1x.com/2019/05/09/Eg0lJH.png" alt=""></p><ol><li>每晚的21:30重启apache<br><code>30 21 * * * service httpd restart</code>  </li><li>每月1,10,22日的4:45重启apache<br><code>45 4 1,10,22 * * service httpd restart</code></li><li>每月1-10日的4:45重启apache<br><code>45 4 1-10 * * service httpd restart</code> </li><li>每天18:00-23:00之间每隔30分钟重启apache<br><code>0,30 18-23 * * * service httpd restart</code><br><code>0-59/30 18-23 * * * service httpd restart</code></li><li>每晚11-早上7点之间，每隔一个小时重启apache<br><code>* 23-7/1 * * * service httpd restart</code></li><li>每隔两分钟重启apache <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*/2 * * * * service httpd restart  </span><br><span class="line">1-59/2 * * * * service httpd restart(奇数分钟重启)  </span><br><span class="line">0-58/2 * * * * service httpd restart(偶数分钟重启)</span><br></pre></td></tr></table></figure></li></ol><p><table>小结：<br>*表示任何时候都匹配；<br>可以用”A,B,C”表示A或者B或者C时执行命令<br>可以用”A-B”表示A到B之间时执行命令<br>可以用”*/A”表示每A分钟(小时等)执行一次命令  </table></p><p><pre>*/1 * * * * /usr/sbin/ntpdate us.pool.ntp.org | logger -t NTP</pre><br>时间同步:<br><img src="https://s2.ax1x.com/2019/05/09/Eg0GQI.png" alt=""></p><h1 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h1><p>fdisk命令操作磁盘详解–添加、删除、转换分区等<br>主分区和扩展分区(扩展分区不能直接使用)(1-4),扩展分区下面再分逻辑分区(5开始)。 <code>fdisk /dev/sda</code><br><img src="https://s2.ax1x.com/2019/05/09/Eg0aTS.png" alt="">  分区保存报错需要重启时，强制读取分区表信息<br><code>#partprobe</code><br>yum install -y parted </p><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>grep [选项] “搜索内容” 文件名  <font color="red"><br>-i</font> 忽略大小写  <font color="red"><br>-n</font> 输出行号  <font color="red"><br>-v</font> 反向查找  <font color="red"><br>--color=auto</font>把搜索出的关键字用颜色显示</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;font face=&quot;KaiTi&quot;&gt;linux 常用命令集合:&lt;/font&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="command" scheme="http://yoursite.com/tags/command/"/>
    
  </entry>
  
</feed>
